   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 291               		.section	.rodata.str1.1,"aMS",@progbits,1
 292               	.LC0:
 293 0000 5461 736B 		.string	"Task4 PID=%u\r\n"
 293      3420 5049 
 293      443D 2575 
 293      0D0A 00
 294               	.LC1:
 295 000f 2575 0D0A 		.string	"%u\r\n"
 295      00
 296               		.text
 298               	.global	Task4
 300               	Task4:
 301               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *******************************************************************************/
  23:main.c        **** 
  24:main.c        **** #include <nrk.h>
  25:main.c        **** #include <include.h>
  26:main.c        **** #include <ulib.h>
  27:main.c        **** #include <stdio.h>
  28:main.c        **** #include <hal.h>
  29:main.c        **** #include <nrk_error.h>
  30:main.c        **** #include <nrk_timer.h>
  31:main.c        **** #include <nrk_stack_check.h>
  32:main.c        **** #include <nrk_stats.h>
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  36:main.c        **** nrk_task_type TaskOne;
  37:main.c        **** void Task1(void);
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack2[NRK_APP_STACKSIZE];
  40:main.c        **** nrk_task_type TaskTwo;
  41:main.c        **** void Task2 (void);
  42:main.c        **** 
  43:main.c        **** NRK_STK Stack3[NRK_APP_STACKSIZE];
  44:main.c        **** nrk_task_type TaskThree;
  45:main.c        **** void Task3 (void);
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** NRK_STK Stack4[NRK_APP_STACKSIZE];
  49:main.c        **** nrk_task_type TaskFour;
  50:main.c        **** void Task4 (void);
  51:main.c        **** 
  52:main.c        **** void nrk_create_taskset();
  53:main.c        **** 
  54:main.c        **** int
  55:main.c        **** main ()
  56:main.c        **** {
  57:main.c        ****   nrk_setup_ports();
  58:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  59:main.c        **** 
  60:main.c        ****   nrk_init();
  61:main.c        **** 
  62:main.c        ****   nrk_led_clr(ORANGE_LED);
  63:main.c        ****   nrk_led_clr(BLUE_LED);
  64:main.c        ****   nrk_led_clr(GREEN_LED);
  65:main.c        ****   nrk_led_clr(RED_LED);
  66:main.c        ****  
  67:main.c        ****   nrk_time_set(0,0);
  68:main.c        ****   nrk_create_taskset ();
  69:main.c        ****   nrk_start();
  70:main.c        ****   
  71:main.c        ****   return 0;
  72:main.c        **** }
  73:main.c        **** 
  74:main.c        **** void Task1()
  75:main.c        **** {
  76:main.c        **** nrk_time_t t;
  77:main.c        **** uint16_t cnt;
  78:main.c        **** uint8_t val;
  79:main.c        **** cnt=0;
  80:main.c        **** nrk_kprintf( PSTR("Nano-RK Version ") );
  81:main.c        **** printf( "%d\r\n",NRK_VERSION );
  82:main.c        **** 
  83:main.c        **** printf( "My node's address is %u\r\n",NODE_ADDR );
  84:main.c        ****   
  85:main.c        **** printf( "Task1 PID=%u\r\n",nrk_get_pid());
  86:main.c        **** t.secs=5;
  87:main.c        **** t.nano_secs=0;
  88:main.c        **** 
  89:main.c        **** // setup a software watch dog timer
  90:main.c        **** nrk_sw_wdt_init(0, &t, NULL);
  91:main.c        **** nrk_sw_wdt_start(0);
  92:main.c        **** 
  93:main.c        **** nrk_gpio_direction(NRK_BUTTON, NRK_PIN_INPUT);
  94:main.c        **** 
  95:main.c        ****   while(1) {
  96:main.c        **** 	// Update watchdog timer
  97:main.c        **** 	nrk_sw_wdt_update(0);
  98:main.c        **** 	nrk_led_toggle(ORANGE_LED);
  99:main.c        **** 	val=nrk_gpio_get(NRK_BUTTON);
 100:main.c        **** 
 101:main.c        **** 	// Button logic is inverter 0 means pressed, 1 not pressed
 102:main.c        **** 	// printf( "Task1 cnt=%u button state=%u\r\n",cnt,val );
 103:main.c        ****   // printf( "Task1 cnt=%u\r\n",cnt );
 104:main.c        ****   printf( "%u\r\n", 1);
 105:main.c        **** 	nrk_wait_until_next_period();
 106:main.c        ****         // Uncomment this line to cause a stack overflow
 107:main.c        **** 	// if(cnt>20) kill_stack(10);
 108:main.c        **** 
 109:main.c        **** 	// At time 50, the OS will halt and print statistics
 110:main.c        **** 	// This requires the NRK_STATS_TRACKER #define in nrk_cfg.h
 111:main.c        **** 	// if(cnt==50)  {
 112:main.c        **** 	//	nrk_stats_display_all();
 113:main.c        **** 	//	nrk_halt();
 114:main.c        **** 	//	}
 115:main.c        **** 
 116:main.c        **** 
 117:main.c        **** 	cnt++;
 118:main.c        **** 	}
 119:main.c        **** }
 120:main.c        **** 
 121:main.c        **** void Task2()
 122:main.c        **** {
 123:main.c        ****   int16_t cnt;
 124:main.c        ****   printf( "Task2 PID=%u\r\n",nrk_get_pid());
 125:main.c        ****   cnt=0;
 126:main.c        ****   while(1) {
 127:main.c        **** 	nrk_led_toggle(BLUE_LED);
 128:main.c        **** 	// printf( "Task2 signed cnt=%d\r\n",cnt );
 129:main.c        ****   printf( "%u\r\n", 2);
 130:main.c        **** 	//nrk_stats_display_pid(nrk_get_pid());
 131:main.c        **** 	nrk_wait_until_next_period();
 132:main.c        **** 	cnt--;
 133:main.c        **** 	}
 134:main.c        **** }
 135:main.c        **** 
 136:main.c        **** void Task3()
 137:main.c        **** {
 138:main.c        **** uint16_t cnt;
 139:main.c        ****   printf( "Task3 PID=%u\r\n",nrk_get_pid());
 140:main.c        ****   cnt=0;
 141:main.c        ****   while(1) {
 142:main.c        **** 	nrk_led_toggle(GREEN_LED);
 143:main.c        **** 	// printf( "Task3 cnt=%u\r\n",cnt );
 144:main.c        ****   printf( "%u\r\n", 3);
 145:main.c        **** 	nrk_wait_until_next_period();
 146:main.c        **** 	cnt++;
 147:main.c        **** 	}
 148:main.c        **** }
 149:main.c        **** 
 150:main.c        **** void Task4()
 151:main.c        **** {
 303               	.LM0:
 304               	.LFBB1:
 305               	/* prologue: function */
 306               	/* frame size = 0 */
 307               	/* stack size = 0 */
 308               	.L__stack_usage = 0
 152:main.c        **** uint16_t cnt;
 153:main.c        **** 
 154:main.c        ****   printf( "Task4 PID=%u\r\n",nrk_get_pid());
 310               	.LM1:
 311 0000 0E94 0000 		call nrk_get_pid
 312 0004 1F92      		push __zero_reg__
 313 0006 8F93      		push r24
 314 0008 80E0      		ldi r24,lo8(.LC0)
 315 000a 90E0      		ldi r25,hi8(.LC0)
 316 000c 9F93      		push r25
 317 000e 8F93      		push r24
 318 0010 0E94 0000 		call printf
 319 0014 0F90      		pop __tmp_reg__
 320 0016 0F90      		pop __tmp_reg__
 321 0018 0F90      		pop __tmp_reg__
 322 001a 0F90      		pop __tmp_reg__
 155:main.c        ****   cnt=0;
 156:main.c        ****   while(1) {
 157:main.c        **** 	nrk_led_toggle(RED_LED);
 158:main.c        **** 	// printf( "Task4 cnt=%u\r\n",cnt );
 159:main.c        ****   printf( "%u\r\n", 4);
 324               	.LM2:
 325 001c 14E0      		ldi r17,lo8(4)
 326 001e C0E0      		ldi r28,lo8(.LC1)
 327 0020 D0E0      		ldi r29,hi8(.LC1)
 328               	.L2:
 157:main.c        **** 	nrk_led_toggle(RED_LED);
 330               	.LM3:
 331 0022 80E0      		ldi r24,0
 332 0024 90E0      		ldi r25,0
 333 0026 0E94 0000 		call nrk_led_toggle
 335               	.LM4:
 336 002a 1F92      		push __zero_reg__
 337 002c 1F93      		push r17
 338 002e DF93      		push r29
 339 0030 CF93      		push r28
 340 0032 0E94 0000 		call printf
 160:main.c        **** 	nrk_wait_until_next_period();
 342               	.LM5:
 343 0036 0E94 0000 		call nrk_wait_until_next_period
 344 003a 0F90      		pop __tmp_reg__
 345 003c 0F90      		pop __tmp_reg__
 346 003e 0F90      		pop __tmp_reg__
 347 0040 0F90      		pop __tmp_reg__
 348 0042 00C0      		rjmp .L2
 350               	.Lscope1:
 352               		.stabd	78,0,0
 353               		.section	.rodata.str1.1
 354               	.LC2:
 355 0014 5461 736B 		.string	"Task3 PID=%u\r\n"
 355      3320 5049 
 355      443D 2575 
 355      0D0A 00
 356               		.text
 358               	.global	Task3
 360               	Task3:
 361               		.stabd	46,0,0
 137:main.c        **** {
 363               	.LM6:
 364               	.LFBB2:
 365               	/* prologue: function */
 366               	/* frame size = 0 */
 367               	/* stack size = 0 */
 368               	.L__stack_usage = 0
 139:main.c        ****   printf( "Task3 PID=%u\r\n",nrk_get_pid());
 370               	.LM7:
 371 0044 0E94 0000 		call nrk_get_pid
 372 0048 1F92      		push __zero_reg__
 373 004a 8F93      		push r24
 374 004c 80E0      		ldi r24,lo8(.LC2)
 375 004e 90E0      		ldi r25,hi8(.LC2)
 376 0050 9F93      		push r25
 377 0052 8F93      		push r24
 378 0054 0E94 0000 		call printf
 379 0058 0F90      		pop __tmp_reg__
 380 005a 0F90      		pop __tmp_reg__
 381 005c 0F90      		pop __tmp_reg__
 382 005e 0F90      		pop __tmp_reg__
 144:main.c        ****   printf( "%u\r\n", 3);
 384               	.LM8:
 385 0060 13E0      		ldi r17,lo8(3)
 386 0062 C0E0      		ldi r28,lo8(.LC1)
 387 0064 D0E0      		ldi r29,hi8(.LC1)
 388               	.L4:
 142:main.c        **** 	nrk_led_toggle(GREEN_LED);
 390               	.LM9:
 391 0066 81E0      		ldi r24,lo8(1)
 392 0068 90E0      		ldi r25,0
 393 006a 0E94 0000 		call nrk_led_toggle
 144:main.c        ****   printf( "%u\r\n", 3);
 395               	.LM10:
 396 006e 1F92      		push __zero_reg__
 397 0070 1F93      		push r17
 398 0072 DF93      		push r29
 399 0074 CF93      		push r28
 400 0076 0E94 0000 		call printf
 145:main.c        **** 	nrk_wait_until_next_period();
 402               	.LM11:
 403 007a 0E94 0000 		call nrk_wait_until_next_period
 404 007e 0F90      		pop __tmp_reg__
 405 0080 0F90      		pop __tmp_reg__
 406 0082 0F90      		pop __tmp_reg__
 407 0084 0F90      		pop __tmp_reg__
 408 0086 00C0      		rjmp .L4
 410               	.Lscope2:
 412               		.stabd	78,0,0
 413               		.section	.rodata.str1.1
 414               	.LC3:
 415 0023 5461 736B 		.string	"Task2 PID=%u\r\n"
 415      3220 5049 
 415      443D 2575 
 415      0D0A 00
 416               		.text
 418               	.global	Task2
 420               	Task2:
 421               		.stabd	46,0,0
 122:main.c        **** {
 423               	.LM12:
 424               	.LFBB3:
 425               	/* prologue: function */
 426               	/* frame size = 0 */
 427               	/* stack size = 0 */
 428               	.L__stack_usage = 0
 124:main.c        ****   printf( "Task2 PID=%u\r\n",nrk_get_pid());
 430               	.LM13:
 431 0088 0E94 0000 		call nrk_get_pid
 432 008c 1F92      		push __zero_reg__
 433 008e 8F93      		push r24
 434 0090 80E0      		ldi r24,lo8(.LC3)
 435 0092 90E0      		ldi r25,hi8(.LC3)
 436 0094 9F93      		push r25
 437 0096 8F93      		push r24
 438 0098 0E94 0000 		call printf
 439 009c 0F90      		pop __tmp_reg__
 440 009e 0F90      		pop __tmp_reg__
 441 00a0 0F90      		pop __tmp_reg__
 442 00a2 0F90      		pop __tmp_reg__
 129:main.c        ****   printf( "%u\r\n", 2);
 444               	.LM14:
 445 00a4 12E0      		ldi r17,lo8(2)
 446 00a6 C0E0      		ldi r28,lo8(.LC1)
 447 00a8 D0E0      		ldi r29,hi8(.LC1)
 448               	.L6:
 127:main.c        **** 	nrk_led_toggle(BLUE_LED);
 450               	.LM15:
 451 00aa 83E0      		ldi r24,lo8(3)
 452 00ac 90E0      		ldi r25,0
 453 00ae 0E94 0000 		call nrk_led_toggle
 129:main.c        ****   printf( "%u\r\n", 2);
 455               	.LM16:
 456 00b2 1F92      		push __zero_reg__
 457 00b4 1F93      		push r17
 458 00b6 DF93      		push r29
 459 00b8 CF93      		push r28
 460 00ba 0E94 0000 		call printf
 131:main.c        **** 	nrk_wait_until_next_period();
 462               	.LM17:
 463 00be 0E94 0000 		call nrk_wait_until_next_period
 464 00c2 0F90      		pop __tmp_reg__
 465 00c4 0F90      		pop __tmp_reg__
 466 00c6 0F90      		pop __tmp_reg__
 467 00c8 0F90      		pop __tmp_reg__
 468 00ca 00C0      		rjmp .L6
 470               	.Lscope3:
 472               		.stabd	78,0,0
 473               		.section	.rodata.str1.1
 474               	.LC4:
 475 0032 2564 0D0A 		.string	"%d\r\n"
 475      00
 476               	.LC5:
 477 0037 4D79 206E 		.string	"My node's address is %u\r\n"
 477      6F64 6527 
 477      7320 6164 
 477      6472 6573 
 477      7320 6973 
 478               	.LC6:
 479 0051 5461 736B 		.string	"Task1 PID=%u\r\n"
 479      3120 5049 
 479      443D 2575 
 479      0D0A 00
 480               		.text
 482               	.global	Task1
 484               	Task1:
 485               		.stabd	46,0,0
  75:main.c        **** {
 487               	.LM18:
 488               	.LFBB4:
 489 00cc CF93      		push r28
 490 00ce DF93      		push r29
 491 00d0 CDB7      		in r28,__SP_L__
 492 00d2 DEB7      		in r29,__SP_H__
 493 00d4 2897      		sbiw r28,8
 494 00d6 0FB6      		in __tmp_reg__,__SREG__
 495 00d8 F894      		cli
 496 00da DEBF      		out __SP_H__,r29
 497 00dc 0FBE      		out __SREG__,__tmp_reg__
 498 00de CDBF      		out __SP_L__,r28
 499               	/* prologue: function */
 500               	/* frame size = 8 */
 501               	/* stack size = 10 */
 502               	.L__stack_usage = 10
  80:main.c        **** nrk_kprintf( PSTR("Nano-RK Version ") );
 504               	.LM19:
 505 00e0 80E0      		ldi r24,lo8(__c.3115)
 506 00e2 90E0      		ldi r25,hi8(__c.3115)
 507 00e4 0E94 0000 		call nrk_kprintf
  81:main.c        **** printf( "%d\r\n",NRK_VERSION );
 509               	.LM20:
 510 00e8 1F92      		push __zero_reg__
 511 00ea 85E6      		ldi r24,lo8(101)
 512 00ec 8F93      		push r24
 513 00ee 80E0      		ldi r24,lo8(.LC4)
 514 00f0 90E0      		ldi r25,hi8(.LC4)
 515 00f2 9F93      		push r25
 516 00f4 8F93      		push r24
 517 00f6 0E94 0000 		call printf
  83:main.c        **** printf( "My node's address is %u\r\n",NODE_ADDR );
 519               	.LM21:
 520 00fa 1F92      		push __zero_reg__
 521 00fc 1F92      		push __zero_reg__
 522 00fe 80E0      		ldi r24,lo8(.LC5)
 523 0100 90E0      		ldi r25,hi8(.LC5)
 524 0102 9F93      		push r25
 525 0104 8F93      		push r24
 526 0106 0E94 0000 		call printf
  85:main.c        **** printf( "Task1 PID=%u\r\n",nrk_get_pid());
 528               	.LM22:
 529 010a 0E94 0000 		call nrk_get_pid
 530 010e 1F92      		push __zero_reg__
 531 0110 8F93      		push r24
 532 0112 80E0      		ldi r24,lo8(.LC6)
 533 0114 90E0      		ldi r25,hi8(.LC6)
 534 0116 9F93      		push r25
 535 0118 8F93      		push r24
 536 011a 0E94 0000 		call printf
  86:main.c        **** t.secs=5;
 538               	.LM23:
 539 011e 85E0      		ldi r24,lo8(5)
 540 0120 90E0      		ldi r25,0
 541 0122 A0E0      		ldi r26,0
 542 0124 B0E0      		ldi r27,0
 543 0126 8983      		std Y+1,r24
 544 0128 9A83      		std Y+2,r25
 545 012a AB83      		std Y+3,r26
 546 012c BC83      		std Y+4,r27
  87:main.c        **** t.nano_secs=0;
 548               	.LM24:
 549 012e 1D82      		std Y+5,__zero_reg__
 550 0130 1E82      		std Y+6,__zero_reg__
 551 0132 1F82      		std Y+7,__zero_reg__
 552 0134 1886      		std Y+8,__zero_reg__
  90:main.c        **** nrk_sw_wdt_init(0, &t, NULL);
 554               	.LM25:
 555 0136 40E0      		ldi r20,0
 556 0138 50E0      		ldi r21,0
 557 013a BE01      		movw r22,r28
 558 013c 6F5F      		subi r22,-1
 559 013e 7F4F      		sbci r23,-1
 560 0140 80E0      		ldi r24,0
 561 0142 90E0      		ldi r25,0
 562 0144 0E94 0000 		call nrk_sw_wdt_init
  91:main.c        **** nrk_sw_wdt_start(0);
 564               	.LM26:
 565 0148 80E0      		ldi r24,0
 566 014a 90E0      		ldi r25,0
 567 014c 0E94 0000 		call nrk_sw_wdt_start
  93:main.c        **** nrk_gpio_direction(NRK_BUTTON, NRK_PIN_INPUT);
 569               	.LM27:
 570 0150 F090 0000 		lds r15,NRK_BUTTON
 571 0154 60E0      		ldi r22,0
 572 0156 8F2D      		mov r24,r15
 573 0158 0E94 0000 		call nrk_gpio_direction
 574 015c 0FB6      		in __tmp_reg__,__SREG__
 575 015e F894      		cli
 576 0160 DEBF      		out __SP_H__,r29
 577 0162 0FBE      		out __SREG__,__tmp_reg__
 578 0164 CDBF      		out __SP_L__,r28
 579               	.LBB2:
 104:main.c        ****   printf( "%u\r\n", 1);
 581               	.LM28:
 582 0166 EE24      		clr r14
 583 0168 E394      		inc r14
 584 016a 00E0      		ldi r16,lo8(.LC1)
 585 016c 10E0      		ldi r17,hi8(.LC1)
 586               	.L8:
  97:main.c        **** 	nrk_sw_wdt_update(0);
 588               	.LM29:
 589 016e 80E0      		ldi r24,0
 590 0170 90E0      		ldi r25,0
 591 0172 0E94 0000 		call nrk_sw_wdt_update
  98:main.c        **** 	nrk_led_toggle(ORANGE_LED);
 593               	.LM30:
 594 0176 82E0      		ldi r24,lo8(2)
 595 0178 90E0      		ldi r25,0
 596 017a 0E94 0000 		call nrk_led_toggle
  99:main.c        **** 	val=nrk_gpio_get(NRK_BUTTON);
 598               	.LM31:
 599 017e 8F2D      		mov r24,r15
 600 0180 0E94 0000 		call nrk_gpio_get
 104:main.c        ****   printf( "%u\r\n", 1);
 602               	.LM32:
 603 0184 1F92      		push __zero_reg__
 604 0186 EF92      		push r14
 605 0188 1F93      		push r17
 606 018a 0F93      		push r16
 607 018c 0E94 0000 		call printf
 105:main.c        **** 	nrk_wait_until_next_period();
 609               	.LM33:
 610 0190 0E94 0000 		call nrk_wait_until_next_period
 611 0194 0F90      		pop __tmp_reg__
 612 0196 0F90      		pop __tmp_reg__
 613 0198 0F90      		pop __tmp_reg__
 614 019a 0F90      		pop __tmp_reg__
 615 019c 00C0      		rjmp .L8
 616               	.LBE2:
 621               	.Lscope4:
 623               		.stabd	78,0,0
 625               	.global	nrk_create_taskset
 627               	nrk_create_taskset:
 628               		.stabd	46,0,0
 161:main.c        **** 	cnt++;
 162:main.c        **** 	}
 163:main.c        **** }
 164:main.c        **** 
 165:main.c        **** void
 166:main.c        **** nrk_create_taskset()
 167:main.c        **** {
 630               	.LM34:
 631               	.LFBB5:
 632 019e 8F92      		push r8
 633 01a0 9F92      		push r9
 634 01a2 AF92      		push r10
 635 01a4 BF92      		push r11
 636 01a6 CF92      		push r12
 637 01a8 DF92      		push r13
 638 01aa EF92      		push r14
 639 01ac FF92      		push r15
 640 01ae CF93      		push r28
 641               	/* prologue: function */
 642               	/* frame size = 0 */
 643               	/* stack size = 9 */
 644               	.L__stack_usage = 9
 168:main.c        ****   nrk_task_set_entry_function( &TaskOne, Task1);
 646               	.LM35:
 647 01b0 60E0      		ldi r22,lo8(gs(Task1))
 648 01b2 70E0      		ldi r23,hi8(gs(Task1))
 649 01b4 80E0      		ldi r24,lo8(TaskOne)
 650 01b6 90E0      		ldi r25,hi8(TaskOne)
 651 01b8 0E94 0000 		call nrk_task_set_entry_function
 169:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 653               	.LM36:
 654 01bc 40E8      		ldi r20,lo8(-128)
 655 01be 50E0      		ldi r21,0
 656 01c0 60E0      		ldi r22,lo8(Stack1)
 657 01c2 70E0      		ldi r23,hi8(Stack1)
 658 01c4 80E0      		ldi r24,lo8(TaskOne)
 659 01c6 90E0      		ldi r25,hi8(TaskOne)
 660 01c8 0E94 0000 		call nrk_task_set_stk
 170:main.c        ****   TaskOne.prio = 1;
 662               	.LM37:
 663 01cc C1E0      		ldi r28,lo8(1)
 664 01ce C093 0000 		sts TaskOne+8,r28
 171:main.c        ****   TaskOne.FirstActivation = TRUE;
 666               	.LM38:
 667 01d2 C093 0000 		sts TaskOne+7,r28
 172:main.c        ****   TaskOne.Type = BASIC_TASK;
 669               	.LM39:
 670 01d6 C093 0000 		sts TaskOne+9,r28
 173:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 672               	.LM40:
 673 01da C093 0000 		sts TaskOne+10,r28
 174:main.c        ****   TaskOne.period.secs = 0;
 675               	.LM41:
 676 01de 1092 0000 		sts TaskOne+11,__zero_reg__
 677 01e2 1092 0000 		sts TaskOne+11+1,__zero_reg__
 678 01e6 1092 0000 		sts TaskOne+11+2,__zero_reg__
 679 01ea 1092 0000 		sts TaskOne+11+3,__zero_reg__
 175:main.c        ****   TaskOne.period.nano_secs = 250*NANOS_PER_MS;
 681               	.LM42:
 682 01ee 80E8      		ldi r24,lo8(-128)
 683 01f0 92EB      		ldi r25,lo8(-78)
 684 01f2 A6EE      		ldi r26,lo8(-26)
 685 01f4 BEE0      		ldi r27,lo8(14)
 686 01f6 8093 0000 		sts TaskOne+15,r24
 687 01fa 9093 0000 		sts TaskOne+15+1,r25
 688 01fe A093 0000 		sts TaskOne+15+2,r26
 689 0202 B093 0000 		sts TaskOne+15+3,r27
 176:main.c        ****   TaskOne.cpu_reserve.secs = 1;
 691               	.LM43:
 692 0206 812C      		mov r8,__zero_reg__
 693 0208 912C      		mov r9,__zero_reg__
 694 020a 5401      		movw r10,r8
 695 020c 8394      		inc r8
 696 020e 8092 0000 		sts TaskOne+19,r8
 697 0212 9092 0000 		sts TaskOne+19+1,r9
 698 0216 A092 0000 		sts TaskOne+19+2,r10
 699 021a B092 0000 		sts TaskOne+19+3,r11
 177:main.c        ****   TaskOne.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 701               	.LM44:
 702 021e C12C      		mov r12,__zero_reg__
 703 0220 91EE      		ldi r25,lo8(-31)
 704 0222 D92E      		mov r13,r25
 705 0224 95EF      		ldi r25,lo8(-11)
 706 0226 E92E      		mov r14,r25
 707 0228 95E0      		ldi r25,lo8(5)
 708 022a F92E      		mov r15,r25
 709 022c C092 0000 		sts TaskOne+23,r12
 710 0230 D092 0000 		sts TaskOne+23+1,r13
 711 0234 E092 0000 		sts TaskOne+23+2,r14
 712 0238 F092 0000 		sts TaskOne+23+3,r15
 178:main.c        ****   TaskOne.offset.secs = 0;
 714               	.LM45:
 715 023c 1092 0000 		sts TaskOne+27,__zero_reg__
 716 0240 1092 0000 		sts TaskOne+27+1,__zero_reg__
 717 0244 1092 0000 		sts TaskOne+27+2,__zero_reg__
 718 0248 1092 0000 		sts TaskOne+27+3,__zero_reg__
 179:main.c        ****   TaskOne.offset.nano_secs= 0;
 720               	.LM46:
 721 024c 1092 0000 		sts TaskOne+31,__zero_reg__
 722 0250 1092 0000 		sts TaskOne+31+1,__zero_reg__
 723 0254 1092 0000 		sts TaskOne+31+2,__zero_reg__
 724 0258 1092 0000 		sts TaskOne+31+3,__zero_reg__
 180:main.c        ****   nrk_activate_task (&TaskOne);
 726               	.LM47:
 727 025c 80E0      		ldi r24,lo8(TaskOne)
 728 025e 90E0      		ldi r25,hi8(TaskOne)
 729 0260 0E94 0000 		call nrk_activate_task
 181:main.c        **** 
 182:main.c        ****   nrk_task_set_entry_function( &TaskTwo, Task2);
 731               	.LM48:
 732 0264 60E0      		ldi r22,lo8(gs(Task2))
 733 0266 70E0      		ldi r23,hi8(gs(Task2))
 734 0268 80E0      		ldi r24,lo8(TaskTwo)
 735 026a 90E0      		ldi r25,hi8(TaskTwo)
 736 026c 0E94 0000 		call nrk_task_set_entry_function
 183:main.c        ****   nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
 738               	.LM49:
 739 0270 40E8      		ldi r20,lo8(-128)
 740 0272 50E0      		ldi r21,0
 741 0274 60E0      		ldi r22,lo8(Stack2)
 742 0276 70E0      		ldi r23,hi8(Stack2)
 743 0278 80E0      		ldi r24,lo8(TaskTwo)
 744 027a 90E0      		ldi r25,hi8(TaskTwo)
 745 027c 0E94 0000 		call nrk_task_set_stk
 184:main.c        ****   TaskTwo.prio = 2;
 747               	.LM50:
 748 0280 82E0      		ldi r24,lo8(2)
 749 0282 8093 0000 		sts TaskTwo+8,r24
 185:main.c        ****   TaskTwo.FirstActivation = TRUE;
 751               	.LM51:
 752 0286 C093 0000 		sts TaskTwo+7,r28
 186:main.c        ****   TaskTwo.Type = BASIC_TASK;
 754               	.LM52:
 755 028a C093 0000 		sts TaskTwo+9,r28
 187:main.c        ****   TaskTwo.SchType = PREEMPTIVE;
 757               	.LM53:
 758 028e C093 0000 		sts TaskTwo+10,r28
 188:main.c        ****   TaskTwo.period.secs = 0;
 760               	.LM54:
 761 0292 1092 0000 		sts TaskTwo+11,__zero_reg__
 762 0296 1092 0000 		sts TaskTwo+11+1,__zero_reg__
 763 029a 1092 0000 		sts TaskTwo+11+2,__zero_reg__
 764 029e 1092 0000 		sts TaskTwo+11+3,__zero_reg__
 189:main.c        ****   TaskTwo.period.nano_secs = 500*NANOS_PER_MS;
 766               	.LM55:
 767 02a2 80E0      		ldi r24,0
 768 02a4 95E6      		ldi r25,lo8(101)
 769 02a6 ADEC      		ldi r26,lo8(-51)
 770 02a8 BDE1      		ldi r27,lo8(29)
 771 02aa 8093 0000 		sts TaskTwo+15,r24
 772 02ae 9093 0000 		sts TaskTwo+15+1,r25
 773 02b2 A093 0000 		sts TaskTwo+15+2,r26
 774 02b6 B093 0000 		sts TaskTwo+15+3,r27
 190:main.c        ****   TaskTwo.cpu_reserve.secs = 0;
 776               	.LM56:
 777 02ba 1092 0000 		sts TaskTwo+19,__zero_reg__
 778 02be 1092 0000 		sts TaskTwo+19+1,__zero_reg__
 779 02c2 1092 0000 		sts TaskTwo+19+2,__zero_reg__
 780 02c6 1092 0000 		sts TaskTwo+19+3,__zero_reg__
 191:main.c        ****   TaskTwo.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 782               	.LM57:
 783 02ca C092 0000 		sts TaskTwo+23,r12
 784 02ce D092 0000 		sts TaskTwo+23+1,r13
 785 02d2 E092 0000 		sts TaskTwo+23+2,r14
 786 02d6 F092 0000 		sts TaskTwo+23+3,r15
 192:main.c        ****   TaskTwo.offset.secs = 0;
 788               	.LM58:
 789 02da 1092 0000 		sts TaskTwo+27,__zero_reg__
 790 02de 1092 0000 		sts TaskTwo+27+1,__zero_reg__
 791 02e2 1092 0000 		sts TaskTwo+27+2,__zero_reg__
 792 02e6 1092 0000 		sts TaskTwo+27+3,__zero_reg__
 193:main.c        ****   TaskTwo.offset.nano_secs= 0;
 794               	.LM59:
 795 02ea 1092 0000 		sts TaskTwo+31,__zero_reg__
 796 02ee 1092 0000 		sts TaskTwo+31+1,__zero_reg__
 797 02f2 1092 0000 		sts TaskTwo+31+2,__zero_reg__
 798 02f6 1092 0000 		sts TaskTwo+31+3,__zero_reg__
 194:main.c        ****   nrk_activate_task (&TaskTwo);
 800               	.LM60:
 801 02fa 80E0      		ldi r24,lo8(TaskTwo)
 802 02fc 90E0      		ldi r25,hi8(TaskTwo)
 803 02fe 0E94 0000 		call nrk_activate_task
 195:main.c        **** 
 196:main.c        **** 
 197:main.c        ****   nrk_task_set_entry_function( &TaskThree, Task3);
 805               	.LM61:
 806 0302 60E0      		ldi r22,lo8(gs(Task3))
 807 0304 70E0      		ldi r23,hi8(gs(Task3))
 808 0306 80E0      		ldi r24,lo8(TaskThree)
 809 0308 90E0      		ldi r25,hi8(TaskThree)
 810 030a 0E94 0000 		call nrk_task_set_entry_function
 198:main.c        ****   nrk_task_set_stk( &TaskThree, Stack3, NRK_APP_STACKSIZE);
 812               	.LM62:
 813 030e 40E8      		ldi r20,lo8(-128)
 814 0310 50E0      		ldi r21,0
 815 0312 60E0      		ldi r22,lo8(Stack3)
 816 0314 70E0      		ldi r23,hi8(Stack3)
 817 0316 80E0      		ldi r24,lo8(TaskThree)
 818 0318 90E0      		ldi r25,hi8(TaskThree)
 819 031a 0E94 0000 		call nrk_task_set_stk
 199:main.c        ****   TaskThree.prio = 3;
 821               	.LM63:
 822 031e 83E0      		ldi r24,lo8(3)
 823 0320 8093 0000 		sts TaskThree+8,r24
 200:main.c        ****   TaskThree.FirstActivation = TRUE;
 825               	.LM64:
 826 0324 C093 0000 		sts TaskThree+7,r28
 201:main.c        ****   TaskThree.Type = BASIC_TASK;
 828               	.LM65:
 829 0328 C093 0000 		sts TaskThree+9,r28
 202:main.c        ****   TaskThree.SchType = PREEMPTIVE;
 831               	.LM66:
 832 032c C093 0000 		sts TaskThree+10,r28
 203:main.c        ****   TaskThree.period.secs = 1;
 834               	.LM67:
 835 0330 8092 0000 		sts TaskThree+11,r8
 836 0334 9092 0000 		sts TaskThree+11+1,r9
 837 0338 A092 0000 		sts TaskThree+11+2,r10
 838 033c B092 0000 		sts TaskThree+11+3,r11
 204:main.c        ****   TaskThree.period.nano_secs = 0;
 840               	.LM68:
 841 0340 1092 0000 		sts TaskThree+15,__zero_reg__
 842 0344 1092 0000 		sts TaskThree+15+1,__zero_reg__
 843 0348 1092 0000 		sts TaskThree+15+2,__zero_reg__
 844 034c 1092 0000 		sts TaskThree+15+3,__zero_reg__
 205:main.c        ****   TaskThree.cpu_reserve.secs = 0;
 846               	.LM69:
 847 0350 1092 0000 		sts TaskThree+19,__zero_reg__
 848 0354 1092 0000 		sts TaskThree+19+1,__zero_reg__
 849 0358 1092 0000 		sts TaskThree+19+2,__zero_reg__
 850 035c 1092 0000 		sts TaskThree+19+3,__zero_reg__
 206:main.c        ****   TaskThree.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 852               	.LM70:
 853 0360 C092 0000 		sts TaskThree+23,r12
 854 0364 D092 0000 		sts TaskThree+23+1,r13
 855 0368 E092 0000 		sts TaskThree+23+2,r14
 856 036c F092 0000 		sts TaskThree+23+3,r15
 207:main.c        ****   TaskThree.offset.secs = 0;
 858               	.LM71:
 859 0370 1092 0000 		sts TaskThree+27,__zero_reg__
 860 0374 1092 0000 		sts TaskThree+27+1,__zero_reg__
 861 0378 1092 0000 		sts TaskThree+27+2,__zero_reg__
 862 037c 1092 0000 		sts TaskThree+27+3,__zero_reg__
 208:main.c        ****   TaskThree.offset.nano_secs= 0;
 864               	.LM72:
 865 0380 1092 0000 		sts TaskThree+31,__zero_reg__
 866 0384 1092 0000 		sts TaskThree+31+1,__zero_reg__
 867 0388 1092 0000 		sts TaskThree+31+2,__zero_reg__
 868 038c 1092 0000 		sts TaskThree+31+3,__zero_reg__
 209:main.c        ****   nrk_activate_task (&TaskThree);
 870               	.LM73:
 871 0390 80E0      		ldi r24,lo8(TaskThree)
 872 0392 90E0      		ldi r25,hi8(TaskThree)
 873 0394 0E94 0000 		call nrk_activate_task
 210:main.c        **** 
 211:main.c        **** 
 212:main.c        ****   nrk_task_set_entry_function( &TaskFour, Task4);
 875               	.LM74:
 876 0398 60E0      		ldi r22,lo8(gs(Task4))
 877 039a 70E0      		ldi r23,hi8(gs(Task4))
 878 039c 80E0      		ldi r24,lo8(TaskFour)
 879 039e 90E0      		ldi r25,hi8(TaskFour)
 880 03a0 0E94 0000 		call nrk_task_set_entry_function
 213:main.c        ****   nrk_task_set_stk( &TaskFour, Stack4, NRK_APP_STACKSIZE);
 882               	.LM75:
 883 03a4 40E8      		ldi r20,lo8(-128)
 884 03a6 50E0      		ldi r21,0
 885 03a8 60E0      		ldi r22,lo8(Stack4)
 886 03aa 70E0      		ldi r23,hi8(Stack4)
 887 03ac 80E0      		ldi r24,lo8(TaskFour)
 888 03ae 90E0      		ldi r25,hi8(TaskFour)
 889 03b0 0E94 0000 		call nrk_task_set_stk
 214:main.c        ****   TaskFour.prio = 4;
 891               	.LM76:
 892 03b4 84E0      		ldi r24,lo8(4)
 893 03b6 8093 0000 		sts TaskFour+8,r24
 215:main.c        ****   TaskFour.FirstActivation = TRUE;
 895               	.LM77:
 896 03ba C093 0000 		sts TaskFour+7,r28
 216:main.c        ****   TaskFour.Type = BASIC_TASK;
 898               	.LM78:
 899 03be C093 0000 		sts TaskFour+9,r28
 217:main.c        ****   TaskFour.SchType = PREEMPTIVE;
 901               	.LM79:
 902 03c2 C093 0000 		sts TaskFour+10,r28
 218:main.c        ****   TaskFour.period.secs = 2;
 904               	.LM80:
 905 03c6 82E0      		ldi r24,lo8(2)
 906 03c8 90E0      		ldi r25,0
 907 03ca A0E0      		ldi r26,0
 908 03cc B0E0      		ldi r27,0
 909 03ce 8093 0000 		sts TaskFour+11,r24
 910 03d2 9093 0000 		sts TaskFour+11+1,r25
 911 03d6 A093 0000 		sts TaskFour+11+2,r26
 912 03da B093 0000 		sts TaskFour+11+3,r27
 219:main.c        ****   TaskFour.period.nano_secs = 0;
 914               	.LM81:
 915 03de 1092 0000 		sts TaskFour+15,__zero_reg__
 916 03e2 1092 0000 		sts TaskFour+15+1,__zero_reg__
 917 03e6 1092 0000 		sts TaskFour+15+2,__zero_reg__
 918 03ea 1092 0000 		sts TaskFour+15+3,__zero_reg__
 220:main.c        ****   TaskFour.cpu_reserve.secs = 0;
 920               	.LM82:
 921 03ee 1092 0000 		sts TaskFour+19,__zero_reg__
 922 03f2 1092 0000 		sts TaskFour+19+1,__zero_reg__
 923 03f6 1092 0000 		sts TaskFour+19+2,__zero_reg__
 924 03fa 1092 0000 		sts TaskFour+19+3,__zero_reg__
 221:main.c        ****   TaskFour.cpu_reserve.nano_secs = 100*NANOS_PER_MS;
 926               	.LM83:
 927 03fe C092 0000 		sts TaskFour+23,r12
 928 0402 D092 0000 		sts TaskFour+23+1,r13
 929 0406 E092 0000 		sts TaskFour+23+2,r14
 930 040a F092 0000 		sts TaskFour+23+3,r15
 222:main.c        ****   TaskFour.offset.secs = 0;
 932               	.LM84:
 933 040e 1092 0000 		sts TaskFour+27,__zero_reg__
 934 0412 1092 0000 		sts TaskFour+27+1,__zero_reg__
 935 0416 1092 0000 		sts TaskFour+27+2,__zero_reg__
 936 041a 1092 0000 		sts TaskFour+27+3,__zero_reg__
 223:main.c        ****   TaskFour.offset.nano_secs= 0;
 938               	.LM85:
 939 041e 1092 0000 		sts TaskFour+31,__zero_reg__
 940 0422 1092 0000 		sts TaskFour+31+1,__zero_reg__
 941 0426 1092 0000 		sts TaskFour+31+2,__zero_reg__
 942 042a 1092 0000 		sts TaskFour+31+3,__zero_reg__
 224:main.c        ****   nrk_activate_task (&TaskFour);
 944               	.LM86:
 945 042e 80E0      		ldi r24,lo8(TaskFour)
 946 0430 90E0      		ldi r25,hi8(TaskFour)
 947               	/* epilogue start */
 225:main.c        **** 
 226:main.c        **** 
 227:main.c        **** }
 949               	.LM87:
 950 0432 CF91      		pop r28
 951 0434 FF90      		pop r15
 952 0436 EF90      		pop r14
 953 0438 DF90      		pop r13
 954 043a CF90      		pop r12
 955 043c BF90      		pop r11
 956 043e AF90      		pop r10
 957 0440 9F90      		pop r9
 958 0442 8F90      		pop r8
 224:main.c        ****   nrk_activate_task (&TaskFour);
 960               	.LM88:
 961 0444 0C94 0000 		jmp nrk_activate_task
 963               	.Lscope5:
 965               		.stabd	78,0,0
 966               		.section	.text.startup,"ax",@progbits
 968               	.global	main
 970               	main:
 971               		.stabd	46,0,0
  56:main.c        **** {
 973               	.LM89:
 974               	.LFBB6:
 975               	/* prologue: function */
 976               	/* frame size = 0 */
 977               	/* stack size = 0 */
 978               	.L__stack_usage = 0
  57:main.c        ****   nrk_setup_ports();
 980               	.LM90:
 981 0000 0E94 0000 		call nrk_setup_ports
  58:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 983               	.LM91:
 984 0004 80E1      		ldi r24,lo8(16)
 985 0006 90E0      		ldi r25,0
 986 0008 0E94 0000 		call nrk_setup_uart
  60:main.c        ****   nrk_init();
 988               	.LM92:
 989 000c 0E94 0000 		call nrk_init
  62:main.c        ****   nrk_led_clr(ORANGE_LED);
 991               	.LM93:
 992 0010 82E0      		ldi r24,lo8(2)
 993 0012 90E0      		ldi r25,0
 994 0014 0E94 0000 		call nrk_led_clr
  63:main.c        ****   nrk_led_clr(BLUE_LED);
 996               	.LM94:
 997 0018 83E0      		ldi r24,lo8(3)
 998 001a 90E0      		ldi r25,0
 999 001c 0E94 0000 		call nrk_led_clr
  64:main.c        ****   nrk_led_clr(GREEN_LED);
 1001               	.LM95:
 1002 0020 81E0      		ldi r24,lo8(1)
 1003 0022 90E0      		ldi r25,0
 1004 0024 0E94 0000 		call nrk_led_clr
  65:main.c        ****   nrk_led_clr(RED_LED);
 1006               	.LM96:
 1007 0028 80E0      		ldi r24,0
 1008 002a 90E0      		ldi r25,0
 1009 002c 0E94 0000 		call nrk_led_clr
  67:main.c        ****   nrk_time_set(0,0);
 1011               	.LM97:
 1012 0030 20E0      		ldi r18,0
 1013 0032 30E0      		ldi r19,0
 1014 0034 A901      		movw r20,r18
 1015 0036 60E0      		ldi r22,0
 1016 0038 70E0      		ldi r23,0
 1017 003a CB01      		movw r24,r22
 1018 003c 0E94 0000 		call nrk_time_set
  68:main.c        ****   nrk_create_taskset ();
 1020               	.LM98:
 1021 0040 0E94 0000 		call nrk_create_taskset
  69:main.c        ****   nrk_start();
 1023               	.LM99:
 1024 0044 0E94 0000 		call nrk_start
  72:main.c        **** }
 1026               	.LM100:
 1027 0048 80E0      		ldi r24,0
 1028 004a 90E0      		ldi r25,0
 1029 004c 0895      		ret
 1031               	.Lscope6:
 1033               		.stabd	78,0,0
 1034               		.section	.rodata.str1.1
 1035               	.LC7:
 1036 0060 2564 2000 		.string	"%d "
 1037               	.LC8:
 1038 0064 4469 6520 		.string	"Die Stack %d\r\n"
 1038      5374 6163 
 1038      6B20 2564 
 1038      0D0A 00
 1039               		.text
 1042               	.global	kill_stack
 1044               	kill_stack:
 1045               		.stabd	46,0,0
 228:main.c        **** 
 229:main.c        **** uint8_t kill_stack(uint8_t val)
 230:main.c        **** {
 1047               	.LM101:
 1048               	.LFBB7:
 1049 0448 BF92      		push r11
 1050 044a CF92      		push r12
 1051 044c DF92      		push r13
 1052 044e EF92      		push r14
 1053 0450 FF92      		push r15
 1054 0452 0F93      		push r16
 1055 0454 1F93      		push r17
 1056 0456 CF93      		push r28
 1057 0458 DF93      		push r29
 1058 045a CDB7      		in r28,__SP_L__
 1059 045c DEB7      		in r29,__SP_H__
 1060 045e 2A97      		sbiw r28,10
 1061 0460 0FB6      		in __tmp_reg__,__SREG__
 1062 0462 F894      		cli
 1063 0464 DEBF      		out __SP_H__,r29
 1064 0466 0FBE      		out __SREG__,__tmp_reg__
 1065 0468 CDBF      		out __SP_L__,r28
 1066               	/* prologue: function */
 1067               	/* frame size = 10 */
 1068               	/* stack size = 19 */
 1069               	.L__stack_usage = 19
 1070 046a B82E      		mov r11,r24
 1071 046c 8E01      		movw r16,r28
 1072 046e 0F5F      		subi r16,-1
 1073 0470 1F4F      		sbci r17,-1
 1075               	.LM102:
 1076 0472 F801      		movw r30,r16
 231:main.c        **** char bad_memory[10];
 232:main.c        **** uint8_t i;
 233:main.c        **** for(i=0; i<10; i++ ) bad_memory[i]=i;
 1078               	.LM103:
 1079 0474 90E0      		ldi r25,0
 1080               	.L12:
 1082               	.LM104:
 1083 0476 9193      		st Z+,r25
 1084 0478 9F5F      		subi r25,lo8(-(1))
 1085 047a 9A30      		cpi r25,lo8(10)
 1086 047c 01F4      		brne .L12
 229:main.c        **** uint8_t kill_stack(uint8_t val)
 1088               	.LM105:
 1089 047e 6E01      		movw r12,r28
 1090 0480 8BE0      		ldi r24,11
 1091 0482 C80E      		add r12,r24
 1092 0484 D11C      		adc r13,__zero_reg__
 234:main.c        **** for(i=0; i<10; i++ ) printf( "%d ", bad_memory[i]);
 1094               	.LM106:
 1095 0486 20E0      		ldi r18,lo8(.LC7)
 1096 0488 E22E      		mov r14,r18
 1097 048a 20E0      		ldi r18,hi8(.LC7)
 1098 048c F22E      		mov r15,r18
 1099               	.L13:
 1101               	.LM107:
 1102 048e F801      		movw r30,r16
 1103 0490 8191      		ld r24,Z+
 1104 0492 8F01      		movw r16,r30
 1105 0494 1F92      		push __zero_reg__
 1106 0496 8F93      		push r24
 1107 0498 FF92      		push r15
 1108 049a EF92      		push r14
 1109 049c 0E94 0000 		call printf
 1110 04a0 0F90      		pop __tmp_reg__
 1111 04a2 0F90      		pop __tmp_reg__
 1112 04a4 0F90      		pop __tmp_reg__
 1113 04a6 0F90      		pop __tmp_reg__
 1114 04a8 0C15      		cp r16,r12
 1115 04aa 1D05      		cpc r17,r13
 1116 04ac 01F4      		brne .L13
 235:main.c        ****    printf( "Die Stack %d\r\n",val );
 1118               	.LM108:
 1119 04ae 1F92      		push __zero_reg__
 1120 04b0 BF92      		push r11
 1121 04b2 20E0      		ldi r18,lo8(.LC8)
 1122 04b4 30E0      		ldi r19,hi8(.LC8)
 1123 04b6 3F93      		push r19
 1124 04b8 2F93      		push r18
 1125 04ba 0E94 0000 		call printf
 236:main.c        **** if(val>1) kill_stack(val-1);
 1127               	.LM109:
 1128 04be 0F90      		pop __tmp_reg__
 1129 04c0 0F90      		pop __tmp_reg__
 1130 04c2 0F90      		pop __tmp_reg__
 1131 04c4 0F90      		pop __tmp_reg__
 1132 04c6 F1E0      		ldi r31,lo8(1)
 1133 04c8 FB15      		cp r31,r11
 1134 04ca 00F4      		brsh .L14
 1136               	.LM110:
 1137 04cc 8B2D      		mov r24,r11
 1138 04ce 8150      		subi r24,lo8(-(-1))
 1139 04d0 0E94 0000 		call kill_stack
 1140               	.L14:
 237:main.c        **** return 0;
 238:main.c        **** }
 1142               	.LM111:
 1143 04d4 80E0      		ldi r24,0
 1144               	/* epilogue start */
 1145 04d6 2A96      		adiw r28,10
 1146 04d8 0FB6      		in __tmp_reg__,__SREG__
 1147 04da F894      		cli
 1148 04dc DEBF      		out __SP_H__,r29
 1149 04de 0FBE      		out __SREG__,__tmp_reg__
 1150 04e0 CDBF      		out __SP_L__,r28
 1151 04e2 DF91      		pop r29
 1152 04e4 CF91      		pop r28
 1153 04e6 1F91      		pop r17
 1154 04e8 0F91      		pop r16
 1155 04ea FF90      		pop r15
 1156 04ec EF90      		pop r14
 1157 04ee DF90      		pop r13
 1158 04f0 CF90      		pop r12
 1159 04f2 BF90      		pop r11
 1160 04f4 0895      		ret
 1166               	.Lscope7:
 1168               		.stabd	78,0,0
 1169               		.comm	TaskFour,35,1
 1170               		.comm	Stack4,128,1
 1171               		.comm	TaskThree,35,1
 1172               		.comm	Stack3,128,1
 1173               		.comm	TaskTwo,35,1
 1174               		.comm	Stack2,128,1
 1175               		.comm	TaskOne,35,1
 1176               		.comm	Stack1,128,1
 1177               		.comm	_nrk_stats_sleep_time,8,1
 1178               		.comm	cur_task_stats,150,1
 1179               		.comm	app_timer0_prescale,1,1
 1180               		.comm	app_timer0_callback,2,1
 1181               		.comm	_nrk_time_trigger,1,1
 1182               		.comm	_nrk_prev_timer_val,1,1
 1183               		.comm	error_num,1,1
 1184               		.comm	error_task,1,1
 1185               		.comm	nrk_kernel_stk_ptr,2,1
 1186               		.comm	nrk_idle_task_stk,128,1
 1187               		.comm	_nrk_signal_list,4,1
 1188               		.section	.progmem.data,"a",@progbits
 1191               	__c.3115:
 1192 0000 4E61 6E6F 		.string	"Nano-RK Version "
 1192      2D52 4B20 
 1192      5665 7273 
 1192      696F 6E20 
 1192      00
 1212               		.text
 1214               	.Letext0:
 1215               		.ident	"GCC: (GNU) 4.7.2"
 1216               	.global __do_copy_data
 1217               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:4      *ABS*:000000000000003f __SREG__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:300    .text:0000000000000000 Task4
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:360    .text:0000000000000044 Task3
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:420    .text:0000000000000088 Task2
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:484    .text:00000000000000cc Task1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:1191   .progmem.data:0000000000000000 __c.3115
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:627    .text:000000000000019e nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
                            *COM*:0000000000000023 TaskTwo
                            *COM*:0000000000000080 Stack2
                            *COM*:0000000000000023 TaskThree
                            *COM*:0000000000000080 Stack3
                            *COM*:0000000000000023 TaskFour
                            *COM*:0000000000000080 Stack4
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:970    .text.startup:0000000000000000 main
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccPXwQ0s.s:1044   .text:0000000000000448 kill_stack
                            *COM*:0000000000000008 _nrk_stats_sleep_time
                            *COM*:0000000000000096 cur_task_stats
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_get_pid
printf
nrk_led_toggle
nrk_wait_until_next_period
nrk_kprintf
nrk_sw_wdt_init
nrk_sw_wdt_start
NRK_BUTTON
nrk_gpio_direction
nrk_sw_wdt_update
nrk_gpio_get
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_led_clr
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
