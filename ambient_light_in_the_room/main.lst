   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 291               		.section	.rodata.str1.1,"aMS",@progbits,1
 292               	.LC0:
 293 0000 4D79 206E 		.string	"My node's address is %d\r\n"
 293      6F64 6527 
 293      7320 6164 
 293      6472 6573 
 293      7320 6973 
 294               	.LC1:
 295 001a 5461 736B 		.string	"Task1 PID=%d\r\n"
 295      3120 5049 
 295      443D 2564 
 295      0D0A 00
 296               	.LC2:
 297 0029 2064 6172 		.string	" dark "
 297      6B20 00
 298               	.LC3:
 299 0030 2064 6179 		.string	" daylight "
 299      6C69 6768 
 299      7420 00
 300               	.LC4:
 301 003b 2072 6F6F 		.string	" room-light "
 301      6D2D 6C69 
 301      6768 7420 
 301      00
 302               	.LC5:
 303 0048 206C 6967 		.string	" light=%d\r\n"
 303      6874 3D25 
 303      640D 0A00 
 304               		.text
 306               	.global	Task1
 308               	Task1:
 309               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *  Contributing Authors (specific to this file):
  23:main.c        **** *  Zane Starr
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <nrk.h>
  28:main.c        **** #include <include.h>
  29:main.c        **** #include <ulib.h>
  30:main.c        **** #include <stdio.h>
  31:main.c        **** #include <avr/sleep.h>
  32:main.c        **** #include <hal.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** #include <nrk_driver_list.h>
  36:main.c        **** #include <nrk_driver.h>
  37:main.c        **** #include <ff_basic_sensor.h>
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  40:main.c        **** nrk_task_type TaskOne;
  41:main.c        **** void Task1(void);
  42:main.c        **** 
  43:main.c        **** 
  44:main.c        **** void nrk_create_taskset();
  45:main.c        **** void nrk_register_drivers();
  46:main.c        **** uint8_t kill_stack(uint8_t val);
  47:main.c        **** 
  48:main.c        **** int
  49:main.c        **** main ()
  50:main.c        **** {
  51:main.c        ****   uint8_t t;
  52:main.c        ****   nrk_setup_ports();
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        ****   printf( PSTR("starting...\r\n") );
  57:main.c        **** 
  58:main.c        ****   nrk_init();
  59:main.c        ****   nrk_time_set(0,0);
  60:main.c        **** 
  61:main.c        ****   nrk_register_drivers();
  62:main.c        ****   nrk_create_taskset ();
  63:main.c        ****   nrk_start();
  64:main.c        ****   
  65:main.c        ****   return 0;
  66:main.c        **** }
  67:main.c        **** 
  68:main.c        **** 
  69:main.c        **** void Task1()
  70:main.c        **** {
 311               	.LM0:
 312               	.LFBB1:
 313 0000 CF93      		push r28
 314 0002 DF93      		push r29
 315 0004 00D0      		rcall .
 316 0006 CDB7      		in r28,__SP_L__
 317 0008 DEB7      		in r29,__SP_H__
 318               	/* prologue: function */
 319               	/* frame size = 2 */
 320               	/* stack size = 4 */
 321               	.L__stack_usage = 4
  71:main.c        **** uint16_t cnt;
  72:main.c        **** int8_t i,fd,val;
  73:main.c        **** uint16_t buf;
  74:main.c        **** uint64_t bbuf;
  75:main.c        **** 
  76:main.c        ****   printf( "My node's address is %d\r\n",NODE_ADDR );
 323               	.LM1:
 324 000a 1F92      		push __zero_reg__
 325 000c 1F92      		push __zero_reg__
 326 000e 80E0      		ldi r24,lo8(.LC0)
 327 0010 90E0      		ldi r25,hi8(.LC0)
 328 0012 9F93      		push r25
 329 0014 8F93      		push r24
 330 0016 0E94 0000 		call printf
  77:main.c        **** 
  78:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
 332               	.LM2:
 333 001a 0E94 0000 		call nrk_get_pid
 334 001e 1F92      		push __zero_reg__
 335 0020 8F93      		push r24
 336 0022 80E0      		ldi r24,lo8(.LC1)
 337 0024 90E0      		ldi r25,hi8(.LC1)
 338 0026 9F93      		push r25
 339 0028 8F93      		push r24
 340 002a 0E94 0000 		call printf
  79:main.c        **** 
  80:main.c        ****   
  81:main.c        ****   	// Open ADC device as read 
  82:main.c        ****   	fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
 342               	.LM3:
 343 002e 65E0      		ldi r22,lo8(5)
 344 0030 83E0      		ldi r24,lo8(3)
 345 0032 0E94 0000 		call nrk_open
 346 0036 F82E      		mov r15,r24
  83:main.c        ****   	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 348               	.LM4:
 349 0038 0FB6      		in __tmp_reg__,__SREG__
 350 003a F894      		cli
 351 003c DEBF      		out __SP_H__,r29
 352 003e 0FBE      		out __SREG__,__tmp_reg__
 353 0040 CDBF      		out __SP_L__,r28
 354 0042 9FEF      		ldi r25,lo8(-1)
 355 0044 8913      		cpse r24,r25
 356 0046 00C0      		rjmp .L6
 358               	.LM5:
 359 0048 80E0      		ldi r24,lo8(__c.3153)
 360 004a 90E0      		ldi r25,hi8(__c.3153)
 361 004c 0E94 0000 		call nrk_kprintf
 362               	.L6:
  84:main.c        **** 	cnt=0;
  85:main.c        ****   	while(1) {
  86:main.c        **** 		// Example of setting a sensor
  87:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
  88:main.c        **** 		val=nrk_read(fd,&buf,2);
  89:main.c        **** 
  90:main.c        **** 		if(buf > 1000){
  91:main.c        **** 			printf( " dark \n");
  92:main.c        **** 		}
  93:main.c        **** 		else
  94:main.c        **** 		{
  95:main.c        **** 			if(buf < 700){
  96:main.c        **** 				printf( " daylight \n");
  97:main.c        **** 			}
  98:main.c        **** 			else
  99:main.c        **** 			{
 100:main.c        **** 				printf( " room-light \n");
 101:main.c        **** 			}
 102:main.c        **** 		}
 103:main.c        **** 
 104:main.c        **** 		printf( " light=%d\r\n",buf);
 364               	.LM6:
 365 0050 00E0      		ldi r16,lo8(.LC5)
 366 0052 10E0      		ldi r17,hi8(.LC5)
 367               	.L7:
  87:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
 369               	.LM7:
 370 0054 41E0      		ldi r20,lo8(1)
 371 0056 61E0      		ldi r22,lo8(1)
 372 0058 8F2D      		mov r24,r15
 373 005a 0E94 0000 		call nrk_set_status
  88:main.c        **** 		val=nrk_read(fd,&buf,2);
 375               	.LM8:
 376 005e 42E0      		ldi r20,lo8(2)
 377 0060 BE01      		movw r22,r28
 378 0062 6F5F      		subi r22,-1
 379 0064 7F4F      		sbci r23,-1
 380 0066 8F2D      		mov r24,r15
 381 0068 0E94 0000 		call nrk_read
  90:main.c        **** 		if(buf > 1000){
 383               	.LM9:
 384 006c 2981      		ldd r18,Y+1
 385 006e 3A81      		ldd r19,Y+2
 386 0070 293E      		cpi r18,-23
 387 0072 83E0      		ldi r24,3
 388 0074 3807      		cpc r19,r24
 389 0076 00F0      		brlo .L3
  91:main.c        **** 			printf( " dark \n");
 391               	.LM10:
 392 0078 80E0      		ldi r24,lo8(.LC2)
 393 007a 90E0      		ldi r25,hi8(.LC2)
 394 007c 00C0      		rjmp .L8
 395               	.L3:
  95:main.c        **** 			if(buf < 700){
 397               	.LM11:
 398 007e 2C3B      		cpi r18,-68
 399 0080 3240      		sbci r19,2
 400 0082 00F4      		brsh .L5
  96:main.c        **** 				printf( " daylight \n");
 402               	.LM12:
 403 0084 80E0      		ldi r24,lo8(.LC3)
 404 0086 90E0      		ldi r25,hi8(.LC3)
 405 0088 00C0      		rjmp .L8
 406               	.L5:
 100:main.c        **** 				printf( " room-light \n");
 408               	.LM13:
 409 008a 80E0      		ldi r24,lo8(.LC4)
 410 008c 90E0      		ldi r25,hi8(.LC4)
 411               	.L8:
 412 008e 0E94 0000 		call puts
 414               	.LM14:
 415 0092 8A81      		ldd r24,Y+2
 416 0094 8F93      		push r24
 417 0096 8981      		ldd r24,Y+1
 418 0098 8F93      		push r24
 419 009a 1F93      		push r17
 420 009c 0F93      		push r16
 421 009e 0E94 0000 		call printf
 105:main.c        **** 		nrk_wait_until_next_period();
 423               	.LM15:
 424 00a2 0E94 0000 		call nrk_wait_until_next_period
 106:main.c        **** 		cnt++;
 107:main.c        **** 	}
 426               	.LM16:
 427 00a6 0F90      		pop __tmp_reg__
 428 00a8 0F90      		pop __tmp_reg__
 429 00aa 0F90      		pop __tmp_reg__
 430 00ac 0F90      		pop __tmp_reg__
 431 00ae 00C0      		rjmp .L7
 437               	.Lscope1:
 439               		.stabd	78,0,0
 441               	.global	nrk_create_taskset
 443               	nrk_create_taskset:
 444               		.stabd	46,0,0
 108:main.c        **** }
 109:main.c        **** 
 110:main.c        **** 
 111:main.c        **** void
 112:main.c        **** nrk_create_taskset()
 113:main.c        **** {
 446               	.LM17:
 447               	.LFBB2:
 448               	/* prologue: function */
 449               	/* frame size = 0 */
 450               	/* stack size = 0 */
 451               	.L__stack_usage = 0
 114:main.c        ****   TaskOne.task = Task1;
 453               	.LM18:
 454 00b0 80E0      		ldi r24,lo8(gs(Task1))
 455 00b2 90E0      		ldi r25,hi8(gs(Task1))
 456 00b4 9093 0000 		sts TaskOne+5+1,r25
 457 00b8 8093 0000 		sts TaskOne+5,r24
 115:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 459               	.LM19:
 460 00bc 40E8      		ldi r20,lo8(-128)
 461 00be 50E0      		ldi r21,0
 462 00c0 60E0      		ldi r22,lo8(Stack1)
 463 00c2 70E0      		ldi r23,hi8(Stack1)
 464 00c4 80E0      		ldi r24,lo8(TaskOne)
 465 00c6 90E0      		ldi r25,hi8(TaskOne)
 466 00c8 0E94 0000 		call nrk_task_set_stk
 116:main.c        ****   TaskOne.prio = 1;
 468               	.LM20:
 469 00cc 81E0      		ldi r24,lo8(1)
 470 00ce 8093 0000 		sts TaskOne+8,r24
 117:main.c        ****   TaskOne.FirstActivation = TRUE;
 472               	.LM21:
 473 00d2 8093 0000 		sts TaskOne+7,r24
 118:main.c        ****   TaskOne.Type = BASIC_TASK;
 475               	.LM22:
 476 00d6 8093 0000 		sts TaskOne+9,r24
 119:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 478               	.LM23:
 479 00da 8093 0000 		sts TaskOne+10,r24
 120:main.c        ****   TaskOne.period.secs = 0;
 481               	.LM24:
 482 00de 1092 0000 		sts TaskOne+11,__zero_reg__
 483 00e2 1092 0000 		sts TaskOne+11+1,__zero_reg__
 484 00e6 1092 0000 		sts TaskOne+11+2,__zero_reg__
 485 00ea 1092 0000 		sts TaskOne+11+3,__zero_reg__
 121:main.c        ****   TaskOne.period.nano_secs = 2000*NANOS_PER_MS; //*NANOS_PER_MS;
 487               	.LM25:
 488 00ee 80E0      		ldi r24,0
 489 00f0 94E9      		ldi r25,lo8(-108)
 490 00f2 A5E3      		ldi r26,lo8(53)
 491 00f4 B7E7      		ldi r27,lo8(119)
 492 00f6 8093 0000 		sts TaskOne+15,r24
 493 00fa 9093 0000 		sts TaskOne+15+1,r25
 494 00fe A093 0000 		sts TaskOne+15+2,r26
 495 0102 B093 0000 		sts TaskOne+15+3,r27
 122:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 497               	.LM26:
 498 0106 1092 0000 		sts TaskOne+19,__zero_reg__
 499 010a 1092 0000 		sts TaskOne+19+1,__zero_reg__
 500 010e 1092 0000 		sts TaskOne+19+2,__zero_reg__
 501 0112 1092 0000 		sts TaskOne+19+3,__zero_reg__
 123:main.c        ****   TaskOne.cpu_reserve.nano_secs =  200*NANOS_PER_MS;
 503               	.LM27:
 504 0116 80E0      		ldi r24,0
 505 0118 92EC      		ldi r25,lo8(-62)
 506 011a ABEE      		ldi r26,lo8(-21)
 507 011c BBE0      		ldi r27,lo8(11)
 508 011e 8093 0000 		sts TaskOne+23,r24
 509 0122 9093 0000 		sts TaskOne+23+1,r25
 510 0126 A093 0000 		sts TaskOne+23+2,r26
 511 012a B093 0000 		sts TaskOne+23+3,r27
 124:main.c        ****   TaskOne.offset.secs = 0;
 513               	.LM28:
 514 012e 1092 0000 		sts TaskOne+27,__zero_reg__
 515 0132 1092 0000 		sts TaskOne+27+1,__zero_reg__
 516 0136 1092 0000 		sts TaskOne+27+2,__zero_reg__
 517 013a 1092 0000 		sts TaskOne+27+3,__zero_reg__
 125:main.c        ****   TaskOne.offset.nano_secs= 0;
 519               	.LM29:
 520 013e 1092 0000 		sts TaskOne+31,__zero_reg__
 521 0142 1092 0000 		sts TaskOne+31+1,__zero_reg__
 522 0146 1092 0000 		sts TaskOne+31+2,__zero_reg__
 523 014a 1092 0000 		sts TaskOne+31+3,__zero_reg__
 126:main.c        ****   nrk_activate_task (&TaskOne);
 525               	.LM30:
 526 014e 80E0      		ldi r24,lo8(TaskOne)
 527 0150 90E0      		ldi r25,hi8(TaskOne)
 528 0152 0C94 0000 		jmp nrk_activate_task
 530               	.Lscope2:
 532               		.stabd	78,0,0
 534               	.global	nrk_register_drivers
 536               	nrk_register_drivers:
 537               		.stabd	46,0,0
 127:main.c        **** 
 128:main.c        **** }
 129:main.c        **** 
 130:main.c        **** void nrk_register_drivers()
 131:main.c        **** {
 539               	.LM31:
 540               	.LFBB3:
 541               	/* prologue: function */
 542               	/* frame size = 0 */
 543               	/* stack size = 0 */
 544               	.L__stack_usage = 0
 132:main.c        **** int8_t val;
 133:main.c        **** 
 134:main.c        **** // Register the Basic FireFly Sensor device driver
 135:main.c        **** // Make sure to add: 
 136:main.c        **** //     #define NRK_MAX_DRIVER_CNT  
 137:main.c        **** //     in nrk_cfg.h
 138:main.c        **** // Make sure to add: 
 139:main.c        **** //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 140:main.c        **** //     in makefile
 141:main.c        **** val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
 546               	.LM32:
 547 0156 63E0      		ldi r22,lo8(3)
 548 0158 80E0      		ldi r24,lo8(gs(dev_manager_ff3_sensors))
 549 015a 90E0      		ldi r25,hi8(gs(dev_manager_ff3_sensors))
 550 015c 0E94 0000 		call nrk_register_driver
 142:main.c        **** if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 552               	.LM33:
 553 0160 8F3F      		cpi r24,lo8(-1)
 554 0162 01F4      		brne .L10
 556               	.LM34:
 557 0164 80E0      		ldi r24,lo8(__c.3161)
 558 0166 90E0      		ldi r25,hi8(__c.3161)
 559 0168 0C94 0000 		jmp nrk_kprintf
 560               	.L10:
 561 016c 0895      		ret
 563               	.Lscope3:
 565               		.stabd	78,0,0
 566               		.section	.rodata.str1.1
 567               	.LC6:
 568 0054 7374 6172 		.string	"starting...\r"
 568      7469 6E67 
 568      2E2E 2E0D 
 568      00
 569               		.section	.text.startup,"ax",@progbits
 571               	.global	main
 573               	main:
 574               		.stabd	46,0,0
  50:main.c        **** {
 576               	.LM35:
 577               	.LFBB4:
 578               	/* prologue: function */
 579               	/* frame size = 0 */
 580               	/* stack size = 0 */
 581               	.L__stack_usage = 0
  52:main.c        ****   nrk_setup_ports();
 583               	.LM36:
 584 0000 0E94 0000 		call nrk_setup_ports
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 586               	.LM37:
 587 0004 80E1      		ldi r24,lo8(16)
 588 0006 90E0      		ldi r25,0
 589 0008 0E94 0000 		call nrk_setup_uart
  56:main.c        ****   printf( PSTR("starting...\r\n") );
 591               	.LM38:
 592 000c 80E0      		ldi r24,lo8(.LC6)
 593 000e 90E0      		ldi r25,hi8(.LC6)
 594 0010 0E94 0000 		call puts
  58:main.c        ****   nrk_init();
 596               	.LM39:
 597 0014 0E94 0000 		call nrk_init
  59:main.c        ****   nrk_time_set(0,0);
 599               	.LM40:
 600 0018 20E0      		ldi r18,0
 601 001a 30E0      		ldi r19,0
 602 001c A901      		movw r20,r18
 603 001e 60E0      		ldi r22,0
 604 0020 70E0      		ldi r23,0
 605 0022 CB01      		movw r24,r22
 606 0024 0E94 0000 		call nrk_time_set
  61:main.c        ****   nrk_register_drivers();
 608               	.LM41:
 609 0028 0E94 0000 		call nrk_register_drivers
  62:main.c        ****   nrk_create_taskset ();
 611               	.LM42:
 612 002c 0E94 0000 		call nrk_create_taskset
  63:main.c        ****   nrk_start();
 614               	.LM43:
 615 0030 0E94 0000 		call nrk_start
  66:main.c        **** }
 617               	.LM44:
 618 0034 80E0      		ldi r24,0
 619 0036 90E0      		ldi r25,0
 620 0038 0895      		ret
 622               	.Lscope4:
 624               		.stabd	78,0,0
 625               		.comm	TaskOne,35,1
 626               		.comm	Stack1,128,1
 627               		.comm	app_timer0_prescale,1,1
 628               		.comm	app_timer0_callback,2,1
 629               		.comm	_nrk_time_trigger,1,1
 630               		.comm	_nrk_prev_timer_val,1,1
 631               		.comm	error_num,1,1
 632               		.comm	error_task,1,1
 633               		.comm	nrk_kernel_stk_ptr,2,1
 634               		.comm	nrk_idle_task_stk,128,1
 635               		.comm	_nrk_signal_list,4,1
 636               		.section	.progmem.data,"a",@progbits
 639               	__c.3153:
 640 0000 4661 696C 		.string	"Failed to open sensor driver\r\n"
 640      6564 2074 
 640      6F20 6F70 
 640      656E 2073 
 640      656E 736F 
 643               	__c.3161:
 644 001f 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 644      6564 2074 
 644      6F20 6C6F 
 644      6164 206D 
 644      7920 4144 
 656               		.text
 658               	.Letext0:
 659               		.ident	"GCC: (GNU) 4.7.2"
 660               	.global __do_copy_data
 661               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:4      *ABS*:000000000000003f __SREG__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:308    .text:0000000000000000 Task1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:639    .progmem.data:0000000000000000 __c.3153
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:443    .text:00000000000000b0 nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:536    .text:0000000000000156 nrk_register_drivers
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:643    .progmem.data:000000000000001f __c.3161
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccKmRdh7.s:573    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
printf
nrk_get_pid
nrk_open
nrk_kprintf
nrk_set_status
nrk_read
puts
nrk_wait_until_next_period
nrk_task_set_stk
nrk_activate_task
dev_manager_ff3_sensors
nrk_register_driver
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
