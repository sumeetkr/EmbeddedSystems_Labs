   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 291               		.section	.rodata.str1.1,"aMS",@progbits,1
 292               	.LC0:
 293 0000 6461 726B 		.string	"dark \r\n"
 293      200D 0A00 
 294               	.LC1:
 295 0008 6461 796C 		.string	"daylight \r\n"
 295      6967 6874 
 295      200D 0A00 
 296               	.LC2:
 297 0014 726F 6F6D 		.string	"room-light \r\n"
 297      2D6C 6967 
 297      6874 200D 
 297      0A00 
 298               	.LC3:
 299 0022 4D79 206E 		.string	"My node's address is %d\r\n"
 299      6F64 6527 
 299      7320 6164 
 299      6472 6573 
 299      7320 6973 
 300               	.LC4:
 301 003c 5461 736B 		.string	"Task1 PID=%d\r\n"
 301      3120 5049 
 301      443D 2564 
 301      0D0A 00
 302               	.LC5:
 303 004b 6C75 6D65 		.string	"lumens"
 303      6E73 00
 304               	.LC6:
 305 0052 2061 6D62 		.string	" ambient light value= %d%s"
 305      6965 6E74 
 305      206C 6967 
 305      6874 2076 
 305      616C 7565 
 306               	.LC7:
 307 006d 203A 206C 		.string	" : light type detected as %s\r\n"
 307      6967 6874 
 307      2074 7970 
 307      6520 6465 
 307      7465 6374 
 308               		.text
 310               	.global	Task1
 312               	Task1:
 313               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *  Contributing Authors (specific to this file):
  23:main.c        **** *  Zane Starr
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <nrk.h>
  28:main.c        **** #include <include.h>
  29:main.c        **** #include <ulib.h>
  30:main.c        **** #include <stdio.h>
  31:main.c        **** #include <avr/sleep.h>
  32:main.c        **** #include <hal.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** #include <nrk_driver_list.h>
  36:main.c        **** #include <nrk_driver.h>
  37:main.c        **** #include <ff_basic_sensor.h>
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  40:main.c        **** nrk_task_type TaskOne;
  41:main.c        **** void Task1(void);
  42:main.c        **** 
  43:main.c        **** 
  44:main.c        **** void nrk_create_taskset();
  45:main.c        **** void nrk_register_drivers();
  46:main.c        **** uint8_t kill_stack(uint8_t val);
  47:main.c        **** 
  48:main.c        **** int
  49:main.c        **** main ()
  50:main.c        **** {
  51:main.c        ****   uint8_t t;
  52:main.c        ****   nrk_setup_ports();
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        ****   printf( PSTR("starting...\r\n") );
  57:main.c        **** 
  58:main.c        ****   nrk_init();
  59:main.c        ****   nrk_time_set(0,0);
  60:main.c        **** 
  61:main.c        ****   nrk_register_drivers();
  62:main.c        ****   nrk_create_taskset ();
  63:main.c        ****   nrk_start();
  64:main.c        ****   
  65:main.c        ****   return 0;
  66:main.c        **** }
  67:main.c        **** 
  68:main.c        **** 
  69:main.c        **** void Task1()
  70:main.c        **** {
 315               	.LM0:
 316               	.LFBB1:
 317 0000 CF93      		push r28
 318 0002 DF93      		push r29
 319 0004 00D0      		rcall .
 320 0006 CDB7      		in r28,__SP_L__
 321 0008 DEB7      		in r29,__SP_H__
 322               	/* prologue: function */
 323               	/* frame size = 2 */
 324               	/* stack size = 4 */
 325               	.L__stack_usage = 4
  71:main.c        **** uint16_t cnt;
  72:main.c        **** int8_t i,fd,val;
  73:main.c        **** uint16_t buf;
  74:main.c        **** uint64_t bbuf;
  75:main.c        **** 
  76:main.c        ****   printf( "My node's address is %d\r\n",NODE_ADDR );
 327               	.LM1:
 328 000a 1F92      		push __zero_reg__
 329 000c 1F92      		push __zero_reg__
 330 000e 80E0      		ldi r24,lo8(.LC3)
 331 0010 90E0      		ldi r25,hi8(.LC3)
 332 0012 9F93      		push r25
 333 0014 8F93      		push r24
 334 0016 0E94 0000 		call printf
  77:main.c        **** 
  78:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
 336               	.LM2:
 337 001a 0E94 0000 		call nrk_get_pid
 338 001e 1F92      		push __zero_reg__
 339 0020 8F93      		push r24
 340 0022 80E0      		ldi r24,lo8(.LC4)
 341 0024 90E0      		ldi r25,hi8(.LC4)
 342 0026 9F93      		push r25
 343 0028 8F93      		push r24
 344 002a 0E94 0000 		call printf
  79:main.c        **** 
  80:main.c        ****   
  81:main.c        ****   	// Open ADC device as read 
  82:main.c        ****   	fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
 346               	.LM3:
 347 002e 65E0      		ldi r22,lo8(5)
 348 0030 83E0      		ldi r24,lo8(3)
 349 0032 0E94 0000 		call nrk_open
 350 0036 782E      		mov r7,r24
  83:main.c        ****   	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 352               	.LM4:
 353 0038 0FB6      		in __tmp_reg__,__SREG__
 354 003a F894      		cli
 355 003c DEBF      		out __SP_H__,r29
 356 003e 0FBE      		out __SREG__,__tmp_reg__
 357 0040 CDBF      		out __SP_L__,r28
 358 0042 9FEF      		ldi r25,lo8(-1)
 359 0044 8913      		cpse r24,r25
 360 0046 00C0      		rjmp .L4
 362               	.LM5:
 363 0048 80E0      		ldi r24,lo8(__c.3153)
 364 004a 90E0      		ldi r25,hi8(__c.3153)
 365 004c 0E94 0000 		call nrk_kprintf
 366               	.L4:
 367               	.LBB2:
  84:main.c        **** 	cnt=0;
  85:main.c        ****   	while(1) {
  86:main.c        **** 		// Example of setting a sensor
  87:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
  88:main.c        **** 		val=nrk_read(fd,&buf,2);
  89:main.c        **** 
  90:main.c        ****     char *light_type;
  91:main.c        **** 
  92:main.c        **** 		if(buf > 1000){
  93:main.c        **** 			light_type= "dark \r\n";
  94:main.c        **** 		}
  95:main.c        **** 		else
  96:main.c        **** 		{
  97:main.c        **** 			if(buf < 600){
  98:main.c        **** 				light_type= "daylight \r\n";
  99:main.c        **** 			}
 100:main.c        **** 			else
 101:main.c        **** 			{
 102:main.c        **** 				light_type= "room-light \r\n";
 103:main.c        **** 			}
 104:main.c        **** 		}
 105:main.c        **** 
 106:main.c        ****     // a = -1, b= 1024 - linear transformation, lumens unit
 107:main.c        **** 		printf( " ambient light value= %d%s",-1*buf + 1024, "lumens");
 369               	.LM6:
 370 0050 80E0      		ldi r24,lo8(.LC5)
 371 0052 A82E      		mov r10,r24
 372 0054 80E0      		ldi r24,hi8(.LC5)
 373 0056 B82E      		mov r11,r24
 374 0058 812C      		mov r8,__zero_reg__
 375 005a 94E0      		ldi r25,lo8(4)
 376 005c 992E      		mov r9,r25
 377 005e 20E0      		ldi r18,lo8(.LC6)
 378 0060 C22E      		mov r12,r18
 379 0062 20E0      		ldi r18,hi8(.LC6)
 380 0064 D22E      		mov r13,r18
 108:main.c        ****     printf( " : light type detected as %s\r\n", light_type);
 382               	.LM7:
 383 0066 30E0      		ldi r19,lo8(.LC7)
 384 0068 E32E      		mov r14,r19
 385 006a 30E0      		ldi r19,hi8(.LC7)
 386 006c F32E      		mov r15,r19
 387               	.L7:
  87:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
 389               	.LM8:
 390 006e 41E0      		ldi r20,lo8(1)
 391 0070 61E0      		ldi r22,lo8(1)
 392 0072 872D      		mov r24,r7
 393 0074 0E94 0000 		call nrk_set_status
  88:main.c        **** 		val=nrk_read(fd,&buf,2);
 395               	.LM9:
 396 0078 42E0      		ldi r20,lo8(2)
 397 007a BE01      		movw r22,r28
 398 007c 6F5F      		subi r22,-1
 399 007e 7F4F      		sbci r23,-1
 400 0080 872D      		mov r24,r7
 401 0082 0E94 0000 		call nrk_read
  92:main.c        **** 		if(buf > 1000){
 403               	.LM10:
 404 0086 2981      		ldd r18,Y+1
 405 0088 3A81      		ldd r19,Y+2
 406 008a 293E      		cpi r18,-23
 407 008c 83E0      		ldi r24,3
 408 008e 3807      		cpc r19,r24
 409 0090 00F4      		brsh .L5
  97:main.c        **** 			if(buf < 600){
 411               	.LM11:
 412 0092 2835      		cpi r18,88
 413 0094 92E0      		ldi r25,2
 414 0096 3907      		cpc r19,r25
 415 0098 00F4      		brsh .L6
  98:main.c        **** 				light_type= "daylight \r\n";
 417               	.LM12:
 418 009a 00E0      		ldi r16,lo8(.LC1)
 419 009c 10E0      		ldi r17,hi8(.LC1)
 420 009e 00C0      		rjmp .L3
 421               	.L5:
  93:main.c        **** 			light_type= "dark \r\n";
 423               	.LM13:
 424 00a0 00E0      		ldi r16,lo8(.LC0)
 425 00a2 10E0      		ldi r17,hi8(.LC0)
 426 00a4 00C0      		rjmp .L3
 427               	.L6:
 102:main.c        **** 				light_type= "room-light \r\n";
 429               	.LM14:
 430 00a6 00E0      		ldi r16,lo8(.LC2)
 431 00a8 10E0      		ldi r17,hi8(.LC2)
 432               	.L3:
 107:main.c        **** 		printf( " ambient light value= %d%s",-1*buf + 1024, "lumens");
 434               	.LM15:
 435 00aa BF92      		push r11
 436 00ac AF92      		push r10
 437 00ae C401      		movw r24,r8
 438 00b0 821B      		sub r24,r18
 439 00b2 930B      		sbc r25,r19
 440 00b4 9C01      		movw r18,r24
 441 00b6 3F93      		push r19
 442 00b8 8F93      		push r24
 443 00ba DF92      		push r13
 444 00bc CF92      		push r12
 445 00be 0E94 0000 		call printf
 447               	.LM16:
 448 00c2 1F93      		push r17
 449 00c4 0F93      		push r16
 450 00c6 FF92      		push r15
 451 00c8 EF92      		push r14
 452 00ca 0E94 0000 		call printf
 109:main.c        **** 		nrk_wait_until_next_period();
 454               	.LM17:
 455 00ce 0E94 0000 		call nrk_wait_until_next_period
 456               	.LBE2:
 110:main.c        **** 		cnt++;
 111:main.c        **** 	}
 458               	.LM18:
 459 00d2 0FB6      		in __tmp_reg__,__SREG__
 460 00d4 F894      		cli
 461 00d6 DEBF      		out __SP_H__,r29
 462 00d8 0FBE      		out __SREG__,__tmp_reg__
 463 00da CDBF      		out __SP_L__,r28
 464 00dc 00C0      		rjmp .L7
 473               	.Lscope1:
 475               		.stabd	78,0,0
 477               	.global	nrk_create_taskset
 479               	nrk_create_taskset:
 480               		.stabd	46,0,0
 112:main.c        **** }
 113:main.c        **** 
 114:main.c        **** 
 115:main.c        **** void
 116:main.c        **** nrk_create_taskset()
 117:main.c        **** {
 482               	.LM19:
 483               	.LFBB2:
 484               	/* prologue: function */
 485               	/* frame size = 0 */
 486               	/* stack size = 0 */
 487               	.L__stack_usage = 0
 118:main.c        ****   TaskOne.task = Task1;
 489               	.LM20:
 490 00de 80E0      		ldi r24,lo8(gs(Task1))
 491 00e0 90E0      		ldi r25,hi8(gs(Task1))
 492 00e2 9093 0000 		sts TaskOne+5+1,r25
 493 00e6 8093 0000 		sts TaskOne+5,r24
 119:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 495               	.LM21:
 496 00ea 40E8      		ldi r20,lo8(-128)
 497 00ec 50E0      		ldi r21,0
 498 00ee 60E0      		ldi r22,lo8(Stack1)
 499 00f0 70E0      		ldi r23,hi8(Stack1)
 500 00f2 80E0      		ldi r24,lo8(TaskOne)
 501 00f4 90E0      		ldi r25,hi8(TaskOne)
 502 00f6 0E94 0000 		call nrk_task_set_stk
 120:main.c        ****   TaskOne.prio = 1;
 504               	.LM22:
 505 00fa 81E0      		ldi r24,lo8(1)
 506 00fc 8093 0000 		sts TaskOne+8,r24
 121:main.c        ****   TaskOne.FirstActivation = TRUE;
 508               	.LM23:
 509 0100 8093 0000 		sts TaskOne+7,r24
 122:main.c        ****   TaskOne.Type = BASIC_TASK;
 511               	.LM24:
 512 0104 8093 0000 		sts TaskOne+9,r24
 123:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 514               	.LM25:
 515 0108 8093 0000 		sts TaskOne+10,r24
 124:main.c        ****   TaskOne.period.secs = 0;
 517               	.LM26:
 518 010c 1092 0000 		sts TaskOne+11,__zero_reg__
 519 0110 1092 0000 		sts TaskOne+11+1,__zero_reg__
 520 0114 1092 0000 		sts TaskOne+11+2,__zero_reg__
 521 0118 1092 0000 		sts TaskOne+11+3,__zero_reg__
 125:main.c        ****   TaskOne.period.nano_secs = 2000*NANOS_PER_MS; //*NANOS_PER_MS;
 523               	.LM27:
 524 011c 80E0      		ldi r24,0
 525 011e 94E9      		ldi r25,lo8(-108)
 526 0120 A5E3      		ldi r26,lo8(53)
 527 0122 B7E7      		ldi r27,lo8(119)
 528 0124 8093 0000 		sts TaskOne+15,r24
 529 0128 9093 0000 		sts TaskOne+15+1,r25
 530 012c A093 0000 		sts TaskOne+15+2,r26
 531 0130 B093 0000 		sts TaskOne+15+3,r27
 126:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 533               	.LM28:
 534 0134 1092 0000 		sts TaskOne+19,__zero_reg__
 535 0138 1092 0000 		sts TaskOne+19+1,__zero_reg__
 536 013c 1092 0000 		sts TaskOne+19+2,__zero_reg__
 537 0140 1092 0000 		sts TaskOne+19+3,__zero_reg__
 127:main.c        ****   TaskOne.cpu_reserve.nano_secs =  200*NANOS_PER_MS;
 539               	.LM29:
 540 0144 80E0      		ldi r24,0
 541 0146 92EC      		ldi r25,lo8(-62)
 542 0148 ABEE      		ldi r26,lo8(-21)
 543 014a BBE0      		ldi r27,lo8(11)
 544 014c 8093 0000 		sts TaskOne+23,r24
 545 0150 9093 0000 		sts TaskOne+23+1,r25
 546 0154 A093 0000 		sts TaskOne+23+2,r26
 547 0158 B093 0000 		sts TaskOne+23+3,r27
 128:main.c        ****   TaskOne.offset.secs = 0;
 549               	.LM30:
 550 015c 1092 0000 		sts TaskOne+27,__zero_reg__
 551 0160 1092 0000 		sts TaskOne+27+1,__zero_reg__
 552 0164 1092 0000 		sts TaskOne+27+2,__zero_reg__
 553 0168 1092 0000 		sts TaskOne+27+3,__zero_reg__
 129:main.c        ****   TaskOne.offset.nano_secs= 0;
 555               	.LM31:
 556 016c 1092 0000 		sts TaskOne+31,__zero_reg__
 557 0170 1092 0000 		sts TaskOne+31+1,__zero_reg__
 558 0174 1092 0000 		sts TaskOne+31+2,__zero_reg__
 559 0178 1092 0000 		sts TaskOne+31+3,__zero_reg__
 130:main.c        ****   nrk_activate_task (&TaskOne);
 561               	.LM32:
 562 017c 80E0      		ldi r24,lo8(TaskOne)
 563 017e 90E0      		ldi r25,hi8(TaskOne)
 564 0180 0C94 0000 		jmp nrk_activate_task
 566               	.Lscope2:
 568               		.stabd	78,0,0
 570               	.global	nrk_register_drivers
 572               	nrk_register_drivers:
 573               		.stabd	46,0,0
 131:main.c        **** 
 132:main.c        **** }
 133:main.c        **** 
 134:main.c        **** void nrk_register_drivers()
 135:main.c        **** {
 575               	.LM33:
 576               	.LFBB3:
 577               	/* prologue: function */
 578               	/* frame size = 0 */
 579               	/* stack size = 0 */
 580               	.L__stack_usage = 0
 136:main.c        **** int8_t val;
 137:main.c        **** 
 138:main.c        **** // Register the Basic FireFly Sensor device driver
 139:main.c        **** // Make sure to add: 
 140:main.c        **** //     #define NRK_MAX_DRIVER_CNT  
 141:main.c        **** //     in nrk_cfg.h
 142:main.c        **** // Make sure to add: 
 143:main.c        **** //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 144:main.c        **** //     in makefile
 145:main.c        **** val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
 582               	.LM34:
 583 0184 63E0      		ldi r22,lo8(3)
 584 0186 80E0      		ldi r24,lo8(gs(dev_manager_ff3_sensors))
 585 0188 90E0      		ldi r25,hi8(gs(dev_manager_ff3_sensors))
 586 018a 0E94 0000 		call nrk_register_driver
 146:main.c        **** if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 588               	.LM35:
 589 018e 8F3F      		cpi r24,lo8(-1)
 590 0190 01F4      		brne .L9
 592               	.LM36:
 593 0192 80E0      		ldi r24,lo8(__c.3162)
 594 0194 90E0      		ldi r25,hi8(__c.3162)
 595 0196 0C94 0000 		jmp nrk_kprintf
 596               	.L9:
 597 019a 0895      		ret
 599               	.Lscope3:
 601               		.stabd	78,0,0
 602               		.section	.rodata.str1.1
 603               	.LC8:
 604 008c 7374 6172 		.string	"starting...\r"
 604      7469 6E67 
 604      2E2E 2E0D 
 604      00
 605               		.section	.text.startup,"ax",@progbits
 607               	.global	main
 609               	main:
 610               		.stabd	46,0,0
  50:main.c        **** {
 612               	.LM37:
 613               	.LFBB4:
 614               	/* prologue: function */
 615               	/* frame size = 0 */
 616               	/* stack size = 0 */
 617               	.L__stack_usage = 0
  52:main.c        ****   nrk_setup_ports();
 619               	.LM38:
 620 0000 0E94 0000 		call nrk_setup_ports
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 622               	.LM39:
 623 0004 80E1      		ldi r24,lo8(16)
 624 0006 90E0      		ldi r25,0
 625 0008 0E94 0000 		call nrk_setup_uart
  56:main.c        ****   printf( PSTR("starting...\r\n") );
 627               	.LM40:
 628 000c 80E0      		ldi r24,lo8(.LC8)
 629 000e 90E0      		ldi r25,hi8(.LC8)
 630 0010 0E94 0000 		call puts
  58:main.c        ****   nrk_init();
 632               	.LM41:
 633 0014 0E94 0000 		call nrk_init
  59:main.c        ****   nrk_time_set(0,0);
 635               	.LM42:
 636 0018 20E0      		ldi r18,0
 637 001a 30E0      		ldi r19,0
 638 001c A901      		movw r20,r18
 639 001e 60E0      		ldi r22,0
 640 0020 70E0      		ldi r23,0
 641 0022 CB01      		movw r24,r22
 642 0024 0E94 0000 		call nrk_time_set
  61:main.c        ****   nrk_register_drivers();
 644               	.LM43:
 645 0028 0E94 0000 		call nrk_register_drivers
  62:main.c        ****   nrk_create_taskset ();
 647               	.LM44:
 648 002c 0E94 0000 		call nrk_create_taskset
  63:main.c        ****   nrk_start();
 650               	.LM45:
 651 0030 0E94 0000 		call nrk_start
  66:main.c        **** }
 653               	.LM46:
 654 0034 80E0      		ldi r24,0
 655 0036 90E0      		ldi r25,0
 656 0038 0895      		ret
 658               	.Lscope4:
 660               		.stabd	78,0,0
 661               		.comm	TaskOne,35,1
 662               		.comm	Stack1,128,1
 663               		.comm	app_timer0_prescale,1,1
 664               		.comm	app_timer0_callback,2,1
 665               		.comm	_nrk_time_trigger,1,1
 666               		.comm	_nrk_prev_timer_val,1,1
 667               		.comm	error_num,1,1
 668               		.comm	error_task,1,1
 669               		.comm	nrk_kernel_stk_ptr,2,1
 670               		.comm	nrk_idle_task_stk,128,1
 671               		.comm	_nrk_signal_list,4,1
 672               		.section	.progmem.data,"a",@progbits
 675               	__c.3153:
 676 0000 4661 696C 		.string	"Failed to open sensor driver\r\n"
 676      6564 2074 
 676      6F20 6F70 
 676      656E 2073 
 676      656E 736F 
 679               	__c.3162:
 680 001f 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 680      6564 2074 
 680      6F20 6C6F 
 680      6164 206D 
 680      7920 4144 
 692               		.text
 694               	.Letext0:
 695               		.ident	"GCC: (GNU) 4.7.2"
 696               	.global __do_copy_data
 697               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:4      *ABS*:000000000000003f __SREG__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:312    .text:0000000000000000 Task1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:675    .progmem.data:0000000000000000 __c.3153
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:479    .text:00000000000000de nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:572    .text:0000000000000184 nrk_register_drivers
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:679    .progmem.data:000000000000001f __c.3162
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccSmyKWO.s:609    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
printf
nrk_get_pid
nrk_open
nrk_kprintf
nrk_set_status
nrk_read
nrk_wait_until_next_period
nrk_task_set_stk
nrk_activate_task
dev_manager_ff3_sensors
nrk_register_driver
nrk_setup_ports
nrk_setup_uart
puts
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
