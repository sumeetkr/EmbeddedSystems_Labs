   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 291               		.section	.rodata.str1.1,"aMS",@progbits,1
 292               	.LC0:
 293 0000 4D79 206E 		.string	"My node's address is %d\r\n"
 293      6F64 6527 
 293      7320 6164 
 293      6472 6573 
 293      7320 6973 
 294               	.LC1:
 295 001a 5461 736B 		.string	"Task1 PID=%d\r\n"
 295      3120 5049 
 295      443D 2564 
 295      0D0A 00
 296               	.LC2:
 297 0029 2500      		.string	"%"
 298               	.LC3:
 299 002b 5065 7263 		.string	"Percent humidity = %lu %s"
 299      656E 7420 
 299      6875 6D69 
 299      6469 7479 
 299      203D 2025 
 300               	.LC4:
 301 0045 6465 6772 		.string	"degrees"
 301      6565 7300 
 302               	.global	__udivdi3
 303               	.LC5:
 304 004d 2054 656D 		.string	" Temperature = %lu%s "
 304      7065 7261 
 304      7475 7265 
 304      203D 2025 
 304      6C75 2573 
 305               	.global	__floatundisf
 306               	.global	__mulsf3
 307               	.LC6:
 308 0063 2042 6172 		.string	" Barometric Pressure (in. Hg)= %lu "
 308      6F6D 6574 
 308      7269 6320 
 308      5072 6573 
 308      7375 7265 
 309               	.LC7:
 310 0087 2049 6E63 		.string	" Incident Illumination (lumens) =%d"
 310      6964 656E 
 310      7420 496C 
 310      6C75 6D69 
 310      6E61 7469 
 311               	.LC8:
 312 00ab 204D 6F74 		.string	" Motion based on ligth change :\r"
 312      696F 6E20 
 312      6261 7365 
 312      6420 6F6E 
 312      206C 6967 
 313               	.LC9:
 314 00cc 4D6F 7469 		.string	"Motion Detected "
 314      6F6E 2044 
 314      6574 6563 
 314      7465 6420 
 314      00
 315               	.LC10:
 316 00dd 2573 00   		.string	"%s"
 317               	.LC11:
 318 00e0 4D6F 7469 		.string	"Motion Not Detected "
 318      6F6E 204E 
 318      6F74 2044 
 318      6574 6563 
 318      7465 6420 
 319               	.LC12:
 320 00f5 2041 6363 		.string	" Acceleration - X (ft / sec^2) =%d"
 320      656C 6572 
 320      6174 696F 
 320      6E20 2D20 
 320      5820 2866 
 321               	.LC13:
 322 0118 2041 6363 		.string	" Acceleration - Y (ft / sec^2) =%d"
 322      656C 6572 
 322      6174 696F 
 322      6E20 2D20 
 322      5920 2866 
 323               	.LC14:
 324 013b 2041 6363 		.string	" Acceleration - Z (ft / sec^2) =%d\r\n"
 324      656C 6572 
 324      6174 696F 
 324      6E20 2D20 
 324      5A20 2866 
 325               		.text
 327               	.global	Task1
 329               	Task1:
 330               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *  Contributing Authors (specific to this file):
  23:main.c        **** *  Zane Starr
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <nrk.h>
  28:main.c        **** #include <include.h>
  29:main.c        **** #include <ulib.h>
  30:main.c        **** #include <stdio.h>
  31:main.c        **** #include <avr/sleep.h>
  32:main.c        **** #include <hal.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** #include <nrk_driver_list.h>
  36:main.c        **** #include <nrk_driver.h>
  37:main.c        **** #include <ff_basic_sensor.h>
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  40:main.c        **** nrk_task_type TaskOne;
  41:main.c        **** void Task1(void);
  42:main.c        **** 
  43:main.c        **** 
  44:main.c        **** void nrk_create_taskset();
  45:main.c        **** void nrk_register_drivers();
  46:main.c        **** uint8_t kill_stack(uint8_t val);
  47:main.c        **** 
  48:main.c        **** int
  49:main.c        **** main ()
  50:main.c        **** {
  51:main.c        ****   uint8_t t;
  52:main.c        ****   nrk_setup_ports();
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        ****   printf( PSTR("starting...\r\n") );
  57:main.c        **** 
  58:main.c        ****   nrk_init();
  59:main.c        ****   nrk_time_set(0,0);
  60:main.c        **** 
  61:main.c        ****   nrk_register_drivers();
  62:main.c        ****   nrk_create_taskset ();
  63:main.c        ****   nrk_start();
  64:main.c        ****   
  65:main.c        ****   return 0;
  66:main.c        **** }
  67:main.c        **** 
  68:main.c        **** 
  69:main.c        **** void Task1()
  70:main.c        **** {
 332               	.LM0:
 333               	.LFBB1:
 334 0000 CF93      		push r28
 335 0002 DF93      		push r29
 336 0004 CDB7      		in r28,__SP_L__
 337 0006 DEB7      		in r29,__SP_H__
 338 0008 2E97      		sbiw r28,14
 339 000a 0FB6      		in __tmp_reg__,__SREG__
 340 000c F894      		cli
 341 000e DEBF      		out __SP_H__,r29
 342 0010 0FBE      		out __SREG__,__tmp_reg__
 343 0012 CDBF      		out __SP_L__,r28
 344               	/* prologue: function */
 345               	/* frame size = 14 */
 346               	/* stack size = 16 */
 347               	.L__stack_usage = 16
  71:main.c        **** uint16_t cnt;
  72:main.c        **** int8_t i,fd,val;
  73:main.c        **** uint16_t buf;
  74:main.c        **** uint16_t buf_last = 0;
  75:main.c        **** // uint16_t motions[] = {0,0,0,0,0,0,0,0,0,0};
  76:main.c        **** uint16_t motions[] = {0,0};
 349               	.LM1:
 350 0014 1A86      		std Y+10,__zero_reg__
 351 0016 1986      		std Y+9,__zero_reg__
 352 0018 1C86      		std Y+12,__zero_reg__
 353 001a 1B86      		std Y+11,__zero_reg__
  77:main.c        **** uint16_t index = 0;
  78:main.c        **** uint64_t bbuf;
  79:main.c        **** 
  80:main.c        ****   printf( "My node's address is %d\r\n",NODE_ADDR );
 355               	.LM2:
 356 001c 1F92      		push __zero_reg__
 357 001e 1F92      		push __zero_reg__
 358 0020 80E0      		ldi r24,lo8(.LC0)
 359 0022 90E0      		ldi r25,hi8(.LC0)
 360 0024 9F93      		push r25
 361 0026 8F93      		push r24
 362 0028 0E94 0000 		call printf
  81:main.c        **** 
  82:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
 364               	.LM3:
 365 002c 0E94 0000 		call nrk_get_pid
 366 0030 1F92      		push __zero_reg__
 367 0032 8F93      		push r24
 368 0034 80E0      		ldi r24,lo8(.LC1)
 369 0036 90E0      		ldi r25,hi8(.LC1)
 370 0038 9F93      		push r25
 371 003a 8F93      		push r24
 372 003c 0E94 0000 		call printf
  83:main.c        **** 
  84:main.c        ****   
  85:main.c        ****   	// Open ADC device as read 
  86:main.c        ****   	fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
 374               	.LM4:
 375 0040 65E0      		ldi r22,lo8(5)
 376 0042 83E0      		ldi r24,lo8(3)
 377 0044 0E94 0000 		call nrk_open
 378 0048 382E      		mov r3,r24
  87:main.c        ****   	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 380               	.LM5:
 381 004a 0FB6      		in __tmp_reg__,__SREG__
 382 004c F894      		cli
 383 004e DEBF      		out __SP_H__,r29
 384 0050 0FBE      		out __SREG__,__tmp_reg__
 385 0052 CDBF      		out __SP_L__,r28
 386 0054 3FEF      		ldi r19,lo8(-1)
 387 0056 8313      		cpse r24,r19
 388 0058 00C0      		rjmp .L2
 390               	.LM6:
 391 005a 80E0      		ldi r24,lo8(__c.3156)
 392 005c 90E0      		ldi r25,hi8(__c.3156)
 393 005e 0E94 0000 		call nrk_kprintf
 394               	.L2:
  70:main.c        **** {
 396               	.LM7:
 397 0062 612C      		mov r6,__zero_reg__
 398 0064 712C      		mov r7,__zero_reg__
 399               	.LBB2:
 400               	.LBB3:
  88:main.c        ****   cnt=0;
  89:main.c        ****   while(1) {
  90:main.c        **** 
  91:main.c        **** 	// Example of setting a sensor 
  92:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,HUMIDITY);
  93:main.c        **** 	val=nrk_read(fd,&bbuf,4); //percent humidity
  94:main.c        **** 	// Relative Humidity (%)  linear          |  1 |    0 |         0 |       100 |
  95:main.c        **** 	printf( "Percent humidity = %lu %s",bbuf, "%");
  96:main.c        **** 
  97:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,TEMP2);
  98:main.c        ****     // 	val=nrk_read(fd,&bbuf,4); //degrees F
  99:main.c        ****     // 	 temp         | Temperature (analog sensor, F)  | linear          |           0.07506 |   3
 100:main.c        ****     // | digital_temp | Temperature (digital sensor, F) | linear          |              0.18 |   3
 101:main.c        **** 	printf( " Temperature = %lu%s ",bbuf/10, "degrees");
 102:main.c        **** 	
 103:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,PRESS);
 104:main.c        **** 	val=nrk_read(fd,&bbuf,4);
 105:main.c        **** 	// pressure     | Barometric Pressure (in. Hg)    | linear          | 0.000295780903035 |    0 |  
 106:main.c        **** 	printf( " Barometric Pressure (in. Hg)= %lu ",0.000295780903035*bbuf);
 107:main.c        **** 	
 108:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
 109:main.c        **** 	val=nrk_read(fd,&buf,2);
 110:main.c        **** 	// light        | Incident Illumination (lumens)  | linear          |                -1 | 1024 |  
 111:main.c        **** 	printf( " Incident Illumination (lumens) =%d",-1*buf+1024);
 112:main.c        **** 	
 113:main.c        **** 	uint16_t sum = 0;
 114:main.c        ****     int size = sizeof(motions)/sizeof(motions[0]);
 115:main.c        **** 	for ( i = 0; i < size; i++ )
 116:main.c        ****      {
 117:main.c        ****       sum = sum + motions[i];
 118:main.c        ****      }
 119:main.c        **** 
 120:main.c        **** 	uint16_t avg = sum/size;
 121:main.c        **** 
 122:main.c        ****     nrk_led_clr(RED_LED);
 123:main.c        ****     nrk_led_clr(GREEN_LED);
 124:main.c        **** 
 125:main.c        ****     printf( " Motion based on ligth change :\r\n");
 126:main.c        **** 	if( abs(buf - avg) >10)
 127:main.c        **** 	//if( abs(buf - buf_last) >2)
 128:main.c        **** 		{ printf("%s","Motion Detected " );
 129:main.c        **** 	      nrk_led_toggle(RED_LED);
 130:main.c        **** 	  	}
 131:main.c        **** 	else 
 132:main.c        **** 	{
 133:main.c        **** 		printf("%s","Motion Not Detected " );
 402               	.LM8:
 403 0066 30E0      		ldi r19,lo8(.LC10)
 404 0068 832E      		mov r8,r19
 405 006a 30E0      		ldi r19,hi8(.LC10)
 406 006c 932E      		mov r9,r19
 128:main.c        **** 		{ printf("%s","Motion Detected " );
 408               	.LM9:
 409 006e 40E0      		ldi r20,lo8(.LC9)
 410 0070 442E      		mov r4,r20
 411 0072 40E0      		ldi r20,hi8(.LC9)
 412 0074 542E      		mov r5,r20
 413               	.L6:
 414               	.LBE3:
  92:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,HUMIDITY);
 416               	.LM10:
 417 0076 4BE0      		ldi r20,lo8(11)
 418 0078 61E0      		ldi r22,lo8(1)
 419 007a 832D      		mov r24,r3
 420 007c 0E94 0000 		call nrk_set_status
  93:main.c        **** 	val=nrk_read(fd,&bbuf,4); //percent humidity
 422               	.LM11:
 423 0080 44E0      		ldi r20,lo8(4)
 424 0082 BE01      		movw r22,r28
 425 0084 6F5F      		subi r22,-1
 426 0086 7F4F      		sbci r23,-1
 427 0088 832D      		mov r24,r3
 428 008a 0E94 0000 		call nrk_read
  95:main.c        **** 	printf( "Percent humidity = %lu %s",bbuf, "%");
 430               	.LM12:
 431 008e 80E0      		ldi r24,lo8(.LC2)
 432 0090 90E0      		ldi r25,hi8(.LC2)
 433 0092 9F93      		push r25
 434 0094 8F93      		push r24
 435 0096 8885      		ldd r24,Y+8
 436 0098 8F93      		push r24
 437 009a 8F81      		ldd r24,Y+7
 438 009c 8F93      		push r24
 439 009e 8E81      		ldd r24,Y+6
 440 00a0 8F93      		push r24
 441 00a2 8D81      		ldd r24,Y+5
 442 00a4 8F93      		push r24
 443 00a6 8C81      		ldd r24,Y+4
 444 00a8 8F93      		push r24
 445 00aa 8B81      		ldd r24,Y+3
 446 00ac 8F93      		push r24
 447 00ae 8A81      		ldd r24,Y+2
 448 00b0 8F93      		push r24
 449 00b2 8981      		ldd r24,Y+1
 450 00b4 8F93      		push r24
 451 00b6 80E0      		ldi r24,lo8(.LC3)
 452 00b8 90E0      		ldi r25,hi8(.LC3)
 453 00ba 9F93      		push r25
 454 00bc 8F93      		push r24
 455 00be 0E94 0000 		call printf
  97:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,TEMP2);
 457               	.LM13:
 458 00c2 4AE0      		ldi r20,lo8(10)
 459 00c4 61E0      		ldi r22,lo8(1)
 460 00c6 832D      		mov r24,r3
 461 00c8 0E94 0000 		call nrk_set_status
 101:main.c        **** 	printf( " Temperature = %lu%s ",bbuf/10, "degrees");
 463               	.LM14:
 464 00cc 80E0      		ldi r24,lo8(.LC4)
 465 00ce 90E0      		ldi r25,hi8(.LC4)
 466 00d0 9F93      		push r25
 467 00d2 8F93      		push r24
 468 00d4 2981      		ldd r18,Y+1
 469 00d6 3A81      		ldd r19,Y+2
 470 00d8 4B81      		ldd r20,Y+3
 471 00da 5C81      		ldd r21,Y+4
 472 00dc 6D81      		ldd r22,Y+5
 473 00de 7E81      		ldd r23,Y+6
 474 00e0 9AE0      		ldi r25,lo8(10)
 475 00e2 A92E      		mov r10,r25
 476 00e4 B12C      		mov r11,__zero_reg__
 477 00e6 C12C      		mov r12,__zero_reg__
 478 00e8 D12C      		mov r13,__zero_reg__
 479 00ea E12C      		mov r14,__zero_reg__
 480 00ec F12C      		mov r15,__zero_reg__
 481 00ee 00E0      		ldi r16,0
 482 00f0 10E0      		ldi r17,0
 483 00f2 8F81      		ldd r24,Y+7
 484 00f4 9885      		ldd r25,Y+8
 485 00f6 0E94 0000 		call __udivdi3
 486 00fa 9F93      		push r25
 487 00fc 8F93      		push r24
 488 00fe 7F93      		push r23
 489 0100 6F93      		push r22
 490 0102 5F93      		push r21
 491 0104 4F93      		push r20
 492 0106 3F93      		push r19
 493 0108 2F93      		push r18
 494 010a 80E0      		ldi r24,lo8(.LC5)
 495 010c 90E0      		ldi r25,hi8(.LC5)
 496 010e 9F93      		push r25
 497 0110 8F93      		push r24
 498 0112 0E94 0000 		call printf
 103:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,PRESS);
 500               	.LM15:
 501 0116 49E0      		ldi r20,lo8(9)
 502 0118 61E0      		ldi r22,lo8(1)
 503 011a 832D      		mov r24,r3
 504 011c 0E94 0000 		call nrk_set_status
 104:main.c        **** 	val=nrk_read(fd,&bbuf,4);
 506               	.LM16:
 507 0120 44E0      		ldi r20,lo8(4)
 508 0122 BE01      		movw r22,r28
 509 0124 6F5F      		subi r22,-1
 510 0126 7F4F      		sbci r23,-1
 511 0128 832D      		mov r24,r3
 512 012a 0E94 0000 		call nrk_read
 106:main.c        **** 	printf( " Barometric Pressure (in. Hg)= %lu ",0.000295780903035*bbuf);
 514               	.LM17:
 515 012e 2981      		ldd r18,Y+1
 516 0130 3A81      		ldd r19,Y+2
 517 0132 4B81      		ldd r20,Y+3
 518 0134 5C81      		ldd r21,Y+4
 519 0136 6D81      		ldd r22,Y+5
 520 0138 7E81      		ldd r23,Y+6
 521 013a 8F81      		ldd r24,Y+7
 522 013c 9885      		ldd r25,Y+8
 523 013e 0E94 0000 		call __floatundisf
 524 0142 2AE0      		ldi r18,lo8(10)
 525 0144 33E1      		ldi r19,lo8(19)
 526 0146 4BE9      		ldi r20,lo8(-101)
 527 0148 59E3      		ldi r21,lo8(57)
 528 014a 0E94 0000 		call __mulsf3
 529 014e 9F93      		push r25
 530 0150 8F93      		push r24
 531 0152 7F93      		push r23
 532 0154 6F93      		push r22
 533 0156 80E0      		ldi r24,lo8(.LC6)
 534 0158 90E0      		ldi r25,hi8(.LC6)
 535 015a 9F93      		push r25
 536 015c 8F93      		push r24
 537 015e 0E94 0000 		call printf
 108:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
 539               	.LM18:
 540 0162 41E0      		ldi r20,lo8(1)
 541 0164 61E0      		ldi r22,lo8(1)
 542 0166 832D      		mov r24,r3
 543 0168 0E94 0000 		call nrk_set_status
 109:main.c        **** 	val=nrk_read(fd,&buf,2);
 545               	.LM19:
 546 016c 42E0      		ldi r20,lo8(2)
 547 016e BE01      		movw r22,r28
 548 0170 635F      		subi r22,-13
 549 0172 7F4F      		sbci r23,-1
 550 0174 832D      		mov r24,r3
 551 0176 0E94 0000 		call nrk_read
 111:main.c        **** 	printf( " Incident Illumination (lumens) =%d",-1*buf+1024);
 553               	.LM20:
 554 017a 8D85      		ldd r24,Y+13
 555 017c 9E85      		ldd r25,Y+14
 556 017e 20E0      		ldi r18,0
 557 0180 34E0      		ldi r19,lo8(4)
 558 0182 281B      		sub r18,r24
 559 0184 390B      		sbc r19,r25
 560 0186 C901      		movw r24,r18
 561 0188 9F93      		push r25
 562 018a 2F93      		push r18
 563 018c 80E0      		ldi r24,lo8(.LC7)
 564 018e 90E0      		ldi r25,hi8(.LC7)
 565 0190 9F93      		push r25
 566 0192 8F93      		push r24
 567 0194 0E94 0000 		call printf
 117:main.c        ****       sum = sum + motions[i];
 569               	.LM21:
 570 0198 0B85      		ldd r16,Y+11
 571 019a 1C85      		ldd r17,Y+12
 572 019c 8985      		ldd r24,Y+9
 573 019e 9A85      		ldd r25,Y+10
 574 01a0 080F      		add r16,r24
 575 01a2 191F      		adc r17,r25
 120:main.c        **** 	uint16_t avg = sum/size;
 577               	.LM22:
 578 01a4 1695      		lsr r17
 579 01a6 0795      		ror r16
 122:main.c        ****     nrk_led_clr(RED_LED);
 581               	.LM23:
 582 01a8 0FB6      		in __tmp_reg__,__SREG__
 583 01aa F894      		cli
 584 01ac DEBF      		out __SP_H__,r29
 585 01ae 0FBE      		out __SREG__,__tmp_reg__
 586 01b0 CDBF      		out __SP_L__,r28
 587 01b2 80E0      		ldi r24,0
 588 01b4 90E0      		ldi r25,0
 589 01b6 0E94 0000 		call nrk_led_clr
 123:main.c        ****     nrk_led_clr(GREEN_LED);
 591               	.LM24:
 592 01ba 81E0      		ldi r24,lo8(1)
 593 01bc 90E0      		ldi r25,0
 594 01be 0E94 0000 		call nrk_led_clr
 125:main.c        ****     printf( " Motion based on ligth change :\r\n");
 596               	.LM25:
 597 01c2 80E0      		ldi r24,lo8(.LC8)
 598 01c4 90E0      		ldi r25,hi8(.LC8)
 599 01c6 0E94 0000 		call puts
 600               	.LBB4:
 126:main.c        **** 	if( abs(buf - avg) >10)
 602               	.LM26:
 603 01ca 8D85      		ldd r24,Y+13
 604 01cc 9E85      		ldd r25,Y+14
 605 01ce 801B      		sub r24,r16
 606 01d0 910B      		sbc r25,r17
 607 01d2 97FF      		sbrs r25,7
 608 01d4 00C0      		rjmp .L4
 609 01d6 9195      		neg r25
 610 01d8 8195      		neg r24
 611 01da 9109      		sbc r25,__zero_reg__
 612               	.L4:
 613 01dc 0B97      		sbiw r24,11
 614 01de 04F0      		brlt .L3
 128:main.c        **** 		{ printf("%s","Motion Detected " );
 616               	.LM27:
 617 01e0 5F92      		push r5
 618 01e2 4F92      		push r4
 619 01e4 9F92      		push r9
 620 01e6 8F92      		push r8
 621 01e8 0E94 0000 		call printf
 129:main.c        **** 	      nrk_led_toggle(RED_LED);
 623               	.LM28:
 624 01ec 80E0      		ldi r24,0
 625 01ee 90E0      		ldi r25,0
 626 01f0 00C0      		rjmp .L7
 627               	.L3:
 629               	.LM29:
 630 01f2 20E0      		ldi r18,lo8(.LC11)
 631 01f4 30E0      		ldi r19,hi8(.LC11)
 632 01f6 3F93      		push r19
 633 01f8 2F93      		push r18
 634 01fa 9F92      		push r9
 635 01fc 8F92      		push r8
 636 01fe 0E94 0000 		call printf
 134:main.c        **** 		nrk_led_toggle(GREEN_LED);
 638               	.LM30:
 639 0202 81E0      		ldi r24,lo8(1)
 640 0204 90E0      		ldi r25,0
 641               	.L7:
 642 0206 0E94 0000 		call nrk_led_toggle
 643 020a 0F90      		pop __tmp_reg__
 644 020c 0F90      		pop __tmp_reg__
 645 020e 0F90      		pop __tmp_reg__
 646 0210 0F90      		pop __tmp_reg__
 647               	.LBE4:
 135:main.c        **** 	}
 136:main.c        **** 
 137:main.c        **** 	// if(cnt<10)
 138:main.c        **** 	// {
 139:main.c        **** 		motions[index] = buf;
 649               	.LM31:
 650 0212 F301      		movw r30,r6
 651 0214 EE0F      		lsl r30
 652 0216 FF1F      		rol r31
 653 0218 21E0      		ldi r18,lo8(1)
 654 021a 30E0      		ldi r19,0
 655 021c 2C0F      		add r18,r28
 656 021e 3D1F      		adc r19,r29
 657 0220 E20F      		add r30,r18
 658 0222 F31F      		adc r31,r19
 659 0224 8D85      		ldd r24,Y+13
 660 0226 9E85      		ldd r25,Y+14
 661 0228 9187      		std Z+9,r25
 662 022a 8087      		std Z+8,r24
 140:main.c        **** 	// }
 141:main.c        **** 	buf_last = buf; 
 142:main.c        **** 
 143:main.c        **** 	// printf( " Avg light=%d",avg);
 144:main.c        **** 
 145:main.c        **** 	// val=nrk_set_status(fd,SENSOR_SELECT,TEMP);
 146:main.c        **** 	// val=nrk_read(fd,&buf,2); //degrees F
 147:main.c        **** 	// printf( " Temp in degrees=%03d",buf/10);
 148:main.c        **** 
 149:main.c        **** // 	| acc_x        | Acceleration - X (ft / sec^2)   | linear          |                 1 |    0 |
 150:main.c        **** // | acc_y        | Acceleration - Y (ft / sec^2)   | linear          |                 1 |    0 | 
 151:main.c        **** // | acc_z        | Acceleration - Z (ft / sec^2)   | linear          |                 1 |    0 | 
 152:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
 664               	.LM32:
 665 022c 44E0      		ldi r20,lo8(4)
 666 022e 61E0      		ldi r22,lo8(1)
 667 0230 832D      		mov r24,r3
 668 0232 0E94 0000 		call nrk_set_status
 153:main.c        **** 	val=nrk_read(fd,&buf,2);
 670               	.LM33:
 671 0236 42E0      		ldi r20,lo8(2)
 672 0238 BE01      		movw r22,r28
 673 023a 635F      		subi r22,-13
 674 023c 7F4F      		sbci r23,-1
 675 023e 832D      		mov r24,r3
 676 0240 0E94 0000 		call nrk_read
 154:main.c        **** 	printf( " Acceleration - X (ft / sec^2) =%d",buf);
 678               	.LM34:
 679 0244 8E85      		ldd r24,Y+14
 680 0246 8F93      		push r24
 681 0248 8D85      		ldd r24,Y+13
 682 024a 8F93      		push r24
 683 024c 80E0      		ldi r24,lo8(.LC12)
 684 024e 90E0      		ldi r25,hi8(.LC12)
 685 0250 9F93      		push r25
 686 0252 8F93      		push r24
 687 0254 0E94 0000 		call printf
 155:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
 689               	.LM35:
 690 0258 45E0      		ldi r20,lo8(5)
 691 025a 61E0      		ldi r22,lo8(1)
 692 025c 832D      		mov r24,r3
 693 025e 0E94 0000 		call nrk_set_status
 156:main.c        **** 	val=nrk_read(fd,&buf,2);
 695               	.LM36:
 696 0262 42E0      		ldi r20,lo8(2)
 697 0264 BE01      		movw r22,r28
 698 0266 635F      		subi r22,-13
 699 0268 7F4F      		sbci r23,-1
 700 026a 832D      		mov r24,r3
 701 026c 0E94 0000 		call nrk_read
 157:main.c        **** 	printf( " Acceleration - Y (ft / sec^2) =%d",buf);
 703               	.LM37:
 704 0270 8E85      		ldd r24,Y+14
 705 0272 8F93      		push r24
 706 0274 8D85      		ldd r24,Y+13
 707 0276 8F93      		push r24
 708 0278 80E0      		ldi r24,lo8(.LC13)
 709 027a 90E0      		ldi r25,hi8(.LC13)
 710 027c 9F93      		push r25
 711 027e 8F93      		push r24
 712 0280 0E94 0000 		call printf
 158:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
 714               	.LM38:
 715 0284 46E0      		ldi r20,lo8(6)
 716 0286 61E0      		ldi r22,lo8(1)
 717 0288 832D      		mov r24,r3
 718 028a 0E94 0000 		call nrk_set_status
 159:main.c        **** 	
 160:main.c        **** 	val=nrk_read(fd,&buf,2); //motion detected/no motion detected
 720               	.LM39:
 721 028e 42E0      		ldi r20,lo8(2)
 722 0290 BE01      		movw r22,r28
 723 0292 635F      		subi r22,-13
 724 0294 7F4F      		sbci r23,-1
 725 0296 832D      		mov r24,r3
 726 0298 0E94 0000 		call nrk_read
 161:main.c        **** 	printf( " Acceleration - Z (ft / sec^2) =%d\r\n",buf);
 728               	.LM40:
 729 029c 8E85      		ldd r24,Y+14
 730 029e 8F93      		push r24
 731 02a0 8D85      		ldd r24,Y+13
 732 02a2 8F93      		push r24
 733 02a4 80E0      		ldi r24,lo8(.LC14)
 734 02a6 90E0      		ldi r25,hi8(.LC14)
 735 02a8 9F93      		push r25
 736 02aa 8F93      		push r24
 737 02ac 0E94 0000 		call printf
 162:main.c        **** 
 163:main.c        ****  //  	val=nrk_set_status(fd,SENSOR_SELECT,AUDIO_P2P);
 164:main.c        **** 	// nrk_spin_wait_us(60000);
 165:main.c        **** 	// val=nrk_read(fd,&buf,2);
 166:main.c        **** 	// printf( " Audio=%d\r\n",buf);
 167:main.c        **** 	//nrk_close(fd);
 168:main.c        **** 	nrk_wait_until_next_period();
 739               	.LM41:
 740 02b0 0E94 0000 		call nrk_wait_until_next_period
 169:main.c        **** 	cnt++;
 170:main.c        **** 
 171:main.c        **** 	index++;
 172:main.c        **** 	if(index == size)
 173:main.c        **** 		index =0;
 742               	.LM42:
 743 02b4 31E0      		ldi r19,1
 744 02b6 6326      		eor r6,r19
 745 02b8 0FB6      		in __tmp_reg__,__SREG__
 746 02ba F894      		cli
 747 02bc DEBF      		out __SP_H__,r29
 748 02be 0FBE      		out __SREG__,__tmp_reg__
 749 02c0 CDBF      		out __SP_L__,r28
 750 02c2 00C0      		rjmp .L6
 751               	.LBE2:
 763               	.Lscope1:
 765               		.stabd	78,0,0
 767               	.global	nrk_create_taskset
 769               	nrk_create_taskset:
 770               		.stabd	46,0,0
 174:main.c        **** 	}
 175:main.c        **** }
 176:main.c        **** 
 177:main.c        **** 
 178:main.c        **** void
 179:main.c        **** nrk_create_taskset()
 180:main.c        **** {
 772               	.LM43:
 773               	.LFBB2:
 774               	/* prologue: function */
 775               	/* frame size = 0 */
 776               	/* stack size = 0 */
 777               	.L__stack_usage = 0
 181:main.c        ****   TaskOne.task = Task1;
 779               	.LM44:
 780 02c4 80E0      		ldi r24,lo8(gs(Task1))
 781 02c6 90E0      		ldi r25,hi8(gs(Task1))
 782 02c8 9093 0000 		sts TaskOne+5+1,r25
 783 02cc 8093 0000 		sts TaskOne+5,r24
 182:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 785               	.LM45:
 786 02d0 40E8      		ldi r20,lo8(-128)
 787 02d2 50E0      		ldi r21,0
 788 02d4 60E0      		ldi r22,lo8(Stack1)
 789 02d6 70E0      		ldi r23,hi8(Stack1)
 790 02d8 80E0      		ldi r24,lo8(TaskOne)
 791 02da 90E0      		ldi r25,hi8(TaskOne)
 792 02dc 0E94 0000 		call nrk_task_set_stk
 183:main.c        ****   TaskOne.prio = 1;
 794               	.LM46:
 795 02e0 81E0      		ldi r24,lo8(1)
 796 02e2 8093 0000 		sts TaskOne+8,r24
 184:main.c        ****   TaskOne.FirstActivation = TRUE;
 798               	.LM47:
 799 02e6 8093 0000 		sts TaskOne+7,r24
 185:main.c        ****   TaskOne.Type = BASIC_TASK;
 801               	.LM48:
 802 02ea 8093 0000 		sts TaskOne+9,r24
 186:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 804               	.LM49:
 805 02ee 8093 0000 		sts TaskOne+10,r24
 187:main.c        ****   TaskOne.period.secs = 0;
 807               	.LM50:
 808 02f2 1092 0000 		sts TaskOne+11,__zero_reg__
 809 02f6 1092 0000 		sts TaskOne+11+1,__zero_reg__
 810 02fa 1092 0000 		sts TaskOne+11+2,__zero_reg__
 811 02fe 1092 0000 		sts TaskOne+11+3,__zero_reg__
 188:main.c        ****   TaskOne.period.nano_secs = 100*NANOS_PER_MS; //*NANOS_PER_MS;
 813               	.LM51:
 814 0302 80E0      		ldi r24,0
 815 0304 91EE      		ldi r25,lo8(-31)
 816 0306 A5EF      		ldi r26,lo8(-11)
 817 0308 B5E0      		ldi r27,lo8(5)
 818 030a 8093 0000 		sts TaskOne+15,r24
 819 030e 9093 0000 		sts TaskOne+15+1,r25
 820 0312 A093 0000 		sts TaskOne+15+2,r26
 821 0316 B093 0000 		sts TaskOne+15+3,r27
 189:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 823               	.LM52:
 824 031a 1092 0000 		sts TaskOne+19,__zero_reg__
 825 031e 1092 0000 		sts TaskOne+19+1,__zero_reg__
 826 0322 1092 0000 		sts TaskOne+19+2,__zero_reg__
 827 0326 1092 0000 		sts TaskOne+19+3,__zero_reg__
 190:main.c        ****   TaskOne.cpu_reserve.nano_secs =  200*NANOS_PER_MS;
 829               	.LM53:
 830 032a 80E0      		ldi r24,0
 831 032c 92EC      		ldi r25,lo8(-62)
 832 032e ABEE      		ldi r26,lo8(-21)
 833 0330 BBE0      		ldi r27,lo8(11)
 834 0332 8093 0000 		sts TaskOne+23,r24
 835 0336 9093 0000 		sts TaskOne+23+1,r25
 836 033a A093 0000 		sts TaskOne+23+2,r26
 837 033e B093 0000 		sts TaskOne+23+3,r27
 191:main.c        ****   TaskOne.offset.secs = 0;
 839               	.LM54:
 840 0342 1092 0000 		sts TaskOne+27,__zero_reg__
 841 0346 1092 0000 		sts TaskOne+27+1,__zero_reg__
 842 034a 1092 0000 		sts TaskOne+27+2,__zero_reg__
 843 034e 1092 0000 		sts TaskOne+27+3,__zero_reg__
 192:main.c        ****   TaskOne.offset.nano_secs= 0;
 845               	.LM55:
 846 0352 1092 0000 		sts TaskOne+31,__zero_reg__
 847 0356 1092 0000 		sts TaskOne+31+1,__zero_reg__
 848 035a 1092 0000 		sts TaskOne+31+2,__zero_reg__
 849 035e 1092 0000 		sts TaskOne+31+3,__zero_reg__
 193:main.c        ****   nrk_activate_task (&TaskOne);
 851               	.LM56:
 852 0362 80E0      		ldi r24,lo8(TaskOne)
 853 0364 90E0      		ldi r25,hi8(TaskOne)
 854 0366 0C94 0000 		jmp nrk_activate_task
 856               	.Lscope2:
 858               		.stabd	78,0,0
 860               	.global	nrk_register_drivers
 862               	nrk_register_drivers:
 863               		.stabd	46,0,0
 194:main.c        **** 
 195:main.c        **** }
 196:main.c        **** 
 197:main.c        **** void nrk_register_drivers()
 198:main.c        **** {
 865               	.LM57:
 866               	.LFBB3:
 867               	/* prologue: function */
 868               	/* frame size = 0 */
 869               	/* stack size = 0 */
 870               	.L__stack_usage = 0
 199:main.c        **** int8_t val;
 200:main.c        **** 
 201:main.c        **** // Register the Basic FireFly Sensor device driver
 202:main.c        **** // Make sure to add: 
 203:main.c        **** //     #define NRK_MAX_DRIVER_CNT  
 204:main.c        **** //     in nrk_cfg.h
 205:main.c        **** // Make sure to add: 
 206:main.c        **** //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 207:main.c        **** //     in makefile
 208:main.c        **** val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
 872               	.LM58:
 873 036a 63E0      		ldi r22,lo8(3)
 874 036c 80E0      		ldi r24,lo8(gs(dev_manager_ff3_sensors))
 875 036e 90E0      		ldi r25,hi8(gs(dev_manager_ff3_sensors))
 876 0370 0E94 0000 		call nrk_register_driver
 209:main.c        **** if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 878               	.LM59:
 879 0374 8F3F      		cpi r24,lo8(-1)
 880 0376 01F4      		brne .L9
 882               	.LM60:
 883 0378 80E0      		ldi r24,lo8(__c.3171)
 884 037a 90E0      		ldi r25,hi8(__c.3171)
 885 037c 0C94 0000 		jmp nrk_kprintf
 886               	.L9:
 887 0380 0895      		ret
 889               	.Lscope3:
 891               		.stabd	78,0,0
 892               		.section	.rodata.str1.1
 893               	.LC15:
 894 0160 7374 6172 		.string	"starting...\r"
 894      7469 6E67 
 894      2E2E 2E0D 
 894      00
 895               		.section	.text.startup,"ax",@progbits
 897               	.global	main
 899               	main:
 900               		.stabd	46,0,0
  50:main.c        **** {
 902               	.LM61:
 903               	.LFBB4:
 904               	/* prologue: function */
 905               	/* frame size = 0 */
 906               	/* stack size = 0 */
 907               	.L__stack_usage = 0
  52:main.c        ****   nrk_setup_ports();
 909               	.LM62:
 910 0000 0E94 0000 		call nrk_setup_ports
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 912               	.LM63:
 913 0004 80E1      		ldi r24,lo8(16)
 914 0006 90E0      		ldi r25,0
 915 0008 0E94 0000 		call nrk_setup_uart
  56:main.c        ****   printf( PSTR("starting...\r\n") );
 917               	.LM64:
 918 000c 80E0      		ldi r24,lo8(.LC15)
 919 000e 90E0      		ldi r25,hi8(.LC15)
 920 0010 0E94 0000 		call puts
  58:main.c        ****   nrk_init();
 922               	.LM65:
 923 0014 0E94 0000 		call nrk_init
  59:main.c        ****   nrk_time_set(0,0);
 925               	.LM66:
 926 0018 20E0      		ldi r18,0
 927 001a 30E0      		ldi r19,0
 928 001c A901      		movw r20,r18
 929 001e 60E0      		ldi r22,0
 930 0020 70E0      		ldi r23,0
 931 0022 CB01      		movw r24,r22
 932 0024 0E94 0000 		call nrk_time_set
  61:main.c        ****   nrk_register_drivers();
 934               	.LM67:
 935 0028 0E94 0000 		call nrk_register_drivers
  62:main.c        ****   nrk_create_taskset ();
 937               	.LM68:
 938 002c 0E94 0000 		call nrk_create_taskset
  63:main.c        ****   nrk_start();
 940               	.LM69:
 941 0030 0E94 0000 		call nrk_start
  66:main.c        **** }
 943               	.LM70:
 944 0034 80E0      		ldi r24,0
 945 0036 90E0      		ldi r25,0
 946 0038 0895      		ret
 948               	.Lscope4:
 950               		.stabd	78,0,0
 951               		.comm	TaskOne,35,1
 952               		.comm	Stack1,128,1
 953               		.comm	app_timer0_prescale,1,1
 954               		.comm	app_timer0_callback,2,1
 955               		.comm	_nrk_time_trigger,1,1
 956               		.comm	_nrk_prev_timer_val,1,1
 957               		.comm	error_num,1,1
 958               		.comm	error_task,1,1
 959               		.comm	nrk_kernel_stk_ptr,2,1
 960               		.comm	nrk_idle_task_stk,128,1
 961               		.comm	_nrk_signal_list,4,1
 962               		.section	.progmem.data,"a",@progbits
 965               	__c.3156:
 966 0000 4661 696C 		.string	"Failed to open sensor driver\r\n"
 966      6564 2074 
 966      6F20 6F70 
 966      656E 2073 
 966      656E 736F 
 969               	__c.3171:
 970 001f 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 970      6564 2074 
 970      6F20 6C6F 
 970      6164 206D 
 970      7920 4144 
 982               		.text
 984               	.Letext0:
 985               		.ident	"GCC: (GNU) 4.7.2"
 986               	.global __do_copy_data
 987               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:4      *ABS*:000000000000003f __SREG__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:329    .text:0000000000000000 Task1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:965    .progmem.data:0000000000000000 __c.3156
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:769    .text:00000000000002c4 nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:862    .text:000000000000036a nrk_register_drivers
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:969    .progmem.data:000000000000001f __c.3171
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccm0DHzv.s:899    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
__udivdi3
__floatundisf
__mulsf3
printf
nrk_get_pid
nrk_open
nrk_kprintf
nrk_set_status
nrk_read
nrk_led_clr
puts
nrk_led_toggle
nrk_wait_until_next_period
nrk_task_set_stk
nrk_activate_task
dev_manager_ff3_sensors
nrk_register_driver
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
