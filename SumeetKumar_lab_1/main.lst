   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 291               		.section	.rodata.str1.1,"aMS",@progbits,1
 292               	.LC0:
 293 0000 4D79 206E 		.string	"My node's address is %d\r\n"
 293      6F64 6527 
 293      7320 6164 
 293      6472 6573 
 293      7320 6973 
 294               	.LC1:
 295 001a 5461 736B 		.string	"Task1 PID=%d\r\n"
 295      3120 5049 
 295      443D 2564 
 295      0D0A 00
 296               	.LC2:
 297 0029 7065 7263 		.string	"percent humidity = %lu "
 297      656E 7420 
 297      6875 6D69 
 297      6469 7479 
 297      203D 2025 
 298               	.global	__udivdi3
 299               	.LC3:
 300 0041 7465 6D70 		.string	"temp2 in degrees= %lu "
 300      3220 696E 
 300      2064 6567 
 300      7265 6573 
 300      3D20 256C 
 301               	.LC4:
 302 0058 7072 6573 		.string	"pressure= %lu "
 302      7375 7265 
 302      3D20 256C 
 302      7520 00
 303               	.LC5:
 304 0067 206C 6967 		.string	" light=%d"
 304      6874 3D25 
 304      6400 
 305               	.LC6:
 306 0071 204D 6F74 		.string	" Motion Detected "
 306      696F 6E20 
 306      4465 7465 
 306      6374 6564 
 306      2000 
 307               	.LC7:
 308 0083 2573 00   		.string	"%s"
 309               	.LC8:
 310 0086 204D 6F74 		.string	" Motion Not Detected "
 310      696F 6E20 
 310      4E6F 7420 
 310      4465 7465 
 310      6374 6564 
 311               	.LC9:
 312 009c 6176 6720 		.string	"avg light=%d"
 312      6C69 6768 
 312      743D 2564 
 312      00
 313               	.LC10:
 314 00a9 2074 656D 		.string	" temp in degrees=%03d"
 314      7020 696E 
 314      2064 6567 
 314      7265 6573 
 314      3D25 3033 
 315               	.LC11:
 316 00bf 2061 6363 		.string	" acc_x=%d"
 316      5F78 3D25 
 316      6400 
 317               	.LC12:
 318 00c9 2061 6363 		.string	" acc_y=%d"
 318      5F79 3D25 
 318      6400 
 319               	.LC13:
 320 00d3 206D 6F74 		.string	" motion=%d"
 320      696F 6E3D 
 320      2564 00
 321               	.LC14:
 322 00de 2061 7564 		.string	" audio=%d\r\n"
 322      696F 3D25 
 322      640D 0A00 
 323               		.text
 325               	.global	Task1
 327               	Task1:
 328               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *  Contributing Authors (specific to this file):
  23:main.c        **** *  Zane Starr
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <nrk.h>
  28:main.c        **** #include <include.h>
  29:main.c        **** #include <ulib.h>
  30:main.c        **** #include <stdio.h>
  31:main.c        **** #include <avr/sleep.h>
  32:main.c        **** #include <hal.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** #include <nrk_driver_list.h>
  36:main.c        **** #include <nrk_driver.h>
  37:main.c        **** #include <ff_basic_sensor.h>
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  40:main.c        **** nrk_task_type TaskOne;
  41:main.c        **** void Task1(void);
  42:main.c        **** 
  43:main.c        **** 
  44:main.c        **** void nrk_create_taskset();
  45:main.c        **** void nrk_register_drivers();
  46:main.c        **** uint8_t kill_stack(uint8_t val);
  47:main.c        **** 
  48:main.c        **** int
  49:main.c        **** main ()
  50:main.c        **** {
  51:main.c        ****   uint8_t t;
  52:main.c        ****   nrk_setup_ports();
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        ****   printf( PSTR("starting...\r\n") );
  57:main.c        **** 
  58:main.c        ****   nrk_init();
  59:main.c        ****   nrk_time_set(0,0);
  60:main.c        **** 
  61:main.c        ****   nrk_register_drivers();
  62:main.c        ****   nrk_create_taskset ();
  63:main.c        ****   nrk_start();
  64:main.c        ****   
  65:main.c        ****   return 0;
  66:main.c        **** }
  67:main.c        **** 
  68:main.c        **** 
  69:main.c        **** void Task1()
  70:main.c        **** {
 330               	.LM0:
 331               	.LFBB1:
 332 0000 CF93      		push r28
 333 0002 DF93      		push r29
 334 0004 CDB7      		in r28,__SP_L__
 335 0006 DEB7      		in r29,__SP_H__
 336 0008 2E97      		sbiw r28,14
 337 000a 0FB6      		in __tmp_reg__,__SREG__
 338 000c F894      		cli
 339 000e DEBF      		out __SP_H__,r29
 340 0010 0FBE      		out __SREG__,__tmp_reg__
 341 0012 CDBF      		out __SP_L__,r28
 342               	/* prologue: function */
 343               	/* frame size = 14 */
 344               	/* stack size = 16 */
 345               	.L__stack_usage = 16
  71:main.c        **** uint16_t cnt;
  72:main.c        **** int8_t i,fd,val;
  73:main.c        **** uint16_t buf;
  74:main.c        **** uint16_t buf_last = 0;
  75:main.c        **** // uint16_t motions[] = {0,0,0,0,0,0,0,0,0,0};
  76:main.c        **** uint16_t motions[] = {0,0};
 347               	.LM1:
 348 0014 1A86      		std Y+10,__zero_reg__
 349 0016 1986      		std Y+9,__zero_reg__
 350 0018 1C86      		std Y+12,__zero_reg__
 351 001a 1B86      		std Y+11,__zero_reg__
  77:main.c        **** uint16_t index = 0;
  78:main.c        **** uint64_t bbuf;
  79:main.c        **** 
  80:main.c        ****   printf( "My node's address is %d\r\n",NODE_ADDR );
 353               	.LM2:
 354 001c 1F92      		push __zero_reg__
 355 001e 1F92      		push __zero_reg__
 356 0020 80E0      		ldi r24,lo8(.LC0)
 357 0022 90E0      		ldi r25,hi8(.LC0)
 358 0024 9F93      		push r25
 359 0026 8F93      		push r24
 360 0028 0E94 0000 		call printf
  81:main.c        **** 
  82:main.c        ****   printf( "Task1 PID=%d\r\n",nrk_get_pid());
 362               	.LM3:
 363 002c 0E94 0000 		call nrk_get_pid
 364 0030 1F92      		push __zero_reg__
 365 0032 8F93      		push r24
 366 0034 80E0      		ldi r24,lo8(.LC1)
 367 0036 90E0      		ldi r25,hi8(.LC1)
 368 0038 9F93      		push r25
 369 003a 8F93      		push r24
 370 003c 0E94 0000 		call printf
  83:main.c        **** 
  84:main.c        ****   
  85:main.c        ****   	// Open ADC device as read 
  86:main.c        ****   	fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
 372               	.LM4:
 373 0040 65E0      		ldi r22,lo8(5)
 374 0042 83E0      		ldi r24,lo8(3)
 375 0044 0E94 0000 		call nrk_open
 376 0048 382E      		mov r3,r24
  87:main.c        ****   	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 378               	.LM5:
 379 004a 0FB6      		in __tmp_reg__,__SREG__
 380 004c F894      		cli
 381 004e DEBF      		out __SP_H__,r29
 382 0050 0FBE      		out __SREG__,__tmp_reg__
 383 0052 CDBF      		out __SP_L__,r28
 384 0054 9FEF      		ldi r25,lo8(-1)
 385 0056 8913      		cpse r24,r25
 386 0058 00C0      		rjmp .L2
 388               	.LM6:
 389 005a 80E0      		ldi r24,lo8(__c.3156)
 390 005c 90E0      		ldi r25,hi8(__c.3156)
 391 005e 0E94 0000 		call nrk_kprintf
 392               	.L2:
  70:main.c        **** {
 394               	.LM7:
 395 0062 612C      		mov r6,__zero_reg__
 396 0064 712C      		mov r7,__zero_reg__
 397               	.LBB2:
 398               	.LBB3:
  88:main.c        ****   cnt=0;
  89:main.c        ****   while(1) {
  90:main.c        **** 
  91:main.c        **** 	// Example of setting a sensor 
  92:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,HUMIDITY);
  93:main.c        **** 	val=nrk_read(fd,&bbuf,4); //percent humidity
  94:main.c        **** 	printf( "percent humidity = %lu ",bbuf);
  95:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,TEMP2);
  96:main.c        **** 	val=nrk_read(fd,&bbuf,4); //degrees F
  97:main.c        **** 	printf( "temp2 in degrees= %lu ",bbuf/10);
  98:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,PRESS);
  99:main.c        **** 	val=nrk_read(fd,&bbuf,4);
 100:main.c        **** 	printf( "pressure= %lu ",bbuf);
 101:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
 102:main.c        **** 	val=nrk_read(fd,&buf,2);
 103:main.c        **** 	printf( " light=%d",buf);
 104:main.c        **** 	uint16_t sum = 0;
 105:main.c        ****     int size = sizeof(motions)/sizeof(motions[0]);
 106:main.c        **** 	for ( i = 0; i < size; i++ )
 107:main.c        ****      {
 108:main.c        ****       sum = sum + motions[i];
 109:main.c        ****      }
 110:main.c        **** 
 111:main.c        **** 	uint16_t avg = sum/size;
 112:main.c        **** 
 113:main.c        ****     nrk_led_clr(RED_LED);
 114:main.c        ****     nrk_led_clr(GREEN_LED);
 115:main.c        **** 	if( abs(buf - avg) >10)
 116:main.c        **** 	//if( abs(buf - buf_last) >2)
 117:main.c        **** 		{ printf("%s"," Motion Detected " );
 118:main.c        **** 	      nrk_led_toggle(RED_LED);
 119:main.c        **** 	  	}
 120:main.c        **** 	else 
 121:main.c        **** 	{
 122:main.c        **** 		printf("%s"," Motion Not Detected " );
 400               	.LM8:
 401 0066 30E0      		ldi r19,lo8(.LC7)
 402 0068 832E      		mov r8,r19
 403 006a 30E0      		ldi r19,hi8(.LC7)
 404 006c 932E      		mov r9,r19
 117:main.c        **** 		{ printf("%s"," Motion Detected " );
 406               	.LM9:
 407 006e 40E0      		ldi r20,lo8(.LC6)
 408 0070 442E      		mov r4,r20
 409 0072 40E0      		ldi r20,hi8(.LC6)
 410 0074 542E      		mov r5,r20
 411               	.L6:
 412               	.LBE3:
  92:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,HUMIDITY);
 414               	.LM10:
 415 0076 4BE0      		ldi r20,lo8(11)
 416 0078 61E0      		ldi r22,lo8(1)
 417 007a 832D      		mov r24,r3
 418 007c 0E94 0000 		call nrk_set_status
  93:main.c        **** 	val=nrk_read(fd,&bbuf,4); //percent humidity
 420               	.LM11:
 421 0080 44E0      		ldi r20,lo8(4)
 422 0082 BE01      		movw r22,r28
 423 0084 6F5F      		subi r22,-1
 424 0086 7F4F      		sbci r23,-1
 425 0088 832D      		mov r24,r3
 426 008a 0E94 0000 		call nrk_read
  94:main.c        **** 	printf( "percent humidity = %lu ",bbuf);
 428               	.LM12:
 429 008e 8885      		ldd r24,Y+8
 430 0090 8F93      		push r24
 431 0092 8F81      		ldd r24,Y+7
 432 0094 8F93      		push r24
 433 0096 8E81      		ldd r24,Y+6
 434 0098 8F93      		push r24
 435 009a 8D81      		ldd r24,Y+5
 436 009c 8F93      		push r24
 437 009e 8C81      		ldd r24,Y+4
 438 00a0 8F93      		push r24
 439 00a2 8B81      		ldd r24,Y+3
 440 00a4 8F93      		push r24
 441 00a6 8A81      		ldd r24,Y+2
 442 00a8 8F93      		push r24
 443 00aa 8981      		ldd r24,Y+1
 444 00ac 8F93      		push r24
 445 00ae 80E0      		ldi r24,lo8(.LC2)
 446 00b0 90E0      		ldi r25,hi8(.LC2)
 447 00b2 9F93      		push r25
 448 00b4 8F93      		push r24
 449 00b6 0E94 0000 		call printf
  95:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,TEMP2);
 451               	.LM13:
 452 00ba 4AE0      		ldi r20,lo8(10)
 453 00bc 61E0      		ldi r22,lo8(1)
 454 00be 832D      		mov r24,r3
 455 00c0 0E94 0000 		call nrk_set_status
  96:main.c        **** 	val=nrk_read(fd,&bbuf,4); //degrees F
 457               	.LM14:
 458 00c4 44E0      		ldi r20,lo8(4)
 459 00c6 BE01      		movw r22,r28
 460 00c8 6F5F      		subi r22,-1
 461 00ca 7F4F      		sbci r23,-1
 462 00cc 832D      		mov r24,r3
 463 00ce 0E94 0000 		call nrk_read
  97:main.c        **** 	printf( "temp2 in degrees= %lu ",bbuf/10);
 465               	.LM15:
 466 00d2 2981      		ldd r18,Y+1
 467 00d4 3A81      		ldd r19,Y+2
 468 00d6 4B81      		ldd r20,Y+3
 469 00d8 5C81      		ldd r21,Y+4
 470 00da 6D81      		ldd r22,Y+5
 471 00dc 7E81      		ldd r23,Y+6
 472 00de 9AE0      		ldi r25,lo8(10)
 473 00e0 A92E      		mov r10,r25
 474 00e2 B12C      		mov r11,__zero_reg__
 475 00e4 C12C      		mov r12,__zero_reg__
 476 00e6 D12C      		mov r13,__zero_reg__
 477 00e8 E12C      		mov r14,__zero_reg__
 478 00ea F12C      		mov r15,__zero_reg__
 479 00ec 00E0      		ldi r16,0
 480 00ee 10E0      		ldi r17,0
 481 00f0 8F81      		ldd r24,Y+7
 482 00f2 9885      		ldd r25,Y+8
 483 00f4 0E94 0000 		call __udivdi3
 484 00f8 9F93      		push r25
 485 00fa 8F93      		push r24
 486 00fc 7F93      		push r23
 487 00fe 6F93      		push r22
 488 0100 5F93      		push r21
 489 0102 4F93      		push r20
 490 0104 3F93      		push r19
 491 0106 2F93      		push r18
 492 0108 80E0      		ldi r24,lo8(.LC3)
 493 010a 90E0      		ldi r25,hi8(.LC3)
 494 010c 9F93      		push r25
 495 010e 8F93      		push r24
 496 0110 0E94 0000 		call printf
  98:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,PRESS);
 498               	.LM16:
 499 0114 49E0      		ldi r20,lo8(9)
 500 0116 61E0      		ldi r22,lo8(1)
 501 0118 832D      		mov r24,r3
 502 011a 0E94 0000 		call nrk_set_status
  99:main.c        **** 	val=nrk_read(fd,&bbuf,4);
 504               	.LM17:
 505 011e 44E0      		ldi r20,lo8(4)
 506 0120 BE01      		movw r22,r28
 507 0122 6F5F      		subi r22,-1
 508 0124 7F4F      		sbci r23,-1
 509 0126 832D      		mov r24,r3
 510 0128 0E94 0000 		call nrk_read
 100:main.c        **** 	printf( "pressure= %lu ",bbuf);
 512               	.LM18:
 513 012c 8885      		ldd r24,Y+8
 514 012e 8F93      		push r24
 515 0130 8F81      		ldd r24,Y+7
 516 0132 8F93      		push r24
 517 0134 8E81      		ldd r24,Y+6
 518 0136 8F93      		push r24
 519 0138 8D81      		ldd r24,Y+5
 520 013a 8F93      		push r24
 521 013c 8C81      		ldd r24,Y+4
 522 013e 8F93      		push r24
 523 0140 8B81      		ldd r24,Y+3
 524 0142 8F93      		push r24
 525 0144 8A81      		ldd r24,Y+2
 526 0146 8F93      		push r24
 527 0148 8981      		ldd r24,Y+1
 528 014a 8F93      		push r24
 529 014c 80E0      		ldi r24,lo8(.LC4)
 530 014e 90E0      		ldi r25,hi8(.LC4)
 531 0150 9F93      		push r25
 532 0152 8F93      		push r24
 533 0154 0E94 0000 		call printf
 101:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
 535               	.LM19:
 536 0158 41E0      		ldi r20,lo8(1)
 537 015a 61E0      		ldi r22,lo8(1)
 538 015c 832D      		mov r24,r3
 539 015e 0E94 0000 		call nrk_set_status
 102:main.c        **** 	val=nrk_read(fd,&buf,2);
 541               	.LM20:
 542 0162 42E0      		ldi r20,lo8(2)
 543 0164 BE01      		movw r22,r28
 544 0166 635F      		subi r22,-13
 545 0168 7F4F      		sbci r23,-1
 546 016a 832D      		mov r24,r3
 547 016c 0E94 0000 		call nrk_read
 103:main.c        **** 	printf( " light=%d",buf);
 549               	.LM21:
 550 0170 8E85      		ldd r24,Y+14
 551 0172 8F93      		push r24
 552 0174 8D85      		ldd r24,Y+13
 553 0176 8F93      		push r24
 554 0178 80E0      		ldi r24,lo8(.LC5)
 555 017a 90E0      		ldi r25,hi8(.LC5)
 556 017c 9F93      		push r25
 557 017e 8F93      		push r24
 558 0180 0E94 0000 		call printf
 108:main.c        ****       sum = sum + motions[i];
 560               	.LM22:
 561 0184 0B85      		ldd r16,Y+11
 562 0186 1C85      		ldd r17,Y+12
 563 0188 8985      		ldd r24,Y+9
 564 018a 9A85      		ldd r25,Y+10
 565 018c 080F      		add r16,r24
 566 018e 191F      		adc r17,r25
 111:main.c        **** 	uint16_t avg = sum/size;
 568               	.LM23:
 569 0190 1695      		lsr r17
 570 0192 0795      		ror r16
 113:main.c        ****     nrk_led_clr(RED_LED);
 572               	.LM24:
 573 0194 0FB6      		in __tmp_reg__,__SREG__
 574 0196 F894      		cli
 575 0198 DEBF      		out __SP_H__,r29
 576 019a 0FBE      		out __SREG__,__tmp_reg__
 577 019c CDBF      		out __SP_L__,r28
 578 019e 80E0      		ldi r24,0
 579 01a0 90E0      		ldi r25,0
 580 01a2 0E94 0000 		call nrk_led_clr
 114:main.c        ****     nrk_led_clr(GREEN_LED);
 582               	.LM25:
 583 01a6 81E0      		ldi r24,lo8(1)
 584 01a8 90E0      		ldi r25,0
 585 01aa 0E94 0000 		call nrk_led_clr
 586               	.LBB4:
 115:main.c        **** 	if( abs(buf - avg) >10)
 588               	.LM26:
 589 01ae 8D85      		ldd r24,Y+13
 590 01b0 9E85      		ldd r25,Y+14
 591 01b2 801B      		sub r24,r16
 592 01b4 910B      		sbc r25,r17
 593 01b6 97FF      		sbrs r25,7
 594 01b8 00C0      		rjmp .L4
 595 01ba 9195      		neg r25
 596 01bc 8195      		neg r24
 597 01be 9109      		sbc r25,__zero_reg__
 598               	.L4:
 599 01c0 0B97      		sbiw r24,11
 600 01c2 04F0      		brlt .L3
 117:main.c        **** 		{ printf("%s"," Motion Detected " );
 602               	.LM27:
 603 01c4 5F92      		push r5
 604 01c6 4F92      		push r4
 605 01c8 9F92      		push r9
 606 01ca 8F92      		push r8
 607 01cc 0E94 0000 		call printf
 118:main.c        **** 	      nrk_led_toggle(RED_LED);
 609               	.LM28:
 610 01d0 80E0      		ldi r24,0
 611 01d2 90E0      		ldi r25,0
 612 01d4 00C0      		rjmp .L7
 613               	.L3:
 615               	.LM29:
 616 01d6 80E0      		ldi r24,lo8(.LC8)
 617 01d8 90E0      		ldi r25,hi8(.LC8)
 618 01da 9F93      		push r25
 619 01dc 8F93      		push r24
 620 01de 9F92      		push r9
 621 01e0 8F92      		push r8
 622 01e2 0E94 0000 		call printf
 123:main.c        **** 		nrk_led_toggle(GREEN_LED);
 624               	.LM30:
 625 01e6 81E0      		ldi r24,lo8(1)
 626 01e8 90E0      		ldi r25,0
 627               	.L7:
 628 01ea 0E94 0000 		call nrk_led_toggle
 629 01ee 0F90      		pop __tmp_reg__
 630 01f0 0F90      		pop __tmp_reg__
 631 01f2 0F90      		pop __tmp_reg__
 632 01f4 0F90      		pop __tmp_reg__
 633               	.LBE4:
 124:main.c        **** 	}
 125:main.c        **** 
 126:main.c        **** 	// if(cnt<10)
 127:main.c        **** 	// {
 128:main.c        **** 		motions[index] = buf;
 635               	.LM31:
 636 01f6 F301      		movw r30,r6
 637 01f8 EE0F      		lsl r30
 638 01fa FF1F      		rol r31
 639 01fc 81E0      		ldi r24,lo8(1)
 640 01fe 90E0      		ldi r25,0
 641 0200 8C0F      		add r24,r28
 642 0202 9D1F      		adc r25,r29
 643 0204 E80F      		add r30,r24
 644 0206 F91F      		adc r31,r25
 645 0208 8D85      		ldd r24,Y+13
 646 020a 9E85      		ldd r25,Y+14
 647 020c 9187      		std Z+9,r25
 648 020e 8087      		std Z+8,r24
 129:main.c        **** 	// }
 130:main.c        **** 	buf_last = buf; 
 131:main.c        **** 
 132:main.c        **** 	printf( "avg light=%d",avg);
 650               	.LM32:
 651 0210 1F93      		push r17
 652 0212 0F93      		push r16
 653 0214 80E0      		ldi r24,lo8(.LC9)
 654 0216 90E0      		ldi r25,hi8(.LC9)
 655 0218 9F93      		push r25
 656 021a 8F93      		push r24
 657 021c 0E94 0000 		call printf
 133:main.c        **** 
 134:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,TEMP);
 659               	.LM33:
 660 0220 40E0      		ldi r20,0
 661 0222 61E0      		ldi r22,lo8(1)
 662 0224 832D      		mov r24,r3
 663 0226 0E94 0000 		call nrk_set_status
 135:main.c        **** 	val=nrk_read(fd,&buf,2); //degrees F
 665               	.LM34:
 666 022a 42E0      		ldi r20,lo8(2)
 667 022c BE01      		movw r22,r28
 668 022e 635F      		subi r22,-13
 669 0230 7F4F      		sbci r23,-1
 670 0232 832D      		mov r24,r3
 671 0234 0E94 0000 		call nrk_read
 136:main.c        **** 	printf( " temp in degrees=%03d",buf/10);
 673               	.LM35:
 674 0238 8D85      		ldd r24,Y+13
 675 023a 9E85      		ldd r25,Y+14
 676 023c 6AE0      		ldi r22,lo8(10)
 677 023e 70E0      		ldi r23,0
 678 0240 0E94 0000 		call __udivmodhi4
 679 0244 7F93      		push r23
 680 0246 6F93      		push r22
 681 0248 80E0      		ldi r24,lo8(.LC10)
 682 024a 90E0      		ldi r25,hi8(.LC10)
 683 024c 9F93      		push r25
 684 024e 8F93      		push r24
 685 0250 0E94 0000 		call printf
 137:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
 687               	.LM36:
 688 0254 44E0      		ldi r20,lo8(4)
 689 0256 61E0      		ldi r22,lo8(1)
 690 0258 832D      		mov r24,r3
 691 025a 0E94 0000 		call nrk_set_status
 138:main.c        **** 	val=nrk_read(fd,&buf,2);
 693               	.LM37:
 694 025e 42E0      		ldi r20,lo8(2)
 695 0260 BE01      		movw r22,r28
 696 0262 635F      		subi r22,-13
 697 0264 7F4F      		sbci r23,-1
 698 0266 832D      		mov r24,r3
 699 0268 0E94 0000 		call nrk_read
 139:main.c        **** 	printf( " acc_x=%d",buf);
 701               	.LM38:
 702 026c 8E85      		ldd r24,Y+14
 703 026e 8F93      		push r24
 704 0270 8D85      		ldd r24,Y+13
 705 0272 8F93      		push r24
 706 0274 80E0      		ldi r24,lo8(.LC11)
 707 0276 90E0      		ldi r25,hi8(.LC11)
 708 0278 9F93      		push r25
 709 027a 8F93      		push r24
 710 027c 0E94 0000 		call printf
 140:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
 712               	.LM39:
 713 0280 45E0      		ldi r20,lo8(5)
 714 0282 61E0      		ldi r22,lo8(1)
 715 0284 832D      		mov r24,r3
 716 0286 0E94 0000 		call nrk_set_status
 141:main.c        **** 	val=nrk_read(fd,&buf,2);
 718               	.LM40:
 719 028a 42E0      		ldi r20,lo8(2)
 720 028c BE01      		movw r22,r28
 721 028e 635F      		subi r22,-13
 722 0290 7F4F      		sbci r23,-1
 723 0292 832D      		mov r24,r3
 724 0294 0E94 0000 		call nrk_read
 142:main.c        **** 	printf( " acc_y=%d",buf);
 726               	.LM41:
 727 0298 8E85      		ldd r24,Y+14
 728 029a 8F93      		push r24
 729 029c 8D85      		ldd r24,Y+13
 730 029e 8F93      		push r24
 731 02a0 80E0      		ldi r24,lo8(.LC12)
 732 02a2 90E0      		ldi r25,hi8(.LC12)
 733 02a4 9F93      		push r25
 734 02a6 8F93      		push r24
 735 02a8 0E94 0000 		call printf
 143:main.c        **** 	val=nrk_set_status(fd,SENSOR_SELECT,ACC_Z);
 737               	.LM42:
 738 02ac 46E0      		ldi r20,lo8(6)
 739 02ae 61E0      		ldi r22,lo8(1)
 740 02b0 832D      		mov r24,r3
 741 02b2 0E94 0000 		call nrk_set_status
 144:main.c        **** 	
 145:main.c        **** 	val=nrk_read(fd,&buf,2); //motion detected/no motion detected
 743               	.LM43:
 744 02b6 42E0      		ldi r20,lo8(2)
 745 02b8 BE01      		movw r22,r28
 746 02ba 635F      		subi r22,-13
 747 02bc 7F4F      		sbci r23,-1
 748 02be 832D      		mov r24,r3
 749 02c0 0E94 0000 		call nrk_read
 146:main.c        **** 	printf( " motion=%d",buf);
 751               	.LM44:
 752 02c4 8E85      		ldd r24,Y+14
 753 02c6 8F93      		push r24
 754 02c8 8D85      		ldd r24,Y+13
 755 02ca 8F93      		push r24
 756 02cc 80E0      		ldi r24,lo8(.LC13)
 757 02ce 90E0      		ldi r25,hi8(.LC13)
 758 02d0 9F93      		push r25
 759 02d2 8F93      		push r24
 760 02d4 0E94 0000 		call printf
 147:main.c        **** 
 148:main.c        ****   	val=nrk_set_status(fd,SENSOR_SELECT,AUDIO_P2P);
 762               	.LM45:
 763 02d8 4CE0      		ldi r20,lo8(12)
 764 02da 61E0      		ldi r22,lo8(1)
 765 02dc 832D      		mov r24,r3
 766 02de 0E94 0000 		call nrk_set_status
 149:main.c        **** 	nrk_spin_wait_us(60000);
 768               	.LM46:
 769 02e2 80E6      		ldi r24,lo8(96)
 770 02e4 9AEE      		ldi r25,lo8(-22)
 771 02e6 0E94 0000 		call nrk_spin_wait_us
 150:main.c        **** 	val=nrk_read(fd,&buf,2);
 773               	.LM47:
 774 02ea 42E0      		ldi r20,lo8(2)
 775 02ec BE01      		movw r22,r28
 776 02ee 635F      		subi r22,-13
 777 02f0 7F4F      		sbci r23,-1
 778 02f2 832D      		mov r24,r3
 779 02f4 0E94 0000 		call nrk_read
 151:main.c        **** 	printf( " audio=%d\r\n",buf);
 781               	.LM48:
 782 02f8 8E85      		ldd r24,Y+14
 783 02fa 8F93      		push r24
 784 02fc 8D85      		ldd r24,Y+13
 785 02fe 8F93      		push r24
 786 0300 80E0      		ldi r24,lo8(.LC14)
 787 0302 90E0      		ldi r25,hi8(.LC14)
 788 0304 9F93      		push r25
 789 0306 8F93      		push r24
 790 0308 0E94 0000 		call printf
 152:main.c        **** 	//nrk_close(fd);
 153:main.c        **** 	nrk_wait_until_next_period();
 792               	.LM49:
 793 030c 0E94 0000 		call nrk_wait_until_next_period
 154:main.c        **** 	cnt++;
 155:main.c        **** 
 156:main.c        **** 	index++;
 157:main.c        **** 	if(index == size)
 158:main.c        **** 		index =0;
 795               	.LM50:
 796 0310 81E0      		ldi r24,1
 797 0312 6826      		eor r6,r24
 798 0314 0FB6      		in __tmp_reg__,__SREG__
 799 0316 F894      		cli
 800 0318 DEBF      		out __SP_H__,r29
 801 031a 0FBE      		out __SREG__,__tmp_reg__
 802 031c CDBF      		out __SP_L__,r28
 803 031e 00C0      		rjmp .L6
 804               	.LBE2:
 816               	.Lscope1:
 818               		.stabd	78,0,0
 820               	.global	nrk_create_taskset
 822               	nrk_create_taskset:
 823               		.stabd	46,0,0
 159:main.c        **** 	}
 160:main.c        **** }
 161:main.c        **** 
 162:main.c        **** 
 163:main.c        **** void
 164:main.c        **** nrk_create_taskset()
 165:main.c        **** {
 825               	.LM51:
 826               	.LFBB2:
 827               	/* prologue: function */
 828               	/* frame size = 0 */
 829               	/* stack size = 0 */
 830               	.L__stack_usage = 0
 166:main.c        ****   TaskOne.task = Task1;
 832               	.LM52:
 833 0320 80E0      		ldi r24,lo8(gs(Task1))
 834 0322 90E0      		ldi r25,hi8(gs(Task1))
 835 0324 9093 0000 		sts TaskOne+5+1,r25
 836 0328 8093 0000 		sts TaskOne+5,r24
 167:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 838               	.LM53:
 839 032c 40E8      		ldi r20,lo8(-128)
 840 032e 50E0      		ldi r21,0
 841 0330 60E0      		ldi r22,lo8(Stack1)
 842 0332 70E0      		ldi r23,hi8(Stack1)
 843 0334 80E0      		ldi r24,lo8(TaskOne)
 844 0336 90E0      		ldi r25,hi8(TaskOne)
 845 0338 0E94 0000 		call nrk_task_set_stk
 168:main.c        ****   TaskOne.prio = 1;
 847               	.LM54:
 848 033c 81E0      		ldi r24,lo8(1)
 849 033e 8093 0000 		sts TaskOne+8,r24
 169:main.c        ****   TaskOne.FirstActivation = TRUE;
 851               	.LM55:
 852 0342 8093 0000 		sts TaskOne+7,r24
 170:main.c        ****   TaskOne.Type = BASIC_TASK;
 854               	.LM56:
 855 0346 8093 0000 		sts TaskOne+9,r24
 171:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 857               	.LM57:
 858 034a 8093 0000 		sts TaskOne+10,r24
 172:main.c        ****   TaskOne.period.secs = 0;
 860               	.LM58:
 861 034e 1092 0000 		sts TaskOne+11,__zero_reg__
 862 0352 1092 0000 		sts TaskOne+11+1,__zero_reg__
 863 0356 1092 0000 		sts TaskOne+11+2,__zero_reg__
 864 035a 1092 0000 		sts TaskOne+11+3,__zero_reg__
 173:main.c        ****   TaskOne.period.nano_secs = 100*NANOS_PER_MS; //*NANOS_PER_MS;
 866               	.LM59:
 867 035e 80E0      		ldi r24,0
 868 0360 91EE      		ldi r25,lo8(-31)
 869 0362 A5EF      		ldi r26,lo8(-11)
 870 0364 B5E0      		ldi r27,lo8(5)
 871 0366 8093 0000 		sts TaskOne+15,r24
 872 036a 9093 0000 		sts TaskOne+15+1,r25
 873 036e A093 0000 		sts TaskOne+15+2,r26
 874 0372 B093 0000 		sts TaskOne+15+3,r27
 174:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 876               	.LM60:
 877 0376 1092 0000 		sts TaskOne+19,__zero_reg__
 878 037a 1092 0000 		sts TaskOne+19+1,__zero_reg__
 879 037e 1092 0000 		sts TaskOne+19+2,__zero_reg__
 880 0382 1092 0000 		sts TaskOne+19+3,__zero_reg__
 175:main.c        ****   TaskOne.cpu_reserve.nano_secs =  200*NANOS_PER_MS;
 882               	.LM61:
 883 0386 80E0      		ldi r24,0
 884 0388 92EC      		ldi r25,lo8(-62)
 885 038a ABEE      		ldi r26,lo8(-21)
 886 038c BBE0      		ldi r27,lo8(11)
 887 038e 8093 0000 		sts TaskOne+23,r24
 888 0392 9093 0000 		sts TaskOne+23+1,r25
 889 0396 A093 0000 		sts TaskOne+23+2,r26
 890 039a B093 0000 		sts TaskOne+23+3,r27
 176:main.c        ****   TaskOne.offset.secs = 0;
 892               	.LM62:
 893 039e 1092 0000 		sts TaskOne+27,__zero_reg__
 894 03a2 1092 0000 		sts TaskOne+27+1,__zero_reg__
 895 03a6 1092 0000 		sts TaskOne+27+2,__zero_reg__
 896 03aa 1092 0000 		sts TaskOne+27+3,__zero_reg__
 177:main.c        ****   TaskOne.offset.nano_secs= 0;
 898               	.LM63:
 899 03ae 1092 0000 		sts TaskOne+31,__zero_reg__
 900 03b2 1092 0000 		sts TaskOne+31+1,__zero_reg__
 901 03b6 1092 0000 		sts TaskOne+31+2,__zero_reg__
 902 03ba 1092 0000 		sts TaskOne+31+3,__zero_reg__
 178:main.c        ****   nrk_activate_task (&TaskOne);
 904               	.LM64:
 905 03be 80E0      		ldi r24,lo8(TaskOne)
 906 03c0 90E0      		ldi r25,hi8(TaskOne)
 907 03c2 0C94 0000 		jmp nrk_activate_task
 909               	.Lscope2:
 911               		.stabd	78,0,0
 913               	.global	nrk_register_drivers
 915               	nrk_register_drivers:
 916               		.stabd	46,0,0
 179:main.c        **** 
 180:main.c        **** }
 181:main.c        **** 
 182:main.c        **** void nrk_register_drivers()
 183:main.c        **** {
 918               	.LM65:
 919               	.LFBB3:
 920               	/* prologue: function */
 921               	/* frame size = 0 */
 922               	/* stack size = 0 */
 923               	.L__stack_usage = 0
 184:main.c        **** int8_t val;
 185:main.c        **** 
 186:main.c        **** // Register the Basic FireFly Sensor device driver
 187:main.c        **** // Make sure to add: 
 188:main.c        **** //     #define NRK_MAX_DRIVER_CNT  
 189:main.c        **** //     in nrk_cfg.h
 190:main.c        **** // Make sure to add: 
 191:main.c        **** //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 192:main.c        **** //     in makefile
 193:main.c        **** val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
 925               	.LM66:
 926 03c6 63E0      		ldi r22,lo8(3)
 927 03c8 80E0      		ldi r24,lo8(gs(dev_manager_ff3_sensors))
 928 03ca 90E0      		ldi r25,hi8(gs(dev_manager_ff3_sensors))
 929 03cc 0E94 0000 		call nrk_register_driver
 194:main.c        **** if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 931               	.LM67:
 932 03d0 8F3F      		cpi r24,lo8(-1)
 933 03d2 01F4      		brne .L9
 935               	.LM68:
 936 03d4 80E0      		ldi r24,lo8(__c.3171)
 937 03d6 90E0      		ldi r25,hi8(__c.3171)
 938 03d8 0C94 0000 		jmp nrk_kprintf
 939               	.L9:
 940 03dc 0895      		ret
 942               	.Lscope3:
 944               		.stabd	78,0,0
 945               		.section	.rodata.str1.1
 946               	.LC15:
 947 00ea 7374 6172 		.string	"starting...\r"
 947      7469 6E67 
 947      2E2E 2E0D 
 947      00
 948               		.section	.text.startup,"ax",@progbits
 950               	.global	main
 952               	main:
 953               		.stabd	46,0,0
  50:main.c        **** {
 955               	.LM69:
 956               	.LFBB4:
 957               	/* prologue: function */
 958               	/* frame size = 0 */
 959               	/* stack size = 0 */
 960               	.L__stack_usage = 0
  52:main.c        ****   nrk_setup_ports();
 962               	.LM70:
 963 0000 0E94 0000 		call nrk_setup_ports
  53:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 965               	.LM71:
 966 0004 80E1      		ldi r24,lo8(16)
 967 0006 90E0      		ldi r25,0
 968 0008 0E94 0000 		call nrk_setup_uart
  56:main.c        ****   printf( PSTR("starting...\r\n") );
 970               	.LM72:
 971 000c 80E0      		ldi r24,lo8(.LC15)
 972 000e 90E0      		ldi r25,hi8(.LC15)
 973 0010 0E94 0000 		call puts
  58:main.c        ****   nrk_init();
 975               	.LM73:
 976 0014 0E94 0000 		call nrk_init
  59:main.c        ****   nrk_time_set(0,0);
 978               	.LM74:
 979 0018 20E0      		ldi r18,0
 980 001a 30E0      		ldi r19,0
 981 001c A901      		movw r20,r18
 982 001e 60E0      		ldi r22,0
 983 0020 70E0      		ldi r23,0
 984 0022 CB01      		movw r24,r22
 985 0024 0E94 0000 		call nrk_time_set
  61:main.c        ****   nrk_register_drivers();
 987               	.LM75:
 988 0028 0E94 0000 		call nrk_register_drivers
  62:main.c        ****   nrk_create_taskset ();
 990               	.LM76:
 991 002c 0E94 0000 		call nrk_create_taskset
  63:main.c        ****   nrk_start();
 993               	.LM77:
 994 0030 0E94 0000 		call nrk_start
  66:main.c        **** }
 996               	.LM78:
 997 0034 80E0      		ldi r24,0
 998 0036 90E0      		ldi r25,0
 999 0038 0895      		ret
 1001               	.Lscope4:
 1003               		.stabd	78,0,0
 1004               		.comm	TaskOne,35,1
 1005               		.comm	Stack1,128,1
 1006               		.comm	app_timer0_prescale,1,1
 1007               		.comm	app_timer0_callback,2,1
 1008               		.comm	_nrk_time_trigger,1,1
 1009               		.comm	_nrk_prev_timer_val,1,1
 1010               		.comm	error_num,1,1
 1011               		.comm	error_task,1,1
 1012               		.comm	nrk_kernel_stk_ptr,2,1
 1013               		.comm	nrk_idle_task_stk,128,1
 1014               		.comm	_nrk_signal_list,4,1
 1015               		.section	.progmem.data,"a",@progbits
 1018               	__c.3156:
 1019 0000 4661 696C 		.string	"Failed to open sensor driver\r\n"
 1019      6564 2074 
 1019      6F20 6F70 
 1019      656E 2073 
 1019      656E 736F 
 1022               	__c.3171:
 1023 001f 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 1023      6564 2074 
 1023      6F20 6C6F 
 1023      6164 206D 
 1023      7920 4144 
 1035               		.text
 1037               	.Letext0:
 1038               		.ident	"GCC: (GNU) 4.7.2"
 1039               	.global __do_copy_data
 1040               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:4      *ABS*:000000000000003f __SREG__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:327    .text:0000000000000000 Task1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:1018   .progmem.data:0000000000000000 __c.3156
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:822    .text:0000000000000320 nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:915    .text:00000000000003c6 nrk_register_drivers
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:1022   .progmem.data:000000000000001f __c.3171
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//cc8rG0lt.s:952    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
__udivdi3
printf
nrk_get_pid
nrk_open
nrk_kprintf
nrk_set_status
nrk_read
nrk_led_clr
nrk_led_toggle
__udivmodhi4
nrk_spin_wait_us
nrk_wait_until_next_period
nrk_task_set_stk
nrk_activate_task
dev_manager_ff3_sensors
nrk_register_driver
nrk_setup_ports
nrk_setup_uart
puts
nrk_init
nrk_time_set
nrk_start
__do_copy_data
__do_clear_bss
