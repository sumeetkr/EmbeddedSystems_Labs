   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 291               		.section	.rodata.str1.1,"aMS",@progbits,1
 292               	.LC0:
 293 0000 5461 736B 		.string	"Task PID=%u\r\n"
 293      2050 4944 
 293      3D25 750D 
 293      0A00 
 294               	.LC1:
 295 000e 2061 7564 		.string	" audio=%d\r\n"
 295      696F 3D25 
 295      640D 0A00 
 296               		.text
 298               	.global	collect_Audio_Data
 300               	collect_Audio_Data:
 301               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *  Contributing Authors (specific to this file):
  23:main.c        **** *  Zane Starr
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <nrk.h>
  28:main.c        **** #include <include.h>
  29:main.c        **** #include <ulib.h>
  30:main.c        **** #include <stdio.h>
  31:main.c        **** #include <avr/sleep.h>
  32:main.c        **** #include <hal.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** #include <nrk_driver_list.h>
  36:main.c        **** #include <nrk_driver.h>
  37:main.c        **** #include <ff_basic_sensor.h>
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  40:main.c        **** NRK_STK Stack2[NRK_APP_STACKSIZE];
  41:main.c        **** nrk_task_type TaskOne;
  42:main.c        **** nrk_task_type TaskTwo;
  43:main.c        **** 
  44:main.c        **** void collect_Audio_Data(void);
  45:main.c        **** uint16_t calculate_rms(uint16_t audios [], int8_t size, int8_t window_size);
  46:main.c        **** void analyze_Audio_Data(void);
  47:main.c        **** 
  48:main.c        **** void nrk_create_taskset();
  49:main.c        **** void nrk_register_drivers();
  50:main.c        **** uint8_t kill_stack(uint8_t val);
  51:main.c        **** uint16_t * audio_data;
  52:main.c        **** int8_t audio_data_size;
  53:main.c        **** 
  54:main.c        **** int
  55:main.c        **** main ()
  56:main.c        **** {
  57:main.c        ****   uint8_t t;
  58:main.c        ****   nrk_setup_ports();
  59:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  60:main.c        **** 
  61:main.c        **** 
  62:main.c        ****   printf( PSTR("starting...\r\n") );
  63:main.c        ****   audio_data_size = 30;
  64:main.c        ****   audio_data = malloc(audio_data_size * (sizeof audio_data[0]));
  65:main.c        **** 
  66:main.c        ****   nrk_init();
  67:main.c        ****   nrk_time_set(0,0);
  68:main.c        **** 
  69:main.c        ****   nrk_register_drivers();
  70:main.c        ****   nrk_create_taskset ();
  71:main.c        ****   nrk_start();
  72:main.c        ****   
  73:main.c        ****   return 0;
  74:main.c        **** }
  75:main.c        **** 
  76:main.c        **** 
  77:main.c        **** void 
  78:main.c        **** collect_Audio_Data(){
 303               	.LM0:
 304               	.LFBB1:
 305 0000 CF93      		push r28
 306 0002 DF93      		push r29
 307 0004 00D0      		rcall .
 308 0006 CDB7      		in r28,__SP_L__
 309 0008 DEB7      		in r29,__SP_H__
 310               	/* prologue: function */
 311               	/* frame size = 2 */
 312               	/* stack size = 4 */
 313               	.L__stack_usage = 4
  79:main.c        **** printf( "Task PID=%u\r\n",nrk_get_pid());
 315               	.LM1:
 316 000a 0E94 0000 		call nrk_get_pid
 317 000e 1F92      		push __zero_reg__
 318 0010 8F93      		push r24
 319 0012 80E0      		ldi r24,lo8(.LC0)
 320 0014 90E0      		ldi r25,hi8(.LC0)
 321 0016 9F93      		push r25
 322 0018 8F93      		push r24
 323 001a 0E94 0000 		call printf
  80:main.c        **** 
  81:main.c        **** int8_t fd, val, index;
  82:main.c        **** uint16_t buf;
  83:main.c        **** 
  84:main.c        **** // Open ADC device as read 
  85:main.c        **** fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
 325               	.LM2:
 326 001e 65E0      		ldi r22,lo8(5)
 327 0020 83E0      		ldi r24,lo8(3)
 328 0022 0E94 0000 		call nrk_open
 329 0026 E82E      		mov r14,r24
  86:main.c        **** if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 331               	.LM3:
 332 0028 0F90      		pop __tmp_reg__
 333 002a 0F90      		pop __tmp_reg__
 334 002c 0F90      		pop __tmp_reg__
 335 002e 0F90      		pop __tmp_reg__
 336 0030 8FEF      		ldi r24,lo8(-1)
 337 0032 E812      		cpse r14,r24
 338 0034 00C0      		rjmp .L4
 340               	.LM4:
 341 0036 80E0      		ldi r24,lo8(__c.3162)
 342 0038 90E0      		ldi r25,hi8(__c.3162)
 343 003a 0E94 0000 		call nrk_kprintf
 344               	.L4:
  87:main.c        **** 
  88:main.c        **** 	while(1)
  89:main.c        **** 	{
  90:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,AUDIO);
  91:main.c        **** 		nrk_spin_wait_us(10000);
  92:main.c        **** 		val=nrk_read(fd,&buf,2);
  93:main.c        **** 		printf( " audio=%d\r\n",buf);
 346               	.LM5:
 347 003e 00E0      		ldi r16,lo8(.LC1)
 348 0040 10E0      		ldi r17,hi8(.LC1)
 349               	.L6:
  90:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,AUDIO);
 351               	.LM6:
 352 0042 43E0      		ldi r20,lo8(3)
 353 0044 61E0      		ldi r22,lo8(1)
 354 0046 8E2D      		mov r24,r14
 355 0048 0E94 0000 		call nrk_set_status
  91:main.c        **** 		nrk_spin_wait_us(10000);
 357               	.LM7:
 358 004c 80E1      		ldi r24,lo8(16)
 359 004e 97E2      		ldi r25,lo8(39)
 360 0050 0E94 0000 		call nrk_spin_wait_us
  92:main.c        **** 		val=nrk_read(fd,&buf,2);
 362               	.LM8:
 363 0054 42E0      		ldi r20,lo8(2)
 364 0056 BE01      		movw r22,r28
 365 0058 6F5F      		subi r22,-1
 366 005a 7F4F      		sbci r23,-1
 367 005c 8E2D      		mov r24,r14
 368 005e 0E94 0000 		call nrk_read
 370               	.LM9:
 371 0062 8A81      		ldd r24,Y+2
 372 0064 8F93      		push r24
 373 0066 8981      		ldd r24,Y+1
 374 0068 8F93      		push r24
 375 006a 1F93      		push r17
 376 006c 0F93      		push r16
 377 006e 0E94 0000 		call printf
  94:main.c        **** 
  95:main.c        **** 		nrk_led_clr(BLUE_LED);
 379               	.LM10:
 380 0072 83E0      		ldi r24,lo8(3)
 381 0074 90E0      		ldi r25,0
 382 0076 0E94 0000 		call nrk_led_clr
  96:main.c        **** 		nrk_led_clr(RED_LED);
 384               	.LM11:
 385 007a 80E0      		ldi r24,0
 386 007c 90E0      		ldi r25,0
 387 007e 0E94 0000 		call nrk_led_clr
  97:main.c        **** 		nrk_led_toggle(RED_LED);
 389               	.LM12:
 390 0082 80E0      		ldi r24,0
 391 0084 90E0      		ldi r25,0
 392 0086 0E94 0000 		call nrk_led_toggle
  98:main.c        **** 
  99:main.c        **** 		audio_data[index] = buf;
 394               	.LM13:
 395 008a 2981      		ldd r18,Y+1
 396 008c 3A81      		ldd r19,Y+2
 397 008e 4F2D      		mov r20,r15
 398 0090 440F      		lsl r20
 399 0092 550B      		sbc r21,r21
 400 0094 E091 0000 		lds r30,audio_data
 401 0098 F091 0000 		lds r31,audio_data+1
 402 009c E40F      		add r30,r20
 403 009e F51F      		adc r31,r21
 404 00a0 3183      		std Z+1,r19
 405 00a2 2083      		st Z,r18
 100:main.c        **** 		index++;
 407               	.LM14:
 408 00a4 F394      		inc r15
 101:main.c        **** 
 102:main.c        **** 		if(index == audio_data_size)
 410               	.LM15:
 411 00a6 0F90      		pop __tmp_reg__
 412 00a8 0F90      		pop __tmp_reg__
 413 00aa 0F90      		pop __tmp_reg__
 414 00ac 0F90      		pop __tmp_reg__
 415 00ae 8091 0000 		lds r24,audio_data_size
 416 00b2 F812      		cpse r15,r24
 417 00b4 00C0      		rjmp .L3
 103:main.c        **** 		{
 104:main.c        **** 			index =0;
 419               	.LM16:
 420 00b6 F12C      		mov r15,__zero_reg__
 421               	.L3:
 105:main.c        **** 		}
 106:main.c        **** 
 107:main.c        **** 		nrk_wait_until_next_period();
 423               	.LM17:
 424 00b8 0E94 0000 		call nrk_wait_until_next_period
 108:main.c        **** 	}
 426               	.LM18:
 427 00bc 00C0      		rjmp .L6
 434               	.Lscope1:
 436               		.stabd	78,0,0
 438               	.global	nrk_create_taskset
 440               	nrk_create_taskset:
 441               		.stabd	46,0,0
 109:main.c        **** }
 110:main.c        **** 
 111:main.c        **** void
 112:main.c        **** analyze_Audio_Data()
 113:main.c        **** {
 114:main.c        ****   printf( "Task PID=%u\r\n",nrk_get_pid());
 115:main.c        ****   int16_t cnt;
 116:main.c        ****   cnt=0;
 117:main.c        ****   while(1) {
 118:main.c        **** 
 119:main.c        ****   	nrk_led_clr(BLUE_LED);
 120:main.c        ****   	nrk_led_clr(RED_LED);
 121:main.c        **** 	  nrk_led_toggle(BLUE_LED);
 122:main.c        **** 	  // printf( "Task2 signed cnt=%d\r\n",cnt );
 123:main.c        ****   	// printf( "Task Id =%u\r\n", 2);
 124:main.c        **** 
 125:main.c        ****   	uint16_t rms = calculate_rms(audio_data, audio_data_size, 10);
 126:main.c        **** 	  //nrk_stats_display_pid(nrk_get_pid());
 127:main.c        **** 	  nrk_wait_until_next_period();
 128:main.c        **** 	  cnt--;
 129:main.c        **** 	}
 130:main.c        **** }
 131:main.c        **** 
 132:main.c        **** void
 133:main.c        **** nrk_create_taskset()
 134:main.c        **** {
 443               	.LM19:
 444               	.LFBB2:
 445 00be CF93      		push r28
 446               	/* prologue: function */
 447               	/* frame size = 0 */
 448               	/* stack size = 1 */
 449               	.L__stack_usage = 1
 135:main.c        ****  nrk_task_set_entry_function( &TaskOne, collect_Audio_Data);
 451               	.LM20:
 452 00c0 60E0      		ldi r22,lo8(gs(collect_Audio_Data))
 453 00c2 70E0      		ldi r23,hi8(gs(collect_Audio_Data))
 454 00c4 80E0      		ldi r24,lo8(TaskOne)
 455 00c6 90E0      		ldi r25,hi8(TaskOne)
 456 00c8 0E94 0000 		call nrk_task_set_entry_function
 136:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 458               	.LM21:
 459 00cc 40E8      		ldi r20,lo8(-128)
 460 00ce 50E0      		ldi r21,0
 461 00d0 60E0      		ldi r22,lo8(Stack1)
 462 00d2 70E0      		ldi r23,hi8(Stack1)
 463 00d4 80E0      		ldi r24,lo8(TaskOne)
 464 00d6 90E0      		ldi r25,hi8(TaskOne)
 465 00d8 0E94 0000 		call nrk_task_set_stk
 137:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 467               	.LM22:
 468 00dc 40E8      		ldi r20,lo8(-128)
 469 00de 50E0      		ldi r21,0
 470 00e0 60E0      		ldi r22,lo8(Stack1)
 471 00e2 70E0      		ldi r23,hi8(Stack1)
 472 00e4 80E0      		ldi r24,lo8(TaskOne)
 473 00e6 90E0      		ldi r25,hi8(TaskOne)
 474 00e8 0E94 0000 		call nrk_task_set_stk
 138:main.c        ****   TaskOne.prio = 1;
 476               	.LM23:
 477 00ec C1E0      		ldi r28,lo8(1)
 478 00ee C093 0000 		sts TaskOne+8,r28
 139:main.c        ****   TaskOne.FirstActivation = TRUE;
 480               	.LM24:
 481 00f2 C093 0000 		sts TaskOne+7,r28
 140:main.c        ****   TaskOne.Type = BASIC_TASK;
 483               	.LM25:
 484 00f6 C093 0000 		sts TaskOne+9,r28
 141:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 486               	.LM26:
 487 00fa C093 0000 		sts TaskOne+10,r28
 142:main.c        ****   TaskOne.period.secs = 0;
 489               	.LM27:
 490 00fe 1092 0000 		sts TaskOne+11,__zero_reg__
 491 0102 1092 0000 		sts TaskOne+11+1,__zero_reg__
 492 0106 1092 0000 		sts TaskOne+11+2,__zero_reg__
 493 010a 1092 0000 		sts TaskOne+11+3,__zero_reg__
 143:main.c        ****   TaskOne.period.nano_secs = 2*NANOS_PER_MS; //*NANOS_PER_MS;
 495               	.LM28:
 496 010e 80E8      		ldi r24,lo8(-128)
 497 0110 94E8      		ldi r25,lo8(-124)
 498 0112 AEE1      		ldi r26,lo8(30)
 499 0114 B0E0      		ldi r27,0
 500 0116 8093 0000 		sts TaskOne+15,r24
 501 011a 9093 0000 		sts TaskOne+15+1,r25
 502 011e A093 0000 		sts TaskOne+15+2,r26
 503 0122 B093 0000 		sts TaskOne+15+3,r27
 144:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 505               	.LM29:
 506 0126 1092 0000 		sts TaskOne+19,__zero_reg__
 507 012a 1092 0000 		sts TaskOne+19+1,__zero_reg__
 508 012e 1092 0000 		sts TaskOne+19+2,__zero_reg__
 509 0132 1092 0000 		sts TaskOne+19+3,__zero_reg__
 145:main.c        ****   TaskOne.cpu_reserve.nano_secs = 0;
 511               	.LM30:
 512 0136 1092 0000 		sts TaskOne+23,__zero_reg__
 513 013a 1092 0000 		sts TaskOne+23+1,__zero_reg__
 514 013e 1092 0000 		sts TaskOne+23+2,__zero_reg__
 515 0142 1092 0000 		sts TaskOne+23+3,__zero_reg__
 146:main.c        ****   TaskOne.offset.secs = 0;
 517               	.LM31:
 518 0146 1092 0000 		sts TaskOne+27,__zero_reg__
 519 014a 1092 0000 		sts TaskOne+27+1,__zero_reg__
 520 014e 1092 0000 		sts TaskOne+27+2,__zero_reg__
 521 0152 1092 0000 		sts TaskOne+27+3,__zero_reg__
 147:main.c        ****   TaskOne.offset.nano_secs= 0;
 523               	.LM32:
 524 0156 1092 0000 		sts TaskOne+31,__zero_reg__
 525 015a 1092 0000 		sts TaskOne+31+1,__zero_reg__
 526 015e 1092 0000 		sts TaskOne+31+2,__zero_reg__
 527 0162 1092 0000 		sts TaskOne+31+3,__zero_reg__
 148:main.c        ****   nrk_activate_task (&TaskOne);
 529               	.LM33:
 530 0166 80E0      		ldi r24,lo8(TaskOne)
 531 0168 90E0      		ldi r25,hi8(TaskOne)
 532 016a 0E94 0000 		call nrk_activate_task
 149:main.c        **** 
 150:main.c        ****   nrk_task_set_entry_function( &TaskTwo, analyze_Audio_Data);
 534               	.LM34:
 535 016e 60E0      		ldi r22,lo8(gs(analyze_Audio_Data))
 536 0170 70E0      		ldi r23,hi8(gs(analyze_Audio_Data))
 537 0172 80E0      		ldi r24,lo8(TaskTwo)
 538 0174 90E0      		ldi r25,hi8(TaskTwo)
 539 0176 0E94 0000 		call nrk_task_set_entry_function
 151:main.c        ****   nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
 541               	.LM35:
 542 017a 40E8      		ldi r20,lo8(-128)
 543 017c 50E0      		ldi r21,0
 544 017e 60E0      		ldi r22,lo8(Stack2)
 545 0180 70E0      		ldi r23,hi8(Stack2)
 546 0182 80E0      		ldi r24,lo8(TaskTwo)
 547 0184 90E0      		ldi r25,hi8(TaskTwo)
 548 0186 0E94 0000 		call nrk_task_set_stk
 152:main.c        ****   TaskTwo.prio = 2;
 550               	.LM36:
 551 018a 82E0      		ldi r24,lo8(2)
 552 018c 8093 0000 		sts TaskTwo+8,r24
 153:main.c        ****   TaskTwo.FirstActivation = TRUE;
 554               	.LM37:
 555 0190 C093 0000 		sts TaskTwo+7,r28
 154:main.c        ****   TaskTwo.Type = BASIC_TASK;
 557               	.LM38:
 558 0194 C093 0000 		sts TaskTwo+9,r28
 155:main.c        ****   TaskTwo.SchType = PREEMPTIVE;
 560               	.LM39:
 561 0198 C093 0000 		sts TaskTwo+10,r28
 156:main.c        ****   TaskTwo.period.secs = 0;
 563               	.LM40:
 564 019c 1092 0000 		sts TaskTwo+11,__zero_reg__
 565 01a0 1092 0000 		sts TaskTwo+11+1,__zero_reg__
 566 01a4 1092 0000 		sts TaskTwo+11+2,__zero_reg__
 567 01a8 1092 0000 		sts TaskTwo+11+3,__zero_reg__
 157:main.c        ****   TaskTwo.period.nano_secs = 2500*NANOS_PER_MS;
 569               	.LM41:
 570 01ac 80E0      		ldi r24,0
 571 01ae 99EF      		ldi r25,lo8(-7)
 572 01b0 A2E0      		ldi r26,lo8(2)
 573 01b2 B5E9      		ldi r27,lo8(-107)
 574 01b4 8093 0000 		sts TaskTwo+15,r24
 575 01b8 9093 0000 		sts TaskTwo+15+1,r25
 576 01bc A093 0000 		sts TaskTwo+15+2,r26
 577 01c0 B093 0000 		sts TaskTwo+15+3,r27
 158:main.c        ****   TaskTwo.cpu_reserve.secs = 0;
 579               	.LM42:
 580 01c4 1092 0000 		sts TaskTwo+19,__zero_reg__
 581 01c8 1092 0000 		sts TaskTwo+19+1,__zero_reg__
 582 01cc 1092 0000 		sts TaskTwo+19+2,__zero_reg__
 583 01d0 1092 0000 		sts TaskTwo+19+3,__zero_reg__
 159:main.c        ****   TaskTwo.cpu_reserve.nano_secs = 0;
 585               	.LM43:
 586 01d4 1092 0000 		sts TaskTwo+23,__zero_reg__
 587 01d8 1092 0000 		sts TaskTwo+23+1,__zero_reg__
 588 01dc 1092 0000 		sts TaskTwo+23+2,__zero_reg__
 589 01e0 1092 0000 		sts TaskTwo+23+3,__zero_reg__
 160:main.c        ****   TaskTwo.offset.secs = 0;
 591               	.LM44:
 592 01e4 1092 0000 		sts TaskTwo+27,__zero_reg__
 593 01e8 1092 0000 		sts TaskTwo+27+1,__zero_reg__
 594 01ec 1092 0000 		sts TaskTwo+27+2,__zero_reg__
 595 01f0 1092 0000 		sts TaskTwo+27+3,__zero_reg__
 161:main.c        ****   TaskTwo.offset.nano_secs= 0;
 597               	.LM45:
 598 01f4 1092 0000 		sts TaskTwo+31,__zero_reg__
 599 01f8 1092 0000 		sts TaskTwo+31+1,__zero_reg__
 600 01fc 1092 0000 		sts TaskTwo+31+2,__zero_reg__
 601 0200 1092 0000 		sts TaskTwo+31+3,__zero_reg__
 162:main.c        ****   nrk_activate_task (&TaskTwo);
 603               	.LM46:
 604 0204 80E0      		ldi r24,lo8(TaskTwo)
 605 0206 90E0      		ldi r25,hi8(TaskTwo)
 606               	/* epilogue start */
 163:main.c        **** 
 164:main.c        **** }
 608               	.LM47:
 609 0208 CF91      		pop r28
 162:main.c        ****   nrk_activate_task (&TaskTwo);
 611               	.LM48:
 612 020a 0C94 0000 		jmp nrk_activate_task
 614               	.Lscope2:
 616               		.stabd	78,0,0
 618               	.global	nrk_register_drivers
 620               	nrk_register_drivers:
 621               		.stabd	46,0,0
 165:main.c        **** 
 166:main.c        **** void nrk_register_drivers()
 167:main.c        **** {
 623               	.LM49:
 624               	.LFBB3:
 625               	/* prologue: function */
 626               	/* frame size = 0 */
 627               	/* stack size = 0 */
 628               	.L__stack_usage = 0
 168:main.c        **** int8_t val;
 169:main.c        **** 
 170:main.c        **** // Register the Basic FireFly Sensor device driver
 171:main.c        **** // Make sure to add: 
 172:main.c        **** //     #define NRK_MAX_DRIVER_CNT  
 173:main.c        **** //     in nrk_cfg.h
 174:main.c        **** // Make sure to add: 
 175:main.c        **** //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 176:main.c        **** //     in makefile
 177:main.c        **** val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
 630               	.LM50:
 631 020e 63E0      		ldi r22,lo8(3)
 632 0210 80E0      		ldi r24,lo8(gs(dev_manager_ff3_sensors))
 633 0212 90E0      		ldi r25,hi8(gs(dev_manager_ff3_sensors))
 634 0214 0E94 0000 		call nrk_register_driver
 178:main.c        **** if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 636               	.LM51:
 637 0218 8F3F      		cpi r24,lo8(-1)
 638 021a 01F4      		brne .L8
 640               	.LM52:
 641 021c 80E0      		ldi r24,lo8(__c.3175)
 642 021e 90E0      		ldi r25,hi8(__c.3175)
 643 0220 0C94 0000 		jmp nrk_kprintf
 644               	.L8:
 645 0224 0895      		ret
 647               	.Lscope3:
 649               		.stabd	78,0,0
 650               		.section	.rodata.str1.1
 651               	.LC2:
 652 001a 7374 6172 		.string	"starting...\r"
 652      7469 6E67 
 652      2E2E 2E0D 
 652      00
 653               		.section	.text.startup,"ax",@progbits
 655               	.global	main
 657               	main:
 658               		.stabd	46,0,0
  56:main.c        **** {
 660               	.LM53:
 661               	.LFBB4:
 662               	/* prologue: function */
 663               	/* frame size = 0 */
 664               	/* stack size = 0 */
 665               	.L__stack_usage = 0
  58:main.c        ****   nrk_setup_ports();
 667               	.LM54:
 668 0000 0E94 0000 		call nrk_setup_ports
  59:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 670               	.LM55:
 671 0004 80E1      		ldi r24,lo8(16)
 672 0006 90E0      		ldi r25,0
 673 0008 0E94 0000 		call nrk_setup_uart
  62:main.c        ****   printf( PSTR("starting...\r\n") );
 675               	.LM56:
 676 000c 80E0      		ldi r24,lo8(.LC2)
 677 000e 90E0      		ldi r25,hi8(.LC2)
 678 0010 0E94 0000 		call puts
  63:main.c        ****   audio_data_size = 30;
 680               	.LM57:
 681 0014 8EE1      		ldi r24,lo8(30)
 682 0016 8093 0000 		sts audio_data_size,r24
  64:main.c        ****   audio_data = malloc(audio_data_size * (sizeof audio_data[0]));
 684               	.LM58:
 685 001a 8CE3      		ldi r24,lo8(60)
 686 001c 90E0      		ldi r25,0
 687 001e 0E94 0000 		call malloc
 688 0022 8093 0000 		sts audio_data,r24
 689 0026 9093 0000 		sts audio_data+1,r25
  66:main.c        ****   nrk_init();
 691               	.LM59:
 692 002a 0E94 0000 		call nrk_init
  67:main.c        ****   nrk_time_set(0,0);
 694               	.LM60:
 695 002e 20E0      		ldi r18,0
 696 0030 30E0      		ldi r19,0
 697 0032 A901      		movw r20,r18
 698 0034 60E0      		ldi r22,0
 699 0036 70E0      		ldi r23,0
 700 0038 CB01      		movw r24,r22
 701 003a 0E94 0000 		call nrk_time_set
  69:main.c        ****   nrk_register_drivers();
 703               	.LM61:
 704 003e 0E94 0000 		call nrk_register_drivers
  70:main.c        ****   nrk_create_taskset ();
 706               	.LM62:
 707 0042 0E94 0000 		call nrk_create_taskset
  71:main.c        ****   nrk_start();
 709               	.LM63:
 710 0046 0E94 0000 		call nrk_start
  74:main.c        **** }
 712               	.LM64:
 713 004a 80E0      		ldi r24,0
 714 004c 90E0      		ldi r25,0
 715 004e 0895      		ret
 717               	.Lscope4:
 719               		.stabd	78,0,0
 720               	.global	__floatunsisf
 721               		.section	.rodata.str1.1
 722               	.LC3:
 723 0027 7769 6E64 		.string	"window no =%d"
 723      6F77 206E 
 723      6F20 3D25 
 723      6400 
 724               	.global	__fixunssfsi
 725               	.LC4:
 726 0035 2068 6173 		.string	" has rms value =%ld\r\n"
 726      2072 6D73 
 726      2076 616C 
 726      7565 203D 
 726      256C 640D 
 727               		.text
 732               	.global	calculate_rms
 734               	calculate_rms:
 735               		.stabd	46,0,0
 179:main.c        **** 
 180:main.c        **** }
 181:main.c        **** 
 182:main.c        **** uint16_t
 183:main.c        **** calculate_rms(uint16_t audios [], int8_t size, int8_t window_size)
 184:main.c        **** {
 737               	.LM65:
 738               	.LFBB5:
 739 0226 3F92      		push r3
 740 0228 4F92      		push r4
 741 022a 5F92      		push r5
 742 022c 6F92      		push r6
 743 022e 7F92      		push r7
 744 0230 8F92      		push r8
 745 0232 9F92      		push r9
 746 0234 AF92      		push r10
 747 0236 BF92      		push r11
 748 0238 CF92      		push r12
 749 023a DF92      		push r13
 750 023c EF92      		push r14
 751 023e FF92      		push r15
 752 0240 0F93      		push r16
 753 0242 1F93      		push r17
 754 0244 CF93      		push r28
 755 0246 DF93      		push r29
 756               	/* prologue: function */
 757               	/* frame size = 0 */
 758               	/* stack size = 17 */
 759               	.L__stack_usage = 17
 760 0248 EC01      		movw r28,r24
 761 024a 042F      		mov r16,r20
 185:main.c        ****   uint8_t index = 0;
 186:main.c        ****   uint8_t window_count = 0;
 763               	.LM66:
 764 024c 312C      		mov r3,__zero_reg__
 185:main.c        ****   uint8_t index = 0;
 766               	.LM67:
 767 024e 10E0      		ldi r17,0
 187:main.c        **** 
 188:main.c        ****   while(index + window_size <= size)
 769               	.LM68:
 770 0250 442E      		mov r4,r20
 771 0252 5524      		clr r5
 772 0254 47FC      		sbrc r4,7
 773 0256 5094      		com r5
 774 0258 662E      		mov r6,r22
 775 025a 7724      		clr r7
 776 025c 67FC      		sbrc r6,7
 777 025e 7094      		com r7
 778               	.LBB2:
 189:main.c        ****   {
 190:main.c        ****     uint32_t rawrms  =0;
 191:main.c        ****     uint32_t rms  = 0;
 192:main.c        **** 
 193:main.c        ****     for(uint8_t count = index ; count < index + window_size ; count++ )
 194:main.c        ****     {
 195:main.c        ****       rawrms += (uint32_t)audios[count] * (uint32_t)audios[count];
 196:main.c        ****     }
 197:main.c        **** 
 198:main.c        ****     rms = rawrms / window_size ;
 780               	.LM69:
 781 0260 842E      		mov r8,r20
 782 0262 9924      		clr r9
 783 0264 87FC      		sbrc r8,7
 784 0266 9094      		com r9
 785 0268 A92C      		mov r10,r9
 786 026a B92C      		mov r11,r9
 787               	.LBE2:
 188:main.c        ****   while(index + window_size <= size)
 789               	.LM70:
 790 026c 00C0      		rjmp .L12
 791               	.L13:
 792               	.LBB5:
 793               	.LBB3:
 195:main.c        ****       rawrms += (uint32_t)audios[count] * (uint32_t)audios[count];
 795               	.LM71:
 796 026e AA0F      		lsl r26
 797 0270 BB1F      		rol r27
 798 0272 AC0F      		add r26,r28
 799 0274 BD1F      		adc r27,r29
 800 0276 0D90      		ld __tmp_reg__,X+
 801 0278 BC91      		ld r27,X
 802 027a A02D      		mov r26,__tmp_reg__
 803 027c 9D01      		movw r18,r26
 804 027e 0E94 0000 		call __umulhisi3
 805 0282 C60E      		add r12,r22
 806 0284 D71E      		adc r13,r23
 807 0286 E81E      		adc r14,r24
 808 0288 F91E      		adc r15,r25
 193:main.c        ****     for(uint8_t count = index ; count < index + window_size ; count++ )
 810               	.LM72:
 811 028a 4F5F      		subi r20,lo8(-(1))
 812 028c 00C0      		rjmp .L14
 813               	.L15:
 814               	.LBE3:
 815               	.LBE5:
 188:main.c        ****   while(index + window_size <= size)
 817               	.LM73:
 818 028e 412F      		mov r20,r17
 819 0290 C12C      		mov r12,__zero_reg__
 820 0292 D12C      		mov r13,__zero_reg__
 821 0294 7601      		movw r14,r12
 822               	.L14:
 823               	.LBB6:
 824               	.LBB4:
 193:main.c        ****     for(uint8_t count = index ; count < index + window_size ; count++ )
 826               	.LM74:
 827 0296 A42F      		mov r26,r20
 828 0298 B0E0      		ldi r27,0
 829 029a AE17      		cp r26,r30
 830 029c BF07      		cpc r27,r31
 831 029e 04F0      		brlt .L13
 832               	.LBE4:
 834               	.LM75:
 835 02a0 C701      		movw r24,r14
 836 02a2 B601      		movw r22,r12
 837 02a4 A501      		movw r20,r10
 838 02a6 9401      		movw r18,r8
 839 02a8 0E94 0000 		call __udivmodsi4
 199:main.c        ****     rms = sqrt(rms) ;
 841               	.LM76:
 842 02ac CA01      		movw r24,r20
 843 02ae B901      		movw r22,r18
 844 02b0 0E94 0000 		call __floatunsisf
 845 02b4 0E94 0000 		call sqrt
 846 02b8 6B01      		movw r12,r22
 847 02ba 7C01      		movw r14,r24
 200:main.c        **** 
 201:main.c        ****     // No conversion needed as a =1 and b =0 in linear transformation
 202:main.c        ****     printf( "window no =%d", window_count);
 849               	.LM77:
 850 02bc 1F92      		push __zero_reg__
 851 02be 3F92      		push r3
 852 02c0 80E0      		ldi r24,lo8(.LC3)
 853 02c2 90E0      		ldi r25,hi8(.LC3)
 854 02c4 9F93      		push r25
 855 02c6 8F93      		push r24
 856 02c8 0E94 0000 		call printf
 199:main.c        ****     rms = sqrt(rms) ;
 858               	.LM78:
 859 02cc C701      		movw r24,r14
 860 02ce B601      		movw r22,r12
 861 02d0 0E94 0000 		call __fixunssfsi
 203:main.c        ****     printf( " has rms value =%ld\r\n",rms);
 863               	.LM79:
 864 02d4 9F93      		push r25
 865 02d6 8F93      		push r24
 866 02d8 7F93      		push r23
 867 02da 6F93      		push r22
 868 02dc 80E0      		ldi r24,lo8(.LC4)
 869 02de 90E0      		ldi r25,hi8(.LC4)
 870 02e0 9F93      		push r25
 871 02e2 8F93      		push r24
 872 02e4 0E94 0000 		call printf
 204:main.c        **** 
 205:main.c        ****     window_count++;
 874               	.LM80:
 875 02e8 3394      		inc r3
 183:main.c        **** calculate_rms(uint16_t audios [], int8_t size, int8_t window_size)
 877               	.LM81:
 878 02ea 100F      		add r17,r16
 879 02ec 8DB7      		in r24,__SP_L__
 880 02ee 9EB7      		in r25,__SP_H__
 881 02f0 0A96      		adiw r24,10
 882 02f2 0FB6      		in __tmp_reg__,__SREG__
 883 02f4 F894      		cli
 884 02f6 9EBF      		out __SP_H__,r25
 885 02f8 0FBE      		out __SREG__,__tmp_reg__
 886 02fa 8DBF      		out __SP_L__,r24
 887               	.L12:
 888               	.LBE6:
 188:main.c        ****   while(index + window_size <= size)
 890               	.LM82:
 891 02fc F201      		movw r30,r4
 892 02fe E10F      		add r30,r17
 893 0300 F11D      		adc r31,__zero_reg__
 894 0302 6E16      		cp r6,r30
 895 0304 7F06      		cpc r7,r31
 896 0306 04F4      		brge .L15
 206:main.c        ****     index = index + window_size;
 207:main.c        ****   }
 208:main.c        **** 
 209:main.c        ****   return 0;
 210:main.c        **** }
 898               	.LM83:
 899 0308 80E0      		ldi r24,0
 900 030a 90E0      		ldi r25,0
 901               	/* epilogue start */
 902 030c DF91      		pop r29
 903 030e CF91      		pop r28
 904 0310 1F91      		pop r17
 905 0312 0F91      		pop r16
 906 0314 FF90      		pop r15
 907 0316 EF90      		pop r14
 908 0318 DF90      		pop r13
 909 031a CF90      		pop r12
 910 031c BF90      		pop r11
 911 031e AF90      		pop r10
 912 0320 9F90      		pop r9
 913 0322 8F90      		pop r8
 914 0324 7F90      		pop r7
 915 0326 6F90      		pop r6
 916 0328 5F90      		pop r5
 917 032a 4F90      		pop r4
 918 032c 3F90      		pop r3
 919 032e 0895      		ret
 940               	.Lscope5:
 942               		.stabd	78,0,0
 944               	.global	analyze_Audio_Data
 946               	analyze_Audio_Data:
 947               		.stabd	46,0,0
 113:main.c        **** {
 949               	.LM84:
 950               	.LFBB6:
 951               	/* prologue: function */
 952               	/* frame size = 0 */
 953               	/* stack size = 0 */
 954               	.L__stack_usage = 0
 114:main.c        ****   printf( "Task PID=%u\r\n",nrk_get_pid());
 956               	.LM85:
 957 0330 0E94 0000 		call nrk_get_pid
 958 0334 1F92      		push __zero_reg__
 959 0336 8F93      		push r24
 960 0338 80E0      		ldi r24,lo8(.LC0)
 961 033a 90E0      		ldi r25,hi8(.LC0)
 962 033c 9F93      		push r25
 963 033e 8F93      		push r24
 964 0340 0E94 0000 		call printf
 965 0344 0F90      		pop __tmp_reg__
 966 0346 0F90      		pop __tmp_reg__
 967 0348 0F90      		pop __tmp_reg__
 968 034a 0F90      		pop __tmp_reg__
 969               	.L17:
 970               	.LBB7:
 119:main.c        ****   	nrk_led_clr(BLUE_LED);
 972               	.LM86:
 973 034c 83E0      		ldi r24,lo8(3)
 974 034e 90E0      		ldi r25,0
 975 0350 0E94 0000 		call nrk_led_clr
 120:main.c        ****   	nrk_led_clr(RED_LED);
 977               	.LM87:
 978 0354 80E0      		ldi r24,0
 979 0356 90E0      		ldi r25,0
 980 0358 0E94 0000 		call nrk_led_clr
 121:main.c        **** 	  nrk_led_toggle(BLUE_LED);
 982               	.LM88:
 983 035c 83E0      		ldi r24,lo8(3)
 984 035e 90E0      		ldi r25,0
 985 0360 0E94 0000 		call nrk_led_toggle
 125:main.c        ****   	uint16_t rms = calculate_rms(audio_data, audio_data_size, 10);
 987               	.LM89:
 988 0364 4AE0      		ldi r20,lo8(10)
 989 0366 6091 0000 		lds r22,audio_data_size
 990 036a 8091 0000 		lds r24,audio_data
 991 036e 9091 0000 		lds r25,audio_data+1
 992 0372 0E94 0000 		call calculate_rms
 127:main.c        **** 	  nrk_wait_until_next_period();
 994               	.LM90:
 995 0376 0E94 0000 		call nrk_wait_until_next_period
 996 037a 00C0      		rjmp .L17
 997               	.LBE7:
 999               	.Lscope6:
 1001               		.stabd	78,0,0
 1002               		.comm	audio_data_size,1,1
 1003               		.comm	audio_data,2,1
 1004               		.comm	TaskTwo,35,1
 1005               		.comm	TaskOne,35,1
 1006               		.comm	Stack2,128,1
 1007               		.comm	Stack1,128,1
 1008               		.comm	app_timer0_prescale,1,1
 1009               		.comm	app_timer0_callback,2,1
 1010               		.comm	_nrk_time_trigger,1,1
 1011               		.comm	_nrk_prev_timer_val,1,1
 1012               		.comm	error_num,1,1
 1013               		.comm	error_task,1,1
 1014               		.comm	nrk_kernel_stk_ptr,2,1
 1015               		.comm	nrk_idle_task_stk,128,1
 1016               		.comm	_nrk_signal_list,4,1
 1017               		.section	.progmem.data,"a",@progbits
 1020               	__c.3162:
 1021 0000 4661 696C 		.string	"Failed to open sensor driver\r\n"
 1021      6564 2074 
 1021      6F20 6F70 
 1021      656E 2073 
 1021      656E 736F 
 1024               	__c.3175:
 1025 001f 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 1025      6564 2074 
 1025      6F20 6C6F 
 1025      6164 206D 
 1025      7920 4144 
 1041               		.text
 1043               	.Letext0:
 1044               		.ident	"GCC: (GNU) 4.7.2"
 1045               	.global __do_copy_data
 1046               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:4      *ABS*:000000000000003f __SREG__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:300    .text:0000000000000000 collect_Audio_Data
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:1020   .progmem.data:0000000000000000 __c.3162
                            *COM*:0000000000000002 audio_data
                            *COM*:0000000000000001 audio_data_size
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:440    .text:00000000000000be nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:946    .text:0000000000000330 analyze_Audio_Data
                            *COM*:0000000000000023 TaskTwo
                            *COM*:0000000000000080 Stack2
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:620    .text:000000000000020e nrk_register_drivers
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:1024   .progmem.data:000000000000001f __c.3175
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:657    .text.startup:0000000000000000 main
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccvwk65q.s:734    .text:0000000000000226 calculate_rms
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_get_pid
printf
nrk_open
nrk_kprintf
nrk_set_status
nrk_spin_wait_us
nrk_read
nrk_led_clr
nrk_led_toggle
nrk_wait_until_next_period
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
dev_manager_ff3_sensors
nrk_register_driver
nrk_setup_ports
nrk_setup_uart
puts
malloc
nrk_init
nrk_time_set
nrk_start
__floatunsisf
__fixunssfsi
__umulhisi3
__udivmodsi4
sqrt
__do_copy_data
__do_clear_bss
