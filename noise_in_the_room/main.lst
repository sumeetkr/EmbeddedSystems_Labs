   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
 291               		.section	.rodata.str1.1,"aMS",@progbits,1
 292               	.LC0:
 293 0000 2061 7564 		.string	" audio=%d\r\n"
 293      696F 3D25 
 293      640D 0A00 
 294               		.text
 296               	.global	collect_Audio_Data
 298               	collect_Audio_Data:
 299               		.stabd	46,0,0
   1:main.c        **** /******************************************************************************
   2:main.c        **** *  Nano-RK, a real-time operating system for sensor networks.
   3:main.c        **** *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:main.c        **** *  All rights reserved.
   5:main.c        **** *
   6:main.c        **** *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:main.c        **** *  Licensing Model. If you are unsure which license to use please refer to:
   8:main.c        **** *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:main.c        **** *
  10:main.c        **** *  This program is free software: you can redistribute it and/or modify
  11:main.c        **** *  it under the terms of the GNU General Public License as published by
  12:main.c        **** *  the Free Software Foundation, version 2.0 of the License.
  13:main.c        **** *
  14:main.c        **** *  This program is distributed in the hope that it will be useful,
  15:main.c        **** *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:main.c        **** *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:main.c        **** *  GNU General Public License for more details.
  18:main.c        **** *
  19:main.c        **** *  You should have received a copy of the GNU General Public License
  20:main.c        **** *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:main.c        **** *
  22:main.c        **** *  Contributing Authors (specific to this file):
  23:main.c        **** *  Zane Starr
  24:main.c        **** *******************************************************************************/
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        **** #include <nrk.h>
  28:main.c        **** #include <include.h>
  29:main.c        **** #include <ulib.h>
  30:main.c        **** #include <stdio.h>
  31:main.c        **** #include <avr/sleep.h>
  32:main.c        **** #include <hal.h>
  33:main.c        **** #include <nrk_error.h>
  34:main.c        **** #include <nrk_timer.h>
  35:main.c        **** #include <nrk_driver_list.h>
  36:main.c        **** #include <nrk_driver.h>
  37:main.c        **** #include <ff_basic_sensor.h>
  38:main.c        **** 
  39:main.c        **** NRK_STK Stack1[NRK_APP_STACKSIZE];
  40:main.c        **** NRK_STK Stack2[NRK_APP_STACKSIZE];
  41:main.c        **** nrk_task_type TaskOne;
  42:main.c        **** nrk_task_type TaskTwo;
  43:main.c        **** 
  44:main.c        **** void collect_Audio_Data(void);
  45:main.c        **** uint16_t calculate_rms(uint16_t audios [], int8_t size, int8_t window_size);
  46:main.c        **** void analyze_Audio_Data(void);
  47:main.c        **** 
  48:main.c        **** void nrk_create_taskset();
  49:main.c        **** void nrk_register_drivers();
  50:main.c        **** uint8_t kill_stack(uint8_t val);
  51:main.c        **** uint16_t * audio_data;
  52:main.c        **** int8_t audio_data_size;
  53:main.c        **** 
  54:main.c        **** int
  55:main.c        **** main ()
  56:main.c        **** {
  57:main.c        ****   uint8_t t;
  58:main.c        ****   nrk_setup_ports();
  59:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
  60:main.c        **** 
  61:main.c        **** 
  62:main.c        ****   printf( PSTR("starting...\r\n") );
  63:main.c        ****   audio_data_size = 30;
  64:main.c        ****   audio_data = malloc(audio_data_size * (sizeof audio_data[0]));
  65:main.c        **** 
  66:main.c        ****   nrk_init();
  67:main.c        ****   nrk_time_set(0,0);
  68:main.c        **** 
  69:main.c        ****   nrk_register_drivers();
  70:main.c        ****   nrk_create_taskset ();
  71:main.c        ****   nrk_start();
  72:main.c        ****   
  73:main.c        ****   return 0;
  74:main.c        **** }
  75:main.c        **** 
  76:main.c        **** 
  77:main.c        **** void 
  78:main.c        **** collect_Audio_Data(){
 301               	.LM0:
 302               	.LFBB1:
 303 0000 CF93      		push r28
 304 0002 DF93      		push r29
 305 0004 00D0      		rcall .
 306 0006 CDB7      		in r28,__SP_L__
 307 0008 DEB7      		in r29,__SP_H__
 308               	/* prologue: function */
 309               	/* frame size = 2 */
 310               	/* stack size = 4 */
 311               	.L__stack_usage = 4
  79:main.c        **** 
  80:main.c        **** int8_t fd, val, index;
  81:main.c        **** uint16_t buf;
  82:main.c        **** 
  83:main.c        **** // Open ADC device as read 
  84:main.c        **** fd=nrk_open(FIREFLY_3_SENSOR_BASIC,READ);
 313               	.LM1:
 314 000a 65E0      		ldi r22,lo8(5)
 315 000c 83E0      		ldi r24,lo8(3)
 316 000e 0E94 0000 		call nrk_open
 317 0012 E82E      		mov r14,r24
  85:main.c        **** if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 319               	.LM2:
 320 0014 8FEF      		ldi r24,lo8(-1)
 321 0016 E812      		cpse r14,r24
 322 0018 00C0      		rjmp .L4
 324               	.LM3:
 325 001a 80E0      		ldi r24,lo8(__c.3162)
 326 001c 90E0      		ldi r25,hi8(__c.3162)
 327 001e 0E94 0000 		call nrk_kprintf
 328               	.L4:
  86:main.c        **** 
  87:main.c        **** 	while(1)
  88:main.c        **** 	{
  89:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,AUDIO_P2P);
  90:main.c        **** 		nrk_spin_wait_us(60000);
  91:main.c        **** 		val=nrk_read(fd,&buf,2);
  92:main.c        **** 		printf( " audio=%d\r\n",buf);
 330               	.LM4:
 331 0022 00E0      		ldi r16,lo8(.LC0)
 332 0024 10E0      		ldi r17,hi8(.LC0)
 333               	.L6:
  89:main.c        **** 		val=nrk_set_status(fd,SENSOR_SELECT,AUDIO_P2P);
 335               	.LM5:
 336 0026 4CE0      		ldi r20,lo8(12)
 337 0028 61E0      		ldi r22,lo8(1)
 338 002a 8E2D      		mov r24,r14
 339 002c 0E94 0000 		call nrk_set_status
  90:main.c        **** 		nrk_spin_wait_us(60000);
 341               	.LM6:
 342 0030 80E6      		ldi r24,lo8(96)
 343 0032 9AEE      		ldi r25,lo8(-22)
 344 0034 0E94 0000 		call nrk_spin_wait_us
  91:main.c        **** 		val=nrk_read(fd,&buf,2);
 346               	.LM7:
 347 0038 42E0      		ldi r20,lo8(2)
 348 003a BE01      		movw r22,r28
 349 003c 6F5F      		subi r22,-1
 350 003e 7F4F      		sbci r23,-1
 351 0040 8E2D      		mov r24,r14
 352 0042 0E94 0000 		call nrk_read
 354               	.LM8:
 355 0046 8A81      		ldd r24,Y+2
 356 0048 8F93      		push r24
 357 004a 8981      		ldd r24,Y+1
 358 004c 8F93      		push r24
 359 004e 1F93      		push r17
 360 0050 0F93      		push r16
 361 0052 0E94 0000 		call printf
  93:main.c        **** 
  94:main.c        **** 		nrk_led_clr(BLUE_LED);
 363               	.LM9:
 364 0056 83E0      		ldi r24,lo8(3)
 365 0058 90E0      		ldi r25,0
 366 005a 0E94 0000 		call nrk_led_clr
  95:main.c        **** 		nrk_led_clr(RED_LED);
 368               	.LM10:
 369 005e 80E0      		ldi r24,0
 370 0060 90E0      		ldi r25,0
 371 0062 0E94 0000 		call nrk_led_clr
  96:main.c        **** 		nrk_led_toggle(RED_LED);
 373               	.LM11:
 374 0066 80E0      		ldi r24,0
 375 0068 90E0      		ldi r25,0
 376 006a 0E94 0000 		call nrk_led_toggle
  97:main.c        **** 
  98:main.c        **** 		audio_data[index] = buf;
 378               	.LM12:
 379 006e 2981      		ldd r18,Y+1
 380 0070 3A81      		ldd r19,Y+2
 381 0072 4F2D      		mov r20,r15
 382 0074 440F      		lsl r20
 383 0076 550B      		sbc r21,r21
 384 0078 E091 0000 		lds r30,audio_data
 385 007c F091 0000 		lds r31,audio_data+1
 386 0080 E40F      		add r30,r20
 387 0082 F51F      		adc r31,r21
 388 0084 3183      		std Z+1,r19
 389 0086 2083      		st Z,r18
  99:main.c        **** 		index++;
 391               	.LM13:
 392 0088 F394      		inc r15
 100:main.c        **** 
 101:main.c        **** 		if(index == audio_data_size)
 394               	.LM14:
 395 008a 0F90      		pop __tmp_reg__
 396 008c 0F90      		pop __tmp_reg__
 397 008e 0F90      		pop __tmp_reg__
 398 0090 0F90      		pop __tmp_reg__
 399 0092 8091 0000 		lds r24,audio_data_size
 400 0096 F812      		cpse r15,r24
 401 0098 00C0      		rjmp .L3
 102:main.c        **** 		{
 103:main.c        **** 			index =0;
 403               	.LM15:
 404 009a F12C      		mov r15,__zero_reg__
 405               	.L3:
 104:main.c        **** 		}
 105:main.c        **** 
 106:main.c        **** 		nrk_wait_until_next_period();
 407               	.LM16:
 408 009c 0E94 0000 		call nrk_wait_until_next_period
 107:main.c        **** 	}
 410               	.LM17:
 411 00a0 00C0      		rjmp .L6
 418               	.Lscope1:
 420               		.stabd	78,0,0
 422               	.global	nrk_create_taskset
 424               	nrk_create_taskset:
 425               		.stabd	46,0,0
 108:main.c        **** }
 109:main.c        **** 
 110:main.c        **** void
 111:main.c        **** analyze_Audio_Data()
 112:main.c        **** {
 113:main.c        ****  int16_t cnt;
 114:main.c        ****   printf( "Task2 PID=%u\r\n",nrk_get_pid());
 115:main.c        ****   cnt=0;
 116:main.c        ****   while(1) {
 117:main.c        **** 
 118:main.c        ****   	nrk_led_clr(BLUE_LED);
 119:main.c        ****   	nrk_led_clr(RED_LED);
 120:main.c        **** 	  nrk_led_toggle(BLUE_LED);
 121:main.c        **** 	// printf( "Task2 signed cnt=%d\r\n",cnt );
 122:main.c        ****   	printf( "%u\r\n", 2);
 123:main.c        **** 
 124:main.c        ****   	uint16_t rms = calculate_rms(audio_data, audio_data_size, 10);
 125:main.c        **** 	//nrk_stats_display_pid(nrk_get_pid());
 126:main.c        **** 	nrk_wait_until_next_period();
 127:main.c        **** 	cnt--;
 128:main.c        **** 	}
 129:main.c        **** }
 130:main.c        **** 
 131:main.c        **** void
 132:main.c        **** nrk_create_taskset()
 133:main.c        **** {
 427               	.LM18:
 428               	.LFBB2:
 429 00a2 CF93      		push r28
 430               	/* prologue: function */
 431               	/* frame size = 0 */
 432               	/* stack size = 1 */
 433               	.L__stack_usage = 1
 134:main.c        ****  nrk_task_set_entry_function( &TaskOne, collect_Audio_Data);
 435               	.LM19:
 436 00a4 60E0      		ldi r22,lo8(gs(collect_Audio_Data))
 437 00a6 70E0      		ldi r23,hi8(gs(collect_Audio_Data))
 438 00a8 80E0      		ldi r24,lo8(TaskOne)
 439 00aa 90E0      		ldi r25,hi8(TaskOne)
 440 00ac 0E94 0000 		call nrk_task_set_entry_function
 135:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 442               	.LM20:
 443 00b0 40E8      		ldi r20,lo8(-128)
 444 00b2 50E0      		ldi r21,0
 445 00b4 60E0      		ldi r22,lo8(Stack1)
 446 00b6 70E0      		ldi r23,hi8(Stack1)
 447 00b8 80E0      		ldi r24,lo8(TaskOne)
 448 00ba 90E0      		ldi r25,hi8(TaskOne)
 449 00bc 0E94 0000 		call nrk_task_set_stk
 136:main.c        ****   nrk_task_set_stk( &TaskOne, Stack1, NRK_APP_STACKSIZE);
 451               	.LM21:
 452 00c0 40E8      		ldi r20,lo8(-128)
 453 00c2 50E0      		ldi r21,0
 454 00c4 60E0      		ldi r22,lo8(Stack1)
 455 00c6 70E0      		ldi r23,hi8(Stack1)
 456 00c8 80E0      		ldi r24,lo8(TaskOne)
 457 00ca 90E0      		ldi r25,hi8(TaskOne)
 458 00cc 0E94 0000 		call nrk_task_set_stk
 137:main.c        ****   TaskOne.prio = 1;
 460               	.LM22:
 461 00d0 C1E0      		ldi r28,lo8(1)
 462 00d2 C093 0000 		sts TaskOne+8,r28
 138:main.c        ****   TaskOne.FirstActivation = TRUE;
 464               	.LM23:
 465 00d6 C093 0000 		sts TaskOne+7,r28
 139:main.c        ****   TaskOne.Type = BASIC_TASK;
 467               	.LM24:
 468 00da C093 0000 		sts TaskOne+9,r28
 140:main.c        ****   TaskOne.SchType = PREEMPTIVE;
 470               	.LM25:
 471 00de C093 0000 		sts TaskOne+10,r28
 141:main.c        ****   TaskOne.period.secs = 0;
 473               	.LM26:
 474 00e2 1092 0000 		sts TaskOne+11,__zero_reg__
 475 00e6 1092 0000 		sts TaskOne+11+1,__zero_reg__
 476 00ea 1092 0000 		sts TaskOne+11+2,__zero_reg__
 477 00ee 1092 0000 		sts TaskOne+11+3,__zero_reg__
 142:main.c        ****   TaskOne.period.nano_secs = 2*NANOS_PER_MS; //*NANOS_PER_MS;
 479               	.LM27:
 480 00f2 80E8      		ldi r24,lo8(-128)
 481 00f4 94E8      		ldi r25,lo8(-124)
 482 00f6 AEE1      		ldi r26,lo8(30)
 483 00f8 B0E0      		ldi r27,0
 484 00fa 8093 0000 		sts TaskOne+15,r24
 485 00fe 9093 0000 		sts TaskOne+15+1,r25
 486 0102 A093 0000 		sts TaskOne+15+2,r26
 487 0106 B093 0000 		sts TaskOne+15+3,r27
 143:main.c        ****   TaskOne.cpu_reserve.secs = 0;
 489               	.LM28:
 490 010a 1092 0000 		sts TaskOne+19,__zero_reg__
 491 010e 1092 0000 		sts TaskOne+19+1,__zero_reg__
 492 0112 1092 0000 		sts TaskOne+19+2,__zero_reg__
 493 0116 1092 0000 		sts TaskOne+19+3,__zero_reg__
 144:main.c        ****   TaskOne.cpu_reserve.nano_secs = 0;
 495               	.LM29:
 496 011a 1092 0000 		sts TaskOne+23,__zero_reg__
 497 011e 1092 0000 		sts TaskOne+23+1,__zero_reg__
 498 0122 1092 0000 		sts TaskOne+23+2,__zero_reg__
 499 0126 1092 0000 		sts TaskOne+23+3,__zero_reg__
 145:main.c        ****   TaskOne.offset.secs = 0;
 501               	.LM30:
 502 012a 1092 0000 		sts TaskOne+27,__zero_reg__
 503 012e 1092 0000 		sts TaskOne+27+1,__zero_reg__
 504 0132 1092 0000 		sts TaskOne+27+2,__zero_reg__
 505 0136 1092 0000 		sts TaskOne+27+3,__zero_reg__
 146:main.c        ****   TaskOne.offset.nano_secs= 0;
 507               	.LM31:
 508 013a 1092 0000 		sts TaskOne+31,__zero_reg__
 509 013e 1092 0000 		sts TaskOne+31+1,__zero_reg__
 510 0142 1092 0000 		sts TaskOne+31+2,__zero_reg__
 511 0146 1092 0000 		sts TaskOne+31+3,__zero_reg__
 147:main.c        ****   nrk_activate_task (&TaskOne);
 513               	.LM32:
 514 014a 80E0      		ldi r24,lo8(TaskOne)
 515 014c 90E0      		ldi r25,hi8(TaskOne)
 516 014e 0E94 0000 		call nrk_activate_task
 148:main.c        **** 
 149:main.c        ****   nrk_task_set_entry_function( &TaskTwo, analyze_Audio_Data);
 518               	.LM33:
 519 0152 60E0      		ldi r22,lo8(gs(analyze_Audio_Data))
 520 0154 70E0      		ldi r23,hi8(gs(analyze_Audio_Data))
 521 0156 80E0      		ldi r24,lo8(TaskTwo)
 522 0158 90E0      		ldi r25,hi8(TaskTwo)
 523 015a 0E94 0000 		call nrk_task_set_entry_function
 150:main.c        ****   nrk_task_set_stk( &TaskTwo, Stack2, NRK_APP_STACKSIZE);
 525               	.LM34:
 526 015e 40E8      		ldi r20,lo8(-128)
 527 0160 50E0      		ldi r21,0
 528 0162 60E0      		ldi r22,lo8(Stack2)
 529 0164 70E0      		ldi r23,hi8(Stack2)
 530 0166 80E0      		ldi r24,lo8(TaskTwo)
 531 0168 90E0      		ldi r25,hi8(TaskTwo)
 532 016a 0E94 0000 		call nrk_task_set_stk
 151:main.c        ****   TaskTwo.prio = 2;
 534               	.LM35:
 535 016e 82E0      		ldi r24,lo8(2)
 536 0170 8093 0000 		sts TaskTwo+8,r24
 152:main.c        ****   TaskTwo.FirstActivation = TRUE;
 538               	.LM36:
 539 0174 C093 0000 		sts TaskTwo+7,r28
 153:main.c        ****   TaskTwo.Type = BASIC_TASK;
 541               	.LM37:
 542 0178 C093 0000 		sts TaskTwo+9,r28
 154:main.c        ****   TaskTwo.SchType = PREEMPTIVE;
 544               	.LM38:
 545 017c C093 0000 		sts TaskTwo+10,r28
 155:main.c        ****   TaskTwo.period.secs = 0;
 547               	.LM39:
 548 0180 1092 0000 		sts TaskTwo+11,__zero_reg__
 549 0184 1092 0000 		sts TaskTwo+11+1,__zero_reg__
 550 0188 1092 0000 		sts TaskTwo+11+2,__zero_reg__
 551 018c 1092 0000 		sts TaskTwo+11+3,__zero_reg__
 156:main.c        ****   TaskTwo.period.nano_secs = 2500*NANOS_PER_MS;
 553               	.LM40:
 554 0190 80E0      		ldi r24,0
 555 0192 99EF      		ldi r25,lo8(-7)
 556 0194 A2E0      		ldi r26,lo8(2)
 557 0196 B5E9      		ldi r27,lo8(-107)
 558 0198 8093 0000 		sts TaskTwo+15,r24
 559 019c 9093 0000 		sts TaskTwo+15+1,r25
 560 01a0 A093 0000 		sts TaskTwo+15+2,r26
 561 01a4 B093 0000 		sts TaskTwo+15+3,r27
 157:main.c        ****   TaskTwo.cpu_reserve.secs = 0;
 563               	.LM41:
 564 01a8 1092 0000 		sts TaskTwo+19,__zero_reg__
 565 01ac 1092 0000 		sts TaskTwo+19+1,__zero_reg__
 566 01b0 1092 0000 		sts TaskTwo+19+2,__zero_reg__
 567 01b4 1092 0000 		sts TaskTwo+19+3,__zero_reg__
 158:main.c        ****   TaskTwo.cpu_reserve.nano_secs = 0;
 569               	.LM42:
 570 01b8 1092 0000 		sts TaskTwo+23,__zero_reg__
 571 01bc 1092 0000 		sts TaskTwo+23+1,__zero_reg__
 572 01c0 1092 0000 		sts TaskTwo+23+2,__zero_reg__
 573 01c4 1092 0000 		sts TaskTwo+23+3,__zero_reg__
 159:main.c        ****   TaskTwo.offset.secs = 0;
 575               	.LM43:
 576 01c8 1092 0000 		sts TaskTwo+27,__zero_reg__
 577 01cc 1092 0000 		sts TaskTwo+27+1,__zero_reg__
 578 01d0 1092 0000 		sts TaskTwo+27+2,__zero_reg__
 579 01d4 1092 0000 		sts TaskTwo+27+3,__zero_reg__
 160:main.c        ****   TaskTwo.offset.nano_secs= 0;
 581               	.LM44:
 582 01d8 1092 0000 		sts TaskTwo+31,__zero_reg__
 583 01dc 1092 0000 		sts TaskTwo+31+1,__zero_reg__
 584 01e0 1092 0000 		sts TaskTwo+31+2,__zero_reg__
 585 01e4 1092 0000 		sts TaskTwo+31+3,__zero_reg__
 161:main.c        ****   nrk_activate_task (&TaskTwo);
 587               	.LM45:
 588 01e8 80E0      		ldi r24,lo8(TaskTwo)
 589 01ea 90E0      		ldi r25,hi8(TaskTwo)
 590               	/* epilogue start */
 162:main.c        **** 
 163:main.c        **** }
 592               	.LM46:
 593 01ec CF91      		pop r28
 161:main.c        ****   nrk_activate_task (&TaskTwo);
 595               	.LM47:
 596 01ee 0C94 0000 		jmp nrk_activate_task
 598               	.Lscope2:
 600               		.stabd	78,0,0
 602               	.global	nrk_register_drivers
 604               	nrk_register_drivers:
 605               		.stabd	46,0,0
 164:main.c        **** 
 165:main.c        **** void nrk_register_drivers()
 166:main.c        **** {
 607               	.LM48:
 608               	.LFBB3:
 609               	/* prologue: function */
 610               	/* frame size = 0 */
 611               	/* stack size = 0 */
 612               	.L__stack_usage = 0
 167:main.c        **** int8_t val;
 168:main.c        **** 
 169:main.c        **** // Register the Basic FireFly Sensor device driver
 170:main.c        **** // Make sure to add: 
 171:main.c        **** //     #define NRK_MAX_DRIVER_CNT  
 172:main.c        **** //     in nrk_cfg.h
 173:main.c        **** // Make sure to add: 
 174:main.c        **** //     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 175:main.c        **** //     in makefile
 176:main.c        **** val=nrk_register_driver( &dev_manager_ff3_sensors,FIREFLY_3_SENSOR_BASIC);
 614               	.LM49:
 615 01f2 63E0      		ldi r22,lo8(3)
 616 01f4 80E0      		ldi r24,lo8(gs(dev_manager_ff3_sensors))
 617 01f6 90E0      		ldi r25,hi8(gs(dev_manager_ff3_sensors))
 618 01f8 0E94 0000 		call nrk_register_driver
 177:main.c        **** if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 620               	.LM50:
 621 01fc 8F3F      		cpi r24,lo8(-1)
 622 01fe 01F4      		brne .L8
 624               	.LM51:
 625 0200 80E0      		ldi r24,lo8(__c.3175)
 626 0202 90E0      		ldi r25,hi8(__c.3175)
 627 0204 0C94 0000 		jmp nrk_kprintf
 628               	.L8:
 629 0208 0895      		ret
 631               	.Lscope3:
 633               		.stabd	78,0,0
 634               		.section	.rodata.str1.1
 635               	.LC1:
 636 000c 7374 6172 		.string	"starting...\r"
 636      7469 6E67 
 636      2E2E 2E0D 
 636      00
 637               		.section	.text.startup,"ax",@progbits
 639               	.global	main
 641               	main:
 642               		.stabd	46,0,0
  56:main.c        **** {
 644               	.LM52:
 645               	.LFBB4:
 646               	/* prologue: function */
 647               	/* frame size = 0 */
 648               	/* stack size = 0 */
 649               	.L__stack_usage = 0
  58:main.c        ****   nrk_setup_ports();
 651               	.LM53:
 652 0000 0E94 0000 		call nrk_setup_ports
  59:main.c        ****   nrk_setup_uart(UART_BAUDRATE_115K2);
 654               	.LM54:
 655 0004 80E1      		ldi r24,lo8(16)
 656 0006 90E0      		ldi r25,0
 657 0008 0E94 0000 		call nrk_setup_uart
  62:main.c        ****   printf( PSTR("starting...\r\n") );
 659               	.LM55:
 660 000c 80E0      		ldi r24,lo8(.LC1)
 661 000e 90E0      		ldi r25,hi8(.LC1)
 662 0010 0E94 0000 		call puts
  63:main.c        ****   audio_data_size = 30;
 664               	.LM56:
 665 0014 8EE1      		ldi r24,lo8(30)
 666 0016 8093 0000 		sts audio_data_size,r24
  64:main.c        ****   audio_data = malloc(audio_data_size * (sizeof audio_data[0]));
 668               	.LM57:
 669 001a 8CE3      		ldi r24,lo8(60)
 670 001c 90E0      		ldi r25,0
 671 001e 0E94 0000 		call malloc
 672 0022 8093 0000 		sts audio_data,r24
 673 0026 9093 0000 		sts audio_data+1,r25
  66:main.c        ****   nrk_init();
 675               	.LM58:
 676 002a 0E94 0000 		call nrk_init
  67:main.c        ****   nrk_time_set(0,0);
 678               	.LM59:
 679 002e 20E0      		ldi r18,0
 680 0030 30E0      		ldi r19,0
 681 0032 A901      		movw r20,r18
 682 0034 60E0      		ldi r22,0
 683 0036 70E0      		ldi r23,0
 684 0038 CB01      		movw r24,r22
 685 003a 0E94 0000 		call nrk_time_set
  69:main.c        ****   nrk_register_drivers();
 687               	.LM60:
 688 003e 0E94 0000 		call nrk_register_drivers
  70:main.c        ****   nrk_create_taskset ();
 690               	.LM61:
 691 0042 0E94 0000 		call nrk_create_taskset
  71:main.c        ****   nrk_start();
 693               	.LM62:
 694 0046 0E94 0000 		call nrk_start
  74:main.c        **** }
 696               	.LM63:
 697 004a 80E0      		ldi r24,0
 698 004c 90E0      		ldi r25,0
 699 004e 0895      		ret
 701               	.Lscope4:
 703               		.stabd	78,0,0
 704               	.global	__floatunsisf
 705               		.section	.rodata.str1.1
 706               	.LC2:
 707 0019 7769 6E64 		.string	"window no =%d"
 707      6F77 206E 
 707      6F20 3D25 
 707      6400 
 708               	.global	__fixunssfsi
 709               	.LC3:
 710 0027 2068 6173 		.string	" has rms value =%d\r\n"
 710      2072 6D73 
 710      2076 616C 
 710      7565 203D 
 710      2564 0D0A 
 711               		.text
 716               	.global	calculate_rms
 718               	calculate_rms:
 719               		.stabd	46,0,0
 178:main.c        **** 
 179:main.c        **** }
 180:main.c        **** 
 181:main.c        **** uint16_t
 182:main.c        **** calculate_rms(uint16_t audios [], int8_t size, int8_t window_size)
 183:main.c        **** {
 721               	.LM64:
 722               	.LFBB5:
 723 020a 2F92      		push r2
 724 020c 3F92      		push r3
 725 020e 4F92      		push r4
 726 0210 5F92      		push r5
 727 0212 6F92      		push r6
 728 0214 7F92      		push r7
 729 0216 8F92      		push r8
 730 0218 9F92      		push r9
 731 021a AF92      		push r10
 732 021c BF92      		push r11
 733 021e CF92      		push r12
 734 0220 DF92      		push r13
 735 0222 EF92      		push r14
 736 0224 FF92      		push r15
 737 0226 0F93      		push r16
 738 0228 1F93      		push r17
 739 022a CF93      		push r28
 740 022c DF93      		push r29
 741 022e 1F92      		push __zero_reg__
 742 0230 CDB7      		in r28,__SP_L__
 743 0232 DEB7      		in r29,__SP_H__
 744               	/* prologue: function */
 745               	/* frame size = 1 */
 746               	/* stack size = 19 */
 747               	.L__stack_usage = 19
 748 0234 5C01      		movw r10,r24
 184:main.c        ****   uint8_t index = 0;
 185:main.c        ****   uint8_t window_count = 0;
 750               	.LM65:
 751 0236 812C      		mov r8,__zero_reg__
 184:main.c        ****   uint8_t index = 0;
 753               	.LM66:
 754 0238 912C      		mov r9,__zero_reg__
 186:main.c        **** 
 187:main.c        ****   while(index + window_size <= size)
 756               	.LM67:
 757 023a E42E      		mov r14,r20
 758 023c FF24      		clr r15
 759 023e E7FC      		sbrc r14,7
 760 0240 F094      		com r15
 761 0242 C62E      		mov r12,r22
 762 0244 DD24      		clr r13
 763 0246 C7FC      		sbrc r12,7
 764 0248 D094      		com r13
 765               	.LBB2:
 188:main.c        ****   {
 189:main.c        ****     uint16_t rawrms  =0;
 190:main.c        ****     uint16_t rms  = 0;
 191:main.c        **** 
 192:main.c        ****     for(uint8_t count = index ; count < index + window_size ; count++ )
 193:main.c        ****     {
 194:main.c        ****       rawrms += audios[count] * audios[count] ;
 195:main.c        ****     }
 196:main.c        **** 
 197:main.c        ****     rms = rawrms / window_size ;
 198:main.c        ****     rms = sqrt(rms) ;
 199:main.c        **** 
 200:main.c        ****     printf( "window no =%d", window_count);
 767               	.LM68:
 768 024a 70E0      		ldi r23,lo8(.LC2)
 769 024c 272E      		mov r2,r23
 770 024e 70E0      		ldi r23,hi8(.LC2)
 771 0250 372E      		mov r3,r23
 201:main.c        ****     printf( " has rms value =%d\r\n",rms);
 773               	.LM69:
 774 0252 00E0      		ldi r16,lo8(.LC3)
 775 0254 10E0      		ldi r17,hi8(.LC3)
 776               	.LBE2:
 187:main.c        ****   while(index + window_size <= size)
 778               	.LM70:
 779 0256 00C0      		rjmp .L12
 780               	.L13:
 781               	.LBB5:
 782               	.LBB3:
 194:main.c        ****       rawrms += audios[count] * audios[count] ;
 784               	.LM71:
 785 0258 EE0F      		lsl r30
 786 025a FF1F      		rol r31
 787 025c EA0D      		add r30,r10
 788 025e FB1D      		adc r31,r11
 789 0260 6081      		ld r22,Z
 790 0262 7181      		ldd r23,Z+1
 791 0264 669F      		mul r22,r22
 792 0266 F001      		movw r30,r0
 793 0268 679F      		mul r22,r23
 794 026a F00D      		add r31,r0
 795 026c F00D      		add r31,r0
 796 026e 1124      		clr r1
 797 0270 8E0F      		add r24,r30
 798 0272 9F1F      		adc r25,r31
 192:main.c        ****     for(uint8_t count = index ; count < index + window_size ; count++ )
 800               	.LM72:
 801 0274 5F5F      		subi r21,lo8(-(1))
 802 0276 00C0      		rjmp .L14
 803               	.L15:
 804               	.LBE3:
 805               	.LBE5:
 187:main.c        ****   while(index + window_size <= size)
 807               	.LM73:
 808 0278 592D      		mov r21,r9
 809 027a 80E0      		ldi r24,0
 810 027c 90E0      		ldi r25,0
 811               	.L14:
 812               	.LBB6:
 813               	.LBB4:
 192:main.c        ****     for(uint8_t count = index ; count < index + window_size ; count++ )
 815               	.LM74:
 816 027e E52F      		mov r30,r21
 817 0280 F0E0      		ldi r31,0
 818 0282 E217      		cp r30,r18
 819 0284 F307      		cpc r31,r19
 820 0286 04F0      		brlt .L13
 821               	.LBE4:
 197:main.c        ****     rms = rawrms / window_size ;
 823               	.LM75:
 824 0288 B701      		movw r22,r14
 825 028a 0E94 0000 		call __udivmodhi4
 198:main.c        ****     rms = sqrt(rms) ;
 827               	.LM76:
 828 028e 80E0      		ldi r24,0
 829 0290 90E0      		ldi r25,0
 830 0292 4983      		std Y+1,r20
 831 0294 0E94 0000 		call __floatunsisf
 832 0298 0E94 0000 		call sqrt
 833 029c 2B01      		movw r4,r22
 834 029e 3C01      		movw r6,r24
 200:main.c        ****     printf( "window no =%d", window_count);
 836               	.LM77:
 837 02a0 1F92      		push __zero_reg__
 838 02a2 8F92      		push r8
 839 02a4 3F92      		push r3
 840 02a6 2F92      		push r2
 841 02a8 0E94 0000 		call printf
 198:main.c        ****     rms = sqrt(rms) ;
 843               	.LM78:
 844 02ac C301      		movw r24,r6
 845 02ae B201      		movw r22,r4
 846 02b0 0E94 0000 		call __fixunssfsi
 848               	.LM79:
 849 02b4 7F93      		push r23
 850 02b6 6F93      		push r22
 851 02b8 1F93      		push r17
 852 02ba 0F93      		push r16
 853 02bc 0E94 0000 		call printf
 202:main.c        **** 
 203:main.c        ****     window_count++;
 855               	.LM80:
 856 02c0 8394      		inc r8
 182:main.c        **** calculate_rms(uint16_t audios [], int8_t size, int8_t window_size)
 858               	.LM81:
 859 02c2 4981      		ldd r20,Y+1
 860 02c4 940E      		add r9,r20
 861 02c6 0FB6      		in __tmp_reg__,__SREG__
 862 02c8 F894      		cli
 863 02ca DEBF      		out __SP_H__,r29
 864 02cc 0FBE      		out __SREG__,__tmp_reg__
 865 02ce CDBF      		out __SP_L__,r28
 866               	.L12:
 867               	.LBE6:
 187:main.c        ****   while(index + window_size <= size)
 869               	.LM82:
 870 02d0 9701      		movw r18,r14
 871 02d2 290D      		add r18,r9
 872 02d4 311D      		adc r19,__zero_reg__
 873 02d6 C216      		cp r12,r18
 874 02d8 D306      		cpc r13,r19
 875 02da 04F4      		brge .L15
 204:main.c        ****     index = index + window_size;
 205:main.c        ****   }
 206:main.c        **** 
 207:main.c        ****   return 0;
 208:main.c        **** }
 877               	.LM83:
 878 02dc 80E0      		ldi r24,0
 879 02de 90E0      		ldi r25,0
 880               	/* epilogue start */
 881 02e0 0F90      		pop __tmp_reg__
 882 02e2 DF91      		pop r29
 883 02e4 CF91      		pop r28
 884 02e6 1F91      		pop r17
 885 02e8 0F91      		pop r16
 886 02ea FF90      		pop r15
 887 02ec EF90      		pop r14
 888 02ee DF90      		pop r13
 889 02f0 CF90      		pop r12
 890 02f2 BF90      		pop r11
 891 02f4 AF90      		pop r10
 892 02f6 9F90      		pop r9
 893 02f8 8F90      		pop r8
 894 02fa 7F90      		pop r7
 895 02fc 6F90      		pop r6
 896 02fe 5F90      		pop r5
 897 0300 4F90      		pop r4
 898 0302 3F90      		pop r3
 899 0304 2F90      		pop r2
 900 0306 0895      		ret
 921               	.Lscope5:
 923               		.stabd	78,0,0
 924               		.section	.rodata.str1.1
 925               	.LC4:
 926 003c 5461 736B 		.string	"Task2 PID=%u\r\n"
 926      3220 5049 
 926      443D 2575 
 926      0D0A 00
 927               	.LC5:
 928 004b 2575 0D0A 		.string	"%u\r\n"
 928      00
 929               		.text
 931               	.global	analyze_Audio_Data
 933               	analyze_Audio_Data:
 934               		.stabd	46,0,0
 112:main.c        **** {
 936               	.LM84:
 937               	.LFBB6:
 938               	/* prologue: function */
 939               	/* frame size = 0 */
 940               	/* stack size = 0 */
 941               	.L__stack_usage = 0
 114:main.c        ****   printf( "Task2 PID=%u\r\n",nrk_get_pid());
 943               	.LM85:
 944 0308 0E94 0000 		call nrk_get_pid
 945 030c 1F92      		push __zero_reg__
 946 030e 8F93      		push r24
 947 0310 80E0      		ldi r24,lo8(.LC4)
 948 0312 90E0      		ldi r25,hi8(.LC4)
 949 0314 9F93      		push r25
 950 0316 8F93      		push r24
 951 0318 0E94 0000 		call printf
 952 031c 0F90      		pop __tmp_reg__
 953 031e 0F90      		pop __tmp_reg__
 954 0320 0F90      		pop __tmp_reg__
 955 0322 0F90      		pop __tmp_reg__
 956               	.LBB7:
 122:main.c        ****   	printf( "%u\r\n", 2);
 958               	.LM86:
 959 0324 12E0      		ldi r17,lo8(2)
 960 0326 C0E0      		ldi r28,lo8(.LC5)
 961 0328 D0E0      		ldi r29,hi8(.LC5)
 962               	.L17:
 118:main.c        ****   	nrk_led_clr(BLUE_LED);
 964               	.LM87:
 965 032a 83E0      		ldi r24,lo8(3)
 966 032c 90E0      		ldi r25,0
 967 032e 0E94 0000 		call nrk_led_clr
 119:main.c        ****   	nrk_led_clr(RED_LED);
 969               	.LM88:
 970 0332 80E0      		ldi r24,0
 971 0334 90E0      		ldi r25,0
 972 0336 0E94 0000 		call nrk_led_clr
 120:main.c        **** 	  nrk_led_toggle(BLUE_LED);
 974               	.LM89:
 975 033a 83E0      		ldi r24,lo8(3)
 976 033c 90E0      		ldi r25,0
 977 033e 0E94 0000 		call nrk_led_toggle
 122:main.c        ****   	printf( "%u\r\n", 2);
 979               	.LM90:
 980 0342 1F92      		push __zero_reg__
 981 0344 1F93      		push r17
 982 0346 DF93      		push r29
 983 0348 CF93      		push r28
 984 034a 0E94 0000 		call printf
 124:main.c        ****   	uint16_t rms = calculate_rms(audio_data, audio_data_size, 10);
 986               	.LM91:
 987 034e 4AE0      		ldi r20,lo8(10)
 988 0350 6091 0000 		lds r22,audio_data_size
 989 0354 8091 0000 		lds r24,audio_data
 990 0358 9091 0000 		lds r25,audio_data+1
 991 035c 0E94 0000 		call calculate_rms
 126:main.c        **** 	nrk_wait_until_next_period();
 993               	.LM92:
 994 0360 0E94 0000 		call nrk_wait_until_next_period
 995 0364 0F90      		pop __tmp_reg__
 996 0366 0F90      		pop __tmp_reg__
 997 0368 0F90      		pop __tmp_reg__
 998 036a 0F90      		pop __tmp_reg__
 999 036c 00C0      		rjmp .L17
 1000               	.LBE7:
 1002               	.Lscope6:
 1004               		.stabd	78,0,0
 1005               		.comm	audio_data_size,1,1
 1006               		.comm	audio_data,2,1
 1007               		.comm	TaskTwo,35,1
 1008               		.comm	TaskOne,35,1
 1009               		.comm	Stack2,128,1
 1010               		.comm	Stack1,128,1
 1011               		.comm	app_timer0_prescale,1,1
 1012               		.comm	app_timer0_callback,2,1
 1013               		.comm	_nrk_time_trigger,1,1
 1014               		.comm	_nrk_prev_timer_val,1,1
 1015               		.comm	error_num,1,1
 1016               		.comm	error_task,1,1
 1017               		.comm	nrk_kernel_stk_ptr,2,1
 1018               		.comm	nrk_idle_task_stk,128,1
 1019               		.comm	_nrk_signal_list,4,1
 1020               		.section	.progmem.data,"a",@progbits
 1023               	__c.3162:
 1024 0000 4661 696C 		.string	"Failed to open sensor driver\r\n"
 1024      6564 2074 
 1024      6F20 6F70 
 1024      656E 2073 
 1024      656E 736F 
 1027               	__c.3175:
 1028 001f 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 1028      6564 2074 
 1028      6F20 6C6F 
 1028      6164 206D 
 1028      7920 4144 
 1044               		.text
 1046               	.Letext0:
 1047               		.ident	"GCC: (GNU) 4.7.2"
 1048               	.global __do_copy_data
 1049               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:4      *ABS*:000000000000003f __SREG__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:5      *ABS*:000000000000003b __RAMPZ__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:6      *ABS*:0000000000000000 __tmp_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:7      *ABS*:0000000000000001 __zero_reg__
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:298    .text:0000000000000000 collect_Audio_Data
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:1023   .progmem.data:0000000000000000 __c.3162
                            *COM*:0000000000000002 audio_data
                            *COM*:0000000000000001 audio_data_size
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:424    .text:00000000000000a2 nrk_create_taskset
                            *COM*:0000000000000023 TaskOne
                            *COM*:0000000000000080 Stack1
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:933    .text:0000000000000308 analyze_Audio_Data
                            *COM*:0000000000000023 TaskTwo
                            *COM*:0000000000000080 Stack2
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:604    .text:00000000000001f2 nrk_register_drivers
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:1027   .progmem.data:000000000000001f __c.3175
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:641    .text.startup:0000000000000000 main
/var/folders/7t/5z8zx9ys69n2cs122c_s48hh0000gn/T//ccZwq41A.s:718    .text:000000000000020a calculate_rms
                            *COM*:0000000000000001 app_timer0_prescale
                            *COM*:0000000000000002 app_timer0_callback
                            *COM*:0000000000000001 _nrk_time_trigger
                            *COM*:0000000000000001 _nrk_prev_timer_val
                            *COM*:0000000000000001 error_num
                            *COM*:0000000000000001 error_task
                            *COM*:0000000000000002 nrk_kernel_stk_ptr
                            *COM*:0000000000000080 nrk_idle_task_stk
                            *COM*:0000000000000004 _nrk_signal_list

UNDEFINED SYMBOLS
nrk_open
nrk_kprintf
nrk_set_status
nrk_spin_wait_us
nrk_read
printf
nrk_led_clr
nrk_led_toggle
nrk_wait_until_next_period
nrk_task_set_entry_function
nrk_task_set_stk
nrk_activate_task
dev_manager_ff3_sensors
nrk_register_driver
nrk_setup_ports
nrk_setup_uart
puts
malloc
nrk_init
nrk_time_set
nrk_start
__floatunsisf
__fixunssfsi
__udivmodhi4
sqrt
nrk_get_pid
__do_copy_data
__do_clear_bss
